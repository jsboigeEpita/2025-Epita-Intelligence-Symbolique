#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Module pour le pipeline de diagnostic de l'environnement.

Ce module fournit les fonctionnalit√©s n√©cessaires pour ex√©cuter un diagnostic complet
de l'environnement de d√©veloppement. Il v√©rifie la configuration de Python,
l'installation du package du projet, les d√©pendances essentielles et optionnelles,
la configuration de Java et JPype, la pr√©sence de cl√©s API (optionnel),
et la conformit√© des d√©pendances list√©es dans un fichier `requirements.txt`.

Le pipeline g√©n√®re un rapport de diagnostic, des recommandations pour corriger
les probl√®mes d√©tect√©s, un script de validation rapide de l'environnement,
et un template `.env` pour la configuration des cl√©s API.

Ce module est con√ßu pour √™tre utilis√© comme un outil de diagnostic autonome ou
int√©gr√© dans des scripts de configuration ou de CI/CD.
"""

import sys
import os
import logging
import subprocess
import platform
import importlib
from pathlib import Path
import json
from typing import Dict, List, Tuple, Optional

from project_core.dev_utils.env_checks import check_java_environment, check_jpype_config, check_python_dependencies
from project_core.utils.logging_utils import setup_logging

# Configuration du logger pour ce module
logger = logging.getLogger(__name__)

class EnvironmentDiagnostic:
    """Classe principale pour effectuer le diagnostic de l'environnement.

    Cette classe encapsule toutes les logiques de v√©rification, de g√©n√©ration de rapport,
    et de cr√©ation d'artefacts pour le diagnostic de l'environnement.
    Elle maintient l'√©tat du diagnostic dans un dictionnaire `self.results`.
    """
    
    def __init__(self, requirements_file_path: Path):
        """Initialise la classe EnvironmentDiagnostic.

        :param requirements_file_path: Chemin vers le fichier `requirements.txt` √† utiliser
                                       pour la v√©rification des d√©pendances Python.
        :type requirements_file_path: Path
        """
        self.project_root = Path(__file__).parent.parent.parent
        self.requirements_file_path = requirements_file_path
        self.results = {
            "python_info": {},
            "package_installation": {},
            "dependencies": {},
            "java_config": {},
            "jpype_config": {},
            "api_keys": {},
            "python_dependencies_status": {},
            "recommendations": []
        }
        
    def run_command(self, cmd: List[str], cwd: Optional[Path] = None) -> Tuple[int, str, str]:
        """Ex√©cute une commande syst√®me et retourne son code de sortie, stdout et stderr.

        Cette m√©thode utilitaire permet d'ex√©cuter des commandes externes de mani√®re
        s√©curis√©e et de capturer leur sortie.

        :param cmd: La commande √† ex√©cuter, sous forme de liste de cha√Ænes.
        :type cmd: List[str]
        :param cwd: Le r√©pertoire de travail courant pour l'ex√©cution de la commande.
                    Si None, utilise la racine du projet.
        :type cwd: Optional[Path]
        :return: Un tuple contenant le code de retour (int), la sortie standard (str),
                 et la sortie d'erreur (str). En cas d'exception lors de l'ex√©cution,
                 retourne (-1, "", message_erreur).
        :rtype: Tuple[int, str, str]
        """
        try:
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                cwd=cwd or self.project_root
            )
            stdout, stderr = process.communicate()
            return process.returncode, stdout, stderr
        except Exception as e:
            logger.error(f"Erreur lors de l'ex√©cution de {cmd}: {e}")
            return -1, "", str(e)
    
    def check_python_environment(self) -> Dict:
        """V√©rifie et collecte des informations sur l'environnement Python courant.

        Inclut la version de Python, l'ex√©cutable, la plateforme, l'architecture,
        la pr√©sence d'un environnement virtuel, et les premiers chemins de PYTHONPATH.
        Ajoute une recommandation si aucun environnement virtuel n'est d√©tect√©.

        :return: Un dictionnaire contenant les informations sur l'environnement Python.
        :rtype: Dict
        """
        logger.info("üêç V√©rification de l'environnement Python...")
        
        python_info = {
            "version": sys.version,
            "executable": sys.executable,
            "platform": platform.platform(),
            "architecture": platform.architecture(),
            "in_venv": hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix),
            "pythonpath": sys.path[:5]  # Premiers 5 √©l√©ments
        }
        
        logger.info(f"Version Python: {python_info['version']}")
        logger.info(f"Ex√©cutable: {python_info['executable']}")
        logger.info(f"Environnement virtuel: {'Oui' if python_info['in_venv'] else 'Non'}")
        
        if not python_info['in_venv']:
            self.results["recommendations"].append(
                "‚ö†Ô∏è  Recommandation: Utilisez un environnement virtuel pour √©viter les conflits de d√©pendances"
            )
        
        self.results["python_info"] = python_info
        return python_info
    
    def check_package_installation(self) -> Dict:
        """V√©rifie si le package principal du projet est install√© et s'il l'est en mode √©ditable.

        Tente d'importer le package `argumentation_analysis` et utilise `pip show`
        pour d√©terminer le mode d'installation. Ajoute une recommandation si le package
        n'est pas install√©.

        :return: Un dictionnaire contenant le statut d'installation du package.
        :rtype: Dict
        """
        logger.info("üì¶ V√©rification de l'installation du package...")
        
        package_info = {
            "installed": False,
            "editable": False,
            "location": None,
            "error": None
        }
        
        try:
            # Tenter d'importer le package principal
            import argumentation_analysis # Assurez-vous que ce nom est correct et importable
            package_info["installed"] = True
            package_info["location"] = str(Path(argumentation_analysis.__file__).parent)
            
            # V√©rifier si install√© en mode √©ditable
            returncode, stdout, stderr = self.run_command([sys.executable, "-m", "pip", "show", "argumentation_analysis"])
            if returncode == 0 and "Editable project location:" in stdout:
                package_info["editable"] = True
                
        except ImportError as e:
            package_info["error"] = str(e)
            logger.warning(f"Package non install√©: {e}")
            self.results["recommendations"].append(
                "üîß Action requise: Installer le package en mode d√©veloppement avec 'pip install -e .'"
            )
        
        self.results["package_installation"] = package_info
        return package_info
    
    def check_core_dependencies(self) -> Dict:
        """V√©rifie la pr√©sence et la version des d√©pendances Python essentielles et optionnelles.

        Les listes de d√©pendances essentielles et optionnelles sont d√©finies en interne.
        Tente d'importer chaque d√©pendance et r√©cup√®re sa version si disponible.
        Ajoute une recommandation si des d√©pendances essentielles sont manquantes.

        :return: Un dictionnaire d√©taillant le statut de chaque d√©pendance.
        :rtype: Dict
        """
        logger.info("üîç V√©rification des d√©pendances essentielles...")
        
        essential_deps = [
            "numpy", "pandas", "matplotlib", "cryptography", "cffi", "psutil"
        ]
        
        optional_deps = [
            "pytest", "pytest-cov", "scikit-learn", "networkx", 
            "torch", "transformers", "notebook"
        ]
        
        deps_status = {"essential": {}, "optional": {}, "missing_essential": [], "missing_optional": []}
        
        # V√©rifier d√©pendances essentielles
        for dep in essential_deps:
            try:
                module = importlib.import_module(dep.replace("-", "_"))
                version = getattr(module, "__version__", "unknown")
                deps_status["essential"][dep] = {"installed": True, "version": version}
                logger.info(f"‚úÖ {dep}: {version}")
            except ImportError:
                deps_status["essential"][dep] = {"installed": False, "version": None}
                deps_status["missing_essential"].append(dep)
                logger.warning(f"‚ùå {dep}: Non install√©")
        
        # V√©rifier d√©pendances optionnelles
        for dep in optional_deps:
            try:
                module = importlib.import_module(dep.replace("-", "_"))
                version = getattr(module, "__version__", "unknown")
                deps_status["optional"][dep] = {"installed": True, "version": version}
                logger.info(f"‚úÖ {dep}: {version}")
            except ImportError:
                deps_status["optional"][dep] = {"installed": False, "version": None}
                deps_status["missing_optional"].append(dep)
                logger.info(f"‚ÑπÔ∏è  {dep}: Non install√© (optionnel)")
        
        if deps_status["missing_essential"]:
            self.results["recommendations"].append(
                f"üîß Action requise: Installer les d√©pendances essentielles manquantes: {', '.join(deps_status['missing_essential'])}"
            )
        
        self.results["dependencies"] = deps_status
        return deps_status

    def check_api_keys(self) -> Dict:
        """V√©rifie la configuration des cl√©s API (OpenAI, Azure) de mani√®re optionnelle.

        Recherche la pr√©sence d'un fichier `.env` √† la racine du projet et v√©rifie
        si les variables d'environnement `OPENAI_API_KEY` ou `AZURE_OPENAI_KEY`
        sont d√©finies. Ne lit pas les valeurs des cl√©s pour des raisons de s√©curit√©.
        Ajoute une recommandation si le fichier `.env` est absent.

        :return: Un dictionnaire indiquant la pr√©sence des configurations de cl√©s API.
        :rtype: Dict
        """
        logger.info("üîë V√©rification des cl√©s API (optionnel)...")
        
        api_config = {
            "env_file_exists": False,
            "openai_key": False,
            "azure_key": False,
            "recommendations": []
        }
        
        # V√©rifier fichier .env
        env_file = self.project_root / ".env"
        if env_file.exists():
            api_config["env_file_exists"] = True
            logger.info("‚úÖ Fichier .env trouv√©")
            
            # Lire le contenu (sans exposer les cl√©s)
            try:
                with open(env_file, 'r') as f:
                    content = f.read()
                    api_config["openai_key"] = "OPENAI_API_KEY" in content
                    api_config["azure_key"] = "AZURE_OPENAI_KEY" in content
            except Exception as e:
                logger.warning(f"Erreur lecture .env: {e}")
        else:
            logger.info("‚ÑπÔ∏è  Fichier .env non trouv√© (optionnel)")
            api_config["recommendations"].append("Cr√©er un fichier .env pour les cl√©s API si n√©cessaire")
        
        # V√©rifier variables d'environnement
        if os.environ.get("OPENAI_API_KEY"):
            api_config["openai_key"] = True
            logger.info("‚úÖ Cl√© OpenAI trouv√©e dans l'environnement")
        
        if os.environ.get("AZURE_OPENAI_KEY"):
            api_config["azure_key"] = True
            logger.info("‚úÖ Cl√© Azure trouv√©e dans l'environnement")
        
        if not (api_config["openai_key"] or api_config["azure_key"]):
            logger.info("‚ÑπÔ∏è  Aucune cl√© API configur√©e (optionnel pour certains tests)")
        
        self.results["api_keys"] = api_config
        return api_config
    
    def generate_recommendations(self) -> List[str]:
        """G√©n√®re une liste de recommandations bas√©es sur les r√©sultats du diagnostic.

        Compile les probl√®mes d√©tect√©s lors des diff√©rentes √©tapes de v√©rification
        (installation du package, d√©pendances, Java, JPype, environnement virtuel)
        et formule des actions correctives. Ces recommandations sont stock√©es
        dans `self.results["recommendations"]`.

        :return: Une liste de cha√Ænes de caract√®res, chaque cha√Æne √©tant une recommandation.
                 Note: cette m√©thode modifie √©galement `self.results["recommendations"]` directement.
        :rtype: List[str]
        """
        recommendations = []
        # Les recommandations sont ajout√©es √† self.results["recommendations"]
        # au fur et √† mesure des v√©rifications et consolid√©es ici.
        # Cette fonction pourrait √™tre renomm√©e ou son r√¥le clarifi√©,
        # car elle semble √† la fois g√©n√©rer ET r√©cup√©rer/consolider.
        # Pour l'instant, on garde la logique existante o√π elle peuple
        # une nouvelle liste `recommendations` bas√©e sur `self.results`.
        
        # Recommandations pour l'installation du package
        if not self.results["package_installation"].get("installed", False):
            recommendations.append("üîß CRITIQUE: Installer le package en mode d√©veloppement:")
            recommendations.append("   pip install -e .")
        
        # Recommandations pour les d√©pendances
        missing_essential = self.results["dependencies"].get("missing_essential", [])
        if missing_essential:
            recommendations.append("üîß CRITIQUE: Installer les d√©pendances essentielles:")
            recommendations.append(f"   pip install {' '.join(missing_essential)}")
        
        # Recommandations pour Java
        java_config_results = self.results.get("java_config", {})
        if not java_config_results.get("is_ok", True): 
            recommendations.append("üîß IMPORTANT: Probl√®mes d√©tect√©s avec l'environnement Java.")
            recommendations.append("   Consultez les logs produits par 'project_core.dev_utils.env_checks.check_java_environment' pour plus de d√©tails.")
            recommendations.append("   Assurez-vous que Java est install√©, que 'java -version' fonctionne et que JAVA_HOME est correctement configur√©.")
        
        # Recommandations pour JPype
        jpype_config_results = self.results.get("jpype_config", {})
        if not jpype_config_results.get("is_ok", True):
            recommendations.append("üîß IMPORTANT: Probl√®mes d√©tect√©s avec la configuration de JPype.")
            recommendations.append("   Consultez les logs produits par 'project_core.dev_utils.env_checks.check_jpype_config' pour plus de d√©tails.")
            recommendations.append("   Assurez-vous que JPype1 est install√© et que la JVM peut √™tre d√©marr√©e.")
            recommendations.append("   V√©rifiez √©galement la configuration de JAVA_HOME si JPype ne trouve pas la JVM.")

        # Recommandations pour l'environnement virtuel
        if not self.results["python_info"].get("in_venv", False):
            recommendations.append("‚ö†Ô∏è  RECOMMAND√â: Utiliser un environnement virtuel:")
            recommendations.append("   python -m venv venv")
            recommendations.append("   venv\\Scripts\\activate  # Windows")
            recommendations.append("   source venv/bin/activate  # Linux/Mac")
        
        return recommendations
    
    def create_validation_script(self) -> Path:
        """Cr√©e un script Python pour une validation rapide de l'environnement.

        Le script g√©n√©r√© (`scripts/setup/validate_environment.py`) effectue des v√©rifications
        de base comme l'importation du package principal et de quelques d√©pendances essentielles.
        Ceci permet √† l'utilisateur de rapidement tester si les corrections apport√©es
        ont r√©solu les probl√®mes majeurs.

        :return: Le chemin vers le script de validation cr√©√©.
        :rtype: Path
        """
        # Contenu du script de validation.
        # Ce script est destin√© √† √™tre simple et autonome.
        script_content = '''#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Script de validation rapide de l'environnement.
G√©n√©r√© automatiquement par le pipeline de diagnostic.
"""

import sys
import importlib

def validate_environment():
    """Valide rapidement l'environnement."""
    print("üîç Validation rapide de l'environnement...")
    
    # V√©rifier le package principal
    try:
        import argumentation_analysis # Assurez-vous que ce nom est correct
        print("‚úÖ Package argumentation_analysis: OK")
    except ImportError as e:
        print(f"‚ùå Package argumentation_analysis: {e}")
        return False
    
    # V√©rifier d√©pendances essentielles
    essential_deps = ["numpy", "pandas", "matplotlib", "cryptography"]
    for dep in essential_deps:
        try:
            importlib.import_module(dep)
            print(f"‚úÖ {dep}: OK")
        except ImportError:
            print(f"‚ùå {dep}: Manquant")
            return False
    
    # V√©rifier JPype ou mock
    jpype_ok = False
    try:
        import jpype1
        print("‚úÖ JPype1: OK")
        jpype_ok = True
    except ImportError:
        try:
            # Tenter d'importer un mock si JPype n'est pas l√†.
            # Adapter le chemin si n√©cessaire, ex: from project_core.mocks import jpype_mock
            # Pour l'instant, on suppose un mock local au script de test ou un mock global.
            # Si le mock est dans tests/mocks/jpype_mock.py, il faut que tests soit dans PYTHONPATH
            # ou que le script soit lanc√© depuis la racine du projet.
            # Pour un module de pipeline, il est pr√©f√©rable de ne pas d√©pendre de tests/.
            # On pourrait passer un flag pour utiliser un mock ou le rendre configurable.
            # Pour l'instant, on laisse le try-except simple.
            # import jpype_mock # Ceci ne fonctionnera probablement pas directement.
            print("‚ÑπÔ∏è  JPype1 non trouv√©, tentative d'utilisation d'un mock non impl√©ment√©e ici.")
        except ImportError:
            print("‚ö†Ô∏è  JPype/Mock: Non disponible")
            # jpype_ok = False # D√©j√† False
    
    print("\\nüéâ Validation termin√©e!")
    return True

if __name__ == "__main__":
    success = validate_environment()
    sys.exit(0 if success else 1)
'''
        
        script_path = self.project_root / "scripts" / "setup" / "validate_environment.py"
        # S'assurer que le r√©pertoire existe
        script_path.parent.mkdir(parents=True, exist_ok=True)
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(script_content)
        
        logger.info(f"‚úÖ Script de validation cr√©√©: {script_path}")
        return script_path
    
    def create_env_template(self) -> Path:
        """Cr√©e un fichier template `.env.template` √† la racine du projet.

        Ce template fournit un mod√®le que les utilisateurs peuvent copier vers `.env`
        pour configurer leurs cl√©s API et d'autres variables d'environnement
        pertinentes pour le projet (Java, JPype, logging).

        :return: Le chemin vers le fichier template `.env.template` cr√©√©.
        :rtype: Path
        """
        # Contenu du template .env.
        # Il est important de ne pas inclure de vraies cl√©s ici.
        env_template = '''# Template de configuration des cl√©s API
# Copiez ce fichier vers .env et remplissez vos cl√©s

# Cl√©s OpenAI (optionnel)
# OPENAI_API_KEY=your_openai_api_key_here
# OPENAI_ORG_ID=your_openai_org_id_here

# Cl√©s Azure OpenAI (optionnel)
# AZURE_OPENAI_KEY=your_azure_openai_key_here
# AZURE_OPENAI_ENDPOINT=your_azure_openai_endpoint_here
# AZURE_OPENAI_VERSION=2023-12-01-preview

# Configuration Java (optionnel)
# JAVA_HOME=C:\\Program Files\\Java\\jdk-11.0.x
# JPYPE_JVM_PATH=C:\\Program Files\\Java\\jdk-11.0.x\\bin\\server\\jvm.dll

# Configuration de d√©veloppement
# DEBUG=true
# LOG_LEVEL=INFO
'''
        
        template_path = self.project_root / ".env.template"
        with open(template_path, 'w', encoding='utf-8') as f:
            f.write(env_template)
        
        logger.info(f"‚úÖ Template .env cr√©√©: {template_path}")
        return template_path
    
    def save_diagnostic_report(self) -> Path:
        """Sauvegarde le rapport de diagnostic complet au format JSON.

        Le rapport (`diagnostic_report.json`) contient tous les r√©sultats collect√©s
        par les diff√©rentes m√©thodes de v√©rification. Il est sauvegard√© √† la racine du projet.

        :return: Le chemin vers le fichier de rapport JSON sauvegard√©.
        :rtype: Path
        """
        report_path = self.project_root / "diagnostic_report.json"
        
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        
        logger.info(f"‚úÖ Rapport de diagnostic sauvegard√©: {report_path}")
        return report_path
    
    def run_full_diagnostic(self) -> Dict:
        """Ex√©cute l'ensemble du pipeline de diagnostic.

        Cette m√©thode orchestre l'appel s√©quentiel de toutes les √©tapes de v√©rification :
        - Environnement Python
        - Installation du package
        - D√©pendances principales
        - Environnement Java (via `check_java_environment`)
        - Configuration JPype (via `check_jpype_config`)
        - Cl√©s API (optionnel)
        - D√©pendances Python list√©es dans `requirements.txt` (via `check_python_dependencies`)

        Elle g√©n√®re ensuite les recommandations, cr√©e le script de validation et le template .env,
        sauvegarde le rapport de diagnostic et affiche un r√©sum√©.

        :return: Un dictionnaire contenant tous les r√©sultats du diagnostic.
        :rtype: Dict
        """
        logger.info("üöÄ D√©marrage du diagnostic complet de l'environnement...")
        logger.info("=" * 60)
        
        # Ex√©cuter tous les checks
        self.check_python_environment()
        self.check_package_installation()
        self.check_core_dependencies()
        
        java_env_is_ok = check_java_environment()
        self.results["java_config"] = {
            "is_ok": java_env_is_ok,
            "message": "La v√©rification de l'environnement Java est effectu√©e par project_core.dev_utils.env_checks. Consulter les logs pour les d√©tails."
        }
        jpype_env_is_ok = check_jpype_config()
        self.results["jpype_config"] = {
            "is_ok": jpype_env_is_ok,
            "message": "La v√©rification de la configuration JPype est effectu√©e par project_core.dev_utils.env_checks. Consulter les logs pour les d√©tails."
        }
        self.check_api_keys()

        # V√©rifier les d√©pendances Python √† partir de requirements.txt
        # self.requirements_file_path est maintenant pass√© au constructeur
        python_deps_ok = check_python_dependencies(self.requirements_file_path)
        self.results["python_dependencies_status"] = {
            "file_checked": str(self.requirements_file_path),
            "all_ok": python_deps_ok,
            "message": f"V√©rification des d√©pendances de {self.requirements_file_path} {'r√©ussie' if python_deps_ok else '√©chou√©e'}."
        }
        if not python_deps_ok:
            self.results["recommendations"].append(
                f"‚ö†Ô∏è  Avertissement: Certaines d√©pendances dans {self.requirements_file_path} ne sont pas satisfaites. Consultez les logs de 'check_python_dependencies'."
            )
        
        # G√©n√©rer recommandations
        recommendations = self.generate_recommendations() # self.results["recommendations"] est √©tendu √† l'int√©rieur
        # self.results["recommendations"].extend(recommendations) # D√©j√† fait dans generate_recommendations si on modifie la liste directement
        
        # Cr√©er fichiers utiles
        self.create_validation_script()
        self.create_env_template()
        
        # Sauvegarder rapport
        self.save_diagnostic_report()
        
        # Afficher r√©sum√©
        self.print_summary()
        
        return self.results
    
    def print_summary(self):
        """Affiche un r√©sum√© format√© du diagnostic dans les logs.

        Le r√©sum√© inclut un statut global (succ√®s ou √©chec bas√© sur les v√©rifications critiques),
        le statut de chaque v√©rification majeure, les recommandations, et la liste des
        fichiers cr√©√©s ou mis √† jour par le pipeline.
        """
        logger.info("=" * 60)
        logger.info("üìã R√âSUM√â DU DIAGNOSTIC")
        logger.info("=" * 60)
        
        # Statut g√©n√©ral
        package_ok = self.results["package_installation"].get("installed", False)
        essential_deps_ok = len(self.results["dependencies"].get("missing_essential", [])) == 0
        java_ok = self.results["java_config"].get("is_ok", False)
        jpype_ok = self.results["jpype_config"].get("is_ok", False)
        python_deps_file_ok = self.results["python_dependencies_status"].get("all_ok", False)

        overall_status = package_ok and essential_deps_ok and java_ok and jpype_ok and python_deps_file_ok
        
        if overall_status:
            logger.info("üéâ STATUT GLOBAL: Environnement semble correctement configur√©.")
        else:
            logger.warning("‚ùå STATUT GLOBAL: Des probl√®mes ont √©t√© d√©tect√©s. Veuillez consulter les recommandations.")

        logger.info(f"  - Installation du package: {'‚úÖ OK' if package_ok else '‚ùå Probl√®me'}")
        logger.info(f"  - D√©pendances essentielles: {'‚úÖ OK' if essential_deps_ok else '‚ùå Probl√®mes'}")
        logger.info(f"  - Environnement Java: {'‚úÖ OK' if java_ok else '‚ùå Probl√®me'}")
        logger.info(f"  - Configuration JPype: {'‚úÖ OK' if jpype_ok else '‚ùå Probl√®me'}")
        logger.info(f"  - D√©pendances ({self.requirements_file_path.name}): {'‚úÖ OK' if python_deps_file_ok else '‚ùå Probl√®mes'}")

        # Afficher recommandations
        if self.results["recommendations"]:
            logger.info("\nüîß ACTIONS RECOMMAND√âES:")
            unique_recommendations = sorted(list(set(self.results["recommendations"]))) # √âviter les doublons
            for rec in unique_recommendations:
                logger.info(f"   {rec}")
        
        logger.info("\nüìÅ FICHIERS CR√â√âS/MIS √Ä JOUR:")
        logger.info(f"   - {self.project_root / 'scripts' / 'setup' / 'validate_environment.py'} (validation rapide)")
        logger.info(f"   - {self.project_root / '.env.template'} (template de configuration)")
        logger.info(f"   - {self.project_root / 'diagnostic_report.json'} (rapport d√©taill√©)")
        
        logger.info("=" * 60)

def run_environment_diagnostic_pipeline(requirements_path: str, log_level: str = "INFO") -> int:
    """Ex√©cute le pipeline de diagnostic complet de l'environnement.

    Cette fonction principale orchestre le diagnostic de l'environnement.
    Elle configure le logging, initialise la classe `EnvironmentDiagnostic`,
    et lance une s√©rie de v√©rifications. Ces v√©rifications incluent:
    - L'environnement Python (version, ex√©cutable, environnement virtuel).
    - L'installation du package principal du projet.
    - Les d√©pendances Python essentielles et optionnelles.
    - La configuration de l'environnement Java (JDK, JAVA_HOME).
    - La configuration de JPype pour l'int√©gration Java-Python.
    - La pr√©sence (optionnelle) de cl√©s API via un fichier `.env` ou variables d'environnement.
    - La conformit√© des d√©pendances list√©es dans le fichier `requirements.txt` sp√©cifi√©.

    Sur la base des r√©sultats, le pipeline g√©n√®re des recommandations pour r√©soudre
    les probl√®mes identifi√©s. Il cr√©e √©galement des artefacts utiles :
    - Un script Python de validation rapide de l'environnement.
    - Un fichier template `.env.template` pour la gestion des cl√©s API.
    - Un rapport de diagnostic d√©taill√© au format JSON.

    La fonction se termine en affichant un r√©sum√© du diagnostic et retourne un code de sortie
    indiquant le succ√®s global des v√©rifications critiques.

    :param requirements_path: Chemin vers le fichier `requirements.txt` √† v√©rifier.
    :type requirements_path: str
    :param log_level: Niveau de logging √† utiliser pour le pipeline (par exemple, "INFO", "DEBUG").
                      La valeur par d√©faut est "INFO".
    :type log_level: str
    :return: Code de sortie indiquant le r√©sultat du diagnostic.
             0 si les v√©rifications critiques (installation du package, d√©pendances essentielles,
             Java, JPype, et le fichier requirements) sont toutes OK.
             1 si un ou plusieurs probl√®mes critiques sont d√©tect√©s.
    :rtype: int
    :raises FileNotFoundError: Si le fichier `requirements.txt` sp√©cifi√© n'est pas trouv√©
                               lorsque le pipeline est ex√©cut√© directement via `if __name__ == '__main__':`.
                               (Note: cette exception est g√©r√©e dans le bloc `if __name__ == '__main__':`
                               et n'est pas directement lev√©e par cette fonction elle-m√™me dans son usage normal).
    """
    # Configuration du logging pour le pipeline
    # Le logger global du module est d√©j√† d√©fini, setup_logging configure le root logger
    # et potentiellement d'autres handlers.
    # Si setup_logging est bien idempotent ou configure le root, c'est OK.
    # Sinon, il faudrait peut-√™tre passer le logger sp√©cifique.
    # Pour l'instant, on suppose que setup_logging g√®re bien la configuration globale.
    numeric_log_level = getattr(logging, log_level.upper(), logging.INFO)
    setup_logging(level=numeric_log_level) # Utilise la fonction import√©e

    logger.info(f"D√©marrage du pipeline de diagnostic de l'environnement avec log_level={log_level}.")
    logger.info(f"Fichier requirements utilis√© : {requirements_path}")

    req_file_path = Path(requirements_path)
    if not req_file_path.is_absolute():
        # Si le chemin n'est pas absolu, on le consid√®re relatif √† la racine du projet
        # La classe EnvironmentDiagnostic calcule project_root, utilisons-le.
        # Pour l'instant, on le passe tel quel, EnvironmentDiagnostic le r√©soudra si besoin
        # ou on s'assure que le script appelant passe un chemin absolu ou bien r√©solu.
        # Pour l'instant, on suppose que le chemin est correct.
        pass

    diagnostic = EnvironmentDiagnostic(requirements_file_path=req_file_path)
    results = diagnostic.run_full_diagnostic()
    
    # Code de sortie bas√© sur le statut (peut √™tre affin√©)
    package_ok = results["package_installation"].get("installed", False)
    essential_deps_ok = len(results["dependencies"].get("missing_essential", [])) == 0
    java_ok = results["java_config"].get("is_ok", False)
    jpype_ok = results["jpype_config"].get("is_ok", False)
    python_deps_file_ok = results["python_dependencies_status"].get("all_ok", False)

    # Un diagnostic est consid√©r√© comme "r√©ussi" si tous les √©l√©ments critiques sont OK.
    if package_ok and essential_deps_ok and java_ok and jpype_ok and python_deps_file_ok:
        logger.info("Pipeline de diagnostic termin√© avec succ√®s.")
        return 0  # Succ√®s
    else:
        logger.warning("Pipeline de diagnostic termin√© avec des probl√®mes d√©tect√©s.")
        return 1  # Probl√®mes d√©tect√©s

if __name__ == '__main__':
    # Exemple d'utilisation directe du pipeline (pour test)
    # Dans un sc√©nario r√©el, ce pipeline serait appel√© par un script lanceur
    # qui g√®re argparse.
    
    # D√©terminer le chemin racine du projet pour trouver requirements.txt par d√©faut
    current_script_path = Path(__file__).resolve()
    project_root_dir = current_script_path.parent.parent.parent 
    default_req_path = project_root_dir / "requirements.txt"

    if not default_req_path.exists():
        print(f"ERREUR: Le fichier requirements.txt par d√©faut est introuvable √† {default_req_path}", file=sys.stderr)
        print("Veuillez sp√©cifier un chemin valide via les arguments du script lanceur.", file=sys.stderr)
        sys.exit(2)

    print(f"Lancement du pipeline de diagnostic en mode test depuis {__file__}...")
    exit_code = run_environment_diagnostic_pipeline(
        requirements_path=str(default_req_path),
        log_level="INFO"
    )
    print(f"Pipeline de diagnostic (test) termin√© avec le code de sortie: {exit_code}")
    sys.exit(exit_code)