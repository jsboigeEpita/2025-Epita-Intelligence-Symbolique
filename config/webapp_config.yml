# Configuration Centralisée - Orchestrateur d'Application Web Unifié
# =====================================================================
# 
# Configuration pour l'orchestrateur unifié remplaçant tous les scripts PowerShell
# redondants d'intégration web.
# 
# Auteur: Projet Intelligence Symbolique EPITA
# Date: 07/06/2025

# =============================================================================
# INFORMATIONS GÉNÉRALES
# =============================================================================
webapp:
  name: "Argumentation Analysis Web App"
  version: "1.0.0"
  environment: "development"
  description: "Application web d'analyse argumentative avec backend Flask et tests Playwright"

# =============================================================================
# CONFIGURATION BACKEND FLASK
# =============================================================================
backend:
  enabled: true
  
  # Module Python à démarrer
  module: "argumentation_analysis.services.web_api.app:app"
  
  # Gestion des ports avec failover automatique
  start_port: 5003
  fallback_ports: [5004, 5005, 5006]
  max_attempts: 5
  timeout_seconds: 30
  
  # Endpoints de surveillance
  health_endpoint: "/health"
  
  # Activation environnement conda
  env_activation: "powershell -File scripts/env/activate_project_env.ps1"
  
  # Options avancées
  auto_restart: false
  memory_limit_mb: 512

# =============================================================================
# CONFIGURATION FRONTEND REACT (OPTIONNEL)
# =============================================================================
frontend:
  enabled: true  # Activé pour les tests Playwright
  
  # Chemin et configuration
  path: "services/web_api/interface-web-argumentative"
  port: 3000
  start_command: "npm start"
  timeout_seconds: 90
  
  # Gestion dépendances
  auto_install_deps: true
  build_before_start: false
  
  # Variables d'environnement React
  env_vars:
    BROWSER: "none"
    GENERATE_SOURCEMAP: "false"
    SKIP_PREFLIGHT_CHECK: "true"

# =============================================================================
# CONFIGURATION PLAYWRIGHT TESTS
# =============================================================================
playwright:
  enabled: true
  
  # Configuration navigateur
  browser: "chromium"  # chromium, firefox, webkit
  headless: true
  timeout_ms: 10000
  slow_timeout_ms: 20000
  
  # Chemins des tests
  test_paths:
    - "tests/functional/"
  
  # Répertoires d'artefacts
  screenshots_dir: "logs/screenshots"
  traces_dir: "logs/traces"
  
  # Options de test
  options:
    video: "on"
    screenshot: "on"
    trace: "on"
    
  # Timeout global pour les tests
  test_timeout: 300  # 5 minutes

# =============================================================================
# CONFIGURATION LOGGING
# =============================================================================
logging:
  level: "INFO"  # DEBUG, INFO, WARNING, ERROR, CRITICAL
  file: "logs/webapp_orchestrator.log"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  
  # Rotation des logs
  max_bytes: 10485760  # 10MB
  backup_count: 5
  
  # Logs séparés par composant
  component_logs:
    backend: "logs/backend_manager.log"
    frontend: "logs/frontend_manager.log"
    playwright: "logs/playwright_runner.log"
    cleaner: "logs/process_cleaner.log"

# =============================================================================
# CONFIGURATION NETTOYAGE PROCESSUS
# =============================================================================
cleanup:
  auto_cleanup: true
  
  # Processus à surveiller et nettoyer
  kill_processes: ["python*", "node*", "npm*"]
  
  # Filtres de ligne de commande
  process_filters:
    - "app.py"
    - "web_api"
    - "serve"
    - "flask"
    - "react-scripts"
    - "webpack"
  
  # Ports à libérer
  monitored_ports: [5003, 5004, 5005, 5006, 3000]
  
  # Fichiers temporaires à nettoyer
  temp_files:
    - "backend_info.json"
    - "test_integration_detailed.py"
    - ".env.test"
    - "test_detailed_output.log"
    - "test_detailed_error.log"
    - "integration_test_final.png"
    - "*.pyc"
    - "__pycache__/"

# =============================================================================
# CONFIGURATION TESTS D'INTÉGRATION
# =============================================================================
integration:
  # Stratégie de test
  strategy: "full"  # full, backend_only, quick
  
  # Timeouts
  startup_timeout: 60
  test_timeout: 300
  shutdown_timeout: 30
  
  # Retry et robustesse
  max_retries: 3
  retry_delay: 5
  
  # Validation des services
  validation:
    backend_health_check: true
    frontend_accessibility: true
    cross_service_communication: true

# =============================================================================
# CONFIGURATION DÉVELOPPEMENT
# =============================================================================
development:
  # Mode debug
  debug_mode: false
  
  # Rechargement automatique
  auto_reload: false
  
  # Profiling
  enable_profiling: false
  
  # Monitoring en temps réel
  real_time_monitoring: false

# =============================================================================
# CONFIGURATION PRODUCTION (EXEMPLE)
# =============================================================================
production:
  # Override pour environnement production
  backend:
    start_port: 8000
    timeout_seconds: 60
    memory_limit_mb: 1024
  
  frontend:
    enabled: true
    build_before_start: true
  
  playwright:
    headless: true
    test_timeout: 600
  
  logging:
    level: "WARNING"
    file: "/var/log/webapp/orchestrator.log"

# =============================================================================
# CONFIGURATION URLS ET ENDPOINTS
# =============================================================================
urls:
  # URLs par défaut
  backend_base: "http://localhost"
  frontend_base: "http://localhost"
  
  # Endpoints critiques
  endpoints:
    health: "/api/health"
    analyze: "/api/analyze"
    status: "/api/status"
    metrics: "/api/metrics"

# =============================================================================
# CONFIGURATION SÉCURITÉ
# =============================================================================
security:
  # CORS pour développement
  cors_enabled: true
  cors_origins: ["http://localhost:3000", "http://localhost:5003"]
  
  # Authentification (placeholder)
  auth_enabled: false
  
  # Rate limiting
  rate_limiting: false

# =============================================================================
# MÉTADONNÉES ET DOCUMENTATION
# =============================================================================
metadata:
  # Remplacement de scripts
  replaces_scripts:
    - "scripts/integration_test_with_trace.ps1"
    - "scripts/integration_test_with_trace_robust.ps1"
    - "scripts/integration_test_with_trace_fixed.ps1"
    - "scripts/integration_test_trace_working.ps1"
    - "scripts/integration_test_trace_simple_success.ps1"
    - "scripts/sprint3_final_validation.py"
    - "test_backend_fixed.ps1"
    - "archives/powershell_legacy/run_integration_tests.ps1"
  
  # Tests fonctionnels intégrés
  functional_tests:
    - "tests/functional/test_argument_analyzer.py"
    - "tests/functional/test_argument_reconstructor.py"
    - "tests/functional/test_integration_workflows.py"
    - "tests/functional/test_fallacy_detector.py"
    - "tests/functional/test_validation_form.py"
    - "tests/functional/test_webapp_homepage.py"
    - "tests/functional/conftest.py"
  
  # Architecture cible
  architecture:
    cross_platform: true
    environments: ["Windows", "Linux", "macOS"]
    python_version: ">=3.8"
    dependencies: ["flask", "playwright", "psutil", "aiohttp", "pyyaml"]
  
  # Documentation
  documentation:
    readme: "docs/webapp_orchestrator.md"
    api_docs: "docs/api/webapp_orchestrator_api.md"
    examples: "examples/webapp_usage_examples.py"