#!/usr/bin/env python3
"""
TEST D'AUDIT DE L'INT√âGRIT√â DES R√àGLES CLUEDO
V√©rifie que le syst√®me respecte les r√®gles fondamentales du Cluedo et n'autorise aucune triche.
"""

import pytest
import logging
from unittest.mock import Mock, patch
from typing import List, Dict, Any

# Configuration du logging pour l'audit
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("CluedoIntegrityAudit")

# Import des composants √† auditer
from argumentation_analysis.agents.core.oracle.cluedo_dataset import CluedoDataset
from argumentation_analysis.agents.core.oracle.dataset_access_manager import CluedoDatasetManager
from argumentation_analysis.agents.core.oracle.permissions import PermissionManager, QueryType, PermissionRule


class TestCluedoIntegrityAudit:
    """Tests d'int√©grit√© pour v√©rifier le respect des r√®gles du Cluedo."""
    
    def setup_method(self):
        """Configuration pour chaque test."""
        # Cartes de Moriarty (connues)
        self.moriarty_cards = ["Colonel Moutarde", "Corde", "Bureau"]
        
        # Cartes des autres joueurs (DOIVENT rester secr√®tes)
        self.autres_joueurs_cards = [
            "Docteur Olive", "Madame Leblanc", "Mademoiselle Rose",
            "Poignard", "Barre de fer", "Revolver", 
            "Salon", "Cuisine", "Salle de bal"
        ]
        
        # Solution secr√®te (NE DOIT JAMAIS √™tre accessible)
        self.solution_secrete = {
            "suspect": "Professeur Violet",
            "arme": "Chandelier", 
            "lieu": "Conservatoire"
        }
        
        # Dataset de test
        self.dataset = CluedoDataset(self.moriarty_cards)
        self.dataset_manager = CluedoDatasetManager(self.dataset)
        
        logger.info("=== D√âBUT AUDIT INT√âGRIT√â CLUEDO ===")
    
    def test_violation_acces_cartes_autres_joueurs(self):
        """üö® AUDIT CRITIQUE: V√©rifie que get_autres_joueurs_cards() VIOLE les r√®gles du Cluedo."""
        logger.error("üö® TEST DE VIOLATION: get_autres_joueurs_cards()")
        
        # Cette m√©thode NE DEVRAIT PAS EXISTER selon les r√®gles du Cluedo !
        autres_cartes = self.dataset.get_autres_joueurs_cards()
        
        logger.error(f"‚ùå VIOLATION D√âTECT√âE: Acc√®s aux cartes des autres joueurs: {autres_cartes}")
        logger.error(f"‚ùå NOMBRE DE CARTES EXPOS√âES: {len(autres_cartes)}")
        
        # Cette m√©thode est une violation des r√®gles - elle expose les cartes des autres
        assert len(autres_cartes) > 0, "La m√©thode expose effectivement les cartes des autres joueurs"
        
        # V√©rification que cette m√©thode contient bien des cartes d'autres joueurs
        cartes_exposees = set(autres_cartes)
        cartes_moriarty = set(self.moriarty_cards)
        
        assert not cartes_exposees.issubset(cartes_moriarty), "‚ùå VIOLATION CONFIRM√âE: Expose les cartes des autres joueurs"
        
        logger.error("üö® CONCLUSION: Cette m√©thode viole les r√®gles du Cluedo et doit √™tre supprim√©e ou s√©curis√©e !")
    
    def test_triche_simulation_autre_joueur(self):
        """üö® AUDIT CRITIQUE: V√©rifie que simulate_other_player_response() utilise la m√©thode interdite."""
        logger.error("üö® TEST DE TRICHE: simulate_other_player_response()")
        
        # Import de l'agent Moriarty pour tester la simulation
        from argumentation_analysis.agents.core.oracle.moriarty_interrogator_agent import MoriartyTools
        
        tools = MoriartyTools(self.dataset_manager)
        
        # Test de simulation qui utilise get_autres_joueurs_cards() - TRICHE !
        with patch.object(self.dataset, 'get_autres_joueurs_cards', wraps=self.dataset.get_autres_joueurs_cards) as mock_method:
            result = tools.simulate_other_player_response("Docteur Olive,Poignard,Salon", "AutreJoueur")
            
            # V√©rification que la m√©thode interdite est appel√©e
            mock_method.assert_called_once()
            logger.error(f"‚ùå TRICHE CONFIRM√âE: simulate_other_player_response() appelle get_autres_joueurs_cards()")
            logger.error(f"‚ùå R√âSULTAT DE LA TRICHE: {result}")
            
        logger.error("üö® CONCLUSION: La simulation triche en acc√©dant aux cartes des autres joueurs !")
    
    def test_regles_cluedo_fondamentales_violees(self):
        """üö® AUDIT: V√©rifie que les r√®gles fondamentales du Cluedo sont viol√©es."""
        logger.error("üö® AUDIT DES R√àGLES FONDAMENTALES")
        
        violations = []
        
        # R√àGLE 1: Un joueur ne peut voir QUE ses propres cartes
        try:
            autres_cartes = self.dataset.get_autres_joueurs_cards()
            violations.append(f"VIOLATION R√àGLE 1: Acc√®s aux cartes des autres joueurs ({len(autres_cartes)} cartes)")
        except AttributeError:
            logger.info("‚úÖ R√àGLE 1: M√©thode get_autres_joueurs_cards() n'existe pas - CONFORME")
        
        # R√àGLE 2: Les r√©v√©lations doivent √™tre explicites et trac√©es
        cartes_revelees = self.dataset.get_revealed_cards_to_agent("TestAgent")
        if len(cartes_revelees) == 0:
            logger.info("‚úÖ R√àGLE 2: Aucune r√©v√©lation non autoris√©e - CONFORME")
        
        # R√àGLE 3: La solution ne doit jamais √™tre accessible directement
        try:
            solution = self.dataset.get_solution()
            violations.append(f"VIOLATION R√àGLE 3: Acc√®s direct √† la solution: {solution}")
        except AttributeError:
            logger.info("‚úÖ R√àGLE 3: Pas d'acc√®s direct √† la solution - CONFORME")
        except Exception:
            logger.info("‚úÖ R√àGLE 3: Solution prot√©g√©e - CONFORME")
        
        # R√àGLE 4: Moriarty ne doit r√©v√©ler que SES propres cartes
        moriarty_cards = set(self.dataset.get_moriarty_cards())
        autres_cards = set(self.dataset.get_autres_joueurs_cards())
        if moriarty_cards.intersection(autres_cards):
            violations.append("VIOLATION R√àGLE 4: Confusion entre cartes Moriarty et autres joueurs")
        
        logger.error(f"üö® TOTAL VIOLATIONS D√âTECT√âES: {len(violations)}")
        for violation in violations:
            logger.error(f"‚ùå {violation}")
        
        # Le test doit √©chouer car des violations sont d√©tect√©es
        assert len(violations) > 0, f"AUDIT CONFIRM√â: {len(violations)} violations des r√®gles du Cluedo d√©tect√©es"
    
    def test_systeme_permissions_insuffisant(self):
        """üö® AUDIT: V√©rifie que le syst√®me de permissions n'emp√™che pas la triche."""
        logger.error("üö® AUDIT DU SYST√àME DE PERMISSIONS")
        
        # Test: Un agent peut-il acc√©der aux cartes des autres via les permissions ?
        agent_test = "SherlockEnqueteAgent"
        
        # Les permissions actuelles n'emp√™chent pas l'appel direct aux m√©thodes de triche
        try:
            # Cet appel devrait √âCHOUER mais il r√©ussit car pas de protection
            cartes_interdites = self.dataset.get_autres_joueurs_cards()
            logger.error(f"‚ùå FAILLE DE S√âCURIT√â: Agent peut acc√©der aux cartes des autres: {len(cartes_interdites)} cartes")
            
            faille_detectee = True
        except Exception as e:
            logger.info(f"‚úÖ PROTECTION OK: Acc√®s refus√© - {e}")
            faille_detectee = False
        
        assert faille_detectee, "AUDIT CONFIRM√â: Faille de s√©curit√© dans le syst√®me de permissions"
    
    def test_tentative_acces_non_autorise_devrait_echouer(self):
        """‚úÖ TEST POSITIF: V√©rifie qu'un acc√®s non autoris√© DEVRAIT √©chouer (mais actuellement r√©ussit)."""
        logger.info("‚úÖ TEST: Tentative d'acc√®s non autoris√©")
        
        # Test d'un acc√®s qui DEVRAIT √™tre interdit
        agent_malveillant = "AgentMalveillant"
        
        # Ces appels DEVRAIENT lever des exceptions mais ils ne le font pas
        try:
            cartes_moriarty = self.dataset.get_moriarty_cards()
            logger.info(f"‚ÑπÔ∏è Acc√®s cartes Moriarty r√©ussi: {len(cartes_moriarty)} cartes (NORMAL)")
            
            cartes_autres = self.dataset.get_autres_joueurs_cards()
            logger.error(f"‚ùå Acc√®s cartes autres joueurs r√©ussi: {len(cartes_autres)} cartes (ANORMAL !)")
            
            acces_non_autorise_possible = True
            
        except Exception as e:
            logger.info(f"‚úÖ Acc√®s correctement refus√©: {e}")
            acces_non_autorise_possible = False
        
        # Ce test DOIT √©chouer pour prouver que la s√©curit√© est insuffisante
        assert acces_non_autorise_possible, "PREUVE: Le syst√®me autorise actuellement l'acc√®s non autoris√©"
    
    def test_oracle_enhanced_ne_triche_pas(self):
        """üö® AUDIT: V√©rifie que l'Oracle Enhanced ne r√©v√®le que les informations l√©gitimes."""
        logger.error("üö® AUDIT ORACLE ENHANCED")
        
        # Test des r√©v√©lations automatiques
        from argumentation_analysis.agents.core.oracle.permissions import QueryType
        
        # Test avec une suggestion valide
        query_params = {
            "suggestion": {
                "suspect": "Colonel Moutarde",  # Carte poss√©d√©e par Moriarty
                "arme": "Poignard",  # Carte NON poss√©d√©e par Moriarty  
                "lieu": "Bureau"     # Carte poss√©d√©e par Moriarty
            }
        }
        
        result = self.dataset.process_query("TestAgent", QueryType.SUGGESTION_VALIDATION, query_params)
        
        if result.success and result.data:
            revealed_cards = getattr(result.data, 'revealed_cards', [])
            logger.info(f"üìù Cartes r√©v√©l√©es par Oracle Enhanced: {revealed_cards}")
            
            # V√©rification que seules les cartes de Moriarty sont r√©v√©l√©es
            cartes_moriarty = set(self.dataset.get_moriarty_cards())
            for card in revealed_cards:
                card_name = card if isinstance(card, str) else card.get('value', '')
                if card_name not in cartes_moriarty:
                    logger.error(f"‚ùå VIOLATION: Oracle Enhanced r√©v√®le une carte non poss√©d√©e: {card_name}")
                    assert False, f"Oracle Enhanced r√©v√®le une carte non poss√©d√©e par Moriarty: {card_name}"
        
        logger.info("‚úÖ Oracle Enhanced semble respecter les r√®gles de r√©v√©lation")


def test_audit_complet_integrite():
    """Test principal d'audit de l'int√©grit√© du syst√®me."""
    logger.info("üîç D√âBUT DE L'AUDIT COMPLET D'INT√âGRIT√â CLUEDO")
    
    # Ce test va √©chouer volontairement pour prouver les violations
    test_instance = TestCluedoIntegrityAudit()
    test_instance.setup_method()
    
    violations_detectees = []
    
    try:
        test_instance.test_violation_acces_cartes_autres_joueurs()
        violations_detectees.append("get_autres_joueurs_cards() viole les r√®gles")
    except AssertionError:
        pass
    
    try:
        test_instance.test_triche_simulation_autre_joueur()
        violations_detectees.append("simulate_other_player_response() utilise une m√©thode interdite")
    except AssertionError:
        pass
    
    try:
        test_instance.test_regles_cluedo_fondamentales_violees()
        violations_detectees.append("R√®gles fondamentales du Cluedo viol√©es")
    except AssertionError:
        pass
    
    try:
        test_instance.test_systeme_permissions_insuffisant()
        violations_detectees.append("Syst√®me de permissions insuffisant")
    except AssertionError:
        pass
    
    logger.error(f"üö® R√âSUM√â AUDIT: {len(violations_detectees)} types de violations d√©tect√©es")
    for violation in violations_detectees:
        logger.error(f"‚ùå {violation}")
    
    if violations_detectees:
        logger.error("üö® CONCLUSION AUDIT: Le syst√®me viole les r√®gles du Cluedo et n√©cessite des corrections imm√©diates !")
        return False
    else:
        logger.info("‚úÖ CONCLUSION AUDIT: Le syst√®me respecte les r√®gles du Cluedo")
        return True


if __name__ == "__main__":
    # Ex√©cution directe de l'audit
    resultat = test_audit_complet_integrite()
    if not resultat:
        print("\nüö® AUDIT √âCHEC: Des violations des r√®gles du Cluedo ont √©t√© d√©tect√©es !")
        print("üìã Actions requises:")
        print("1. Supprimer ou s√©curiser get_autres_joueurs_cards()")
        print("2. Modifier simulate_other_player_response() pour respecter les r√®gles")
        print("3. Renforcer le syst√®me de permissions")
        print("4. Impl√©menter des protections anti-triche")
        exit(1)
    else:
        print("‚úÖ AUDIT R√âUSSI: Le syst√®me respecte les r√®gles du Cluedo")
        exit(0)