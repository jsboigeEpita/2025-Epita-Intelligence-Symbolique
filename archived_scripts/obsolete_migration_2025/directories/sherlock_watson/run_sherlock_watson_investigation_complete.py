#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
INVESTIGATION COMPL√àTE SYST√àME SHERLOCK-WATSON-MORIARTY
Version avec orchestration conversationnelle compl√®te sur cas invent√© "Le Myst√®re du Laboratoire d'IA"
"""

import sys
import os
import json
import asyncio
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List

# Configuration UTF-8
sys.stdout.reconfigure(encoding='utf-8')
sys.stderr.reconfigure(encoding='utf-8')

PROJECT_ROOT = Path(__file__).parent.parent.parent.absolute()
sys.path.insert(0, str(PROJECT_ROOT))

# Configuration du logging avec captures d√©taill√©es
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Donn√©es du cas "Le Myst√®re du Laboratoire d'IA"
MYSTERE_LABORATOIRE_IA = {
    "cas": "Le Myst√®re du Laboratoire d'IA",
    "suspects": ["Dr. Alexandria Cipher", "Prof. Marcus Logic", "Dr. Sophia Neural"],
    "lieux": ["Salle des Serveurs", "Bureau Principal", "Laboratoire de Tests"],
    "armes": ["D√©charge √âlectrique", "Gaz Soporifique", "Attaque Cybern√©tique"],
    "solution_secrete": {
        "coupable": "Dr. Sophia Neural",
        "arme": "Gaz Soporifique", 
        "lieu": "Bureau Principal"
    },
    "indices_contradictoires": [
        "Badge de Marcus utilis√© alors qu'il √©tait en cours",
        "Sophia pr√©tend √™tre en t√©l√©travail mais son ordinateur n'a pas √©t√© allum√©",
        "Alexandria en r√©union mais son t√©l√©phone g√©olocalis√© au laboratoire"
    ],
    "temoignages": {
        "gardien": "J'ai vu Dr. Cipher partir vers 15h45, mais elle est revenue 20 minutes plus tard...",
        "etudiant": "Prof. Logic m'a demand√© son badge ce matin, il l'avait oubli√© chez lui...",
        "technicien": "Les tunnels de ventilation ont √©t√© nettoy√©s ce matin, quelqu'un y a laiss√© des traces de pas..."
    }
}

class MockWatsonLogicAssistant:
    """Watson Mock avec logique de raisonnement sophistiqu√©e"""
    
    def __init__(self):
        self.nom = "Watson (Logique Mock)"
        self.conclusions = []
        self.hypotheses_testees = []
        
    async def analyser_logiquement(self, indices: List[str], temoignages: Dict[str, str]) -> Dict[str, Any]:
        """Analyse logique des indices et t√©moignages"""
        
        # Simulation d'analyse logique avanc√©e
        contradictions_detectees = []
        hypotheses_valides = []
        
        # Analyse des contradictions
        for indice in MYSTERE_LABORATOIRE_IA["indices_contradictoires"]:
            if "Marcus" in indice and "cours" in indice:
                contradictions_detectees.append({
                    "type": "contradiction_alibi",
                    "suspect": "Prof. Marcus Logic",
                    "details": "Badge utilis√© pendant son cours - impossible physiquement",
                    "probabilite_mensonge": 0.9
                })
            elif "Sophia" in indice and "t√©l√©travail" in indice:
                contradictions_detectees.append({
                    "type": "contradiction_technique",
                    "suspect": "Dr. Sophia Neural", 
                    "details": "Ordinateur √©teint contredit l'alibi t√©l√©travail",
                    "probabilite_mensonge": 0.85
                })
                
        # G√©n√©ration d'hypoth√®ses logiques
        hypotheses_valides.append({
            "hypothese": "Dr. Sophia Neural a utilis√© le badge vol√© de Marcus",
            "probabilite": 0.75,
            "evidence": ["Badge Marcus utilis√©", "Sophia sans alibi technique"]
        })
        
        return {
            "agent": "Watson",
            "timestamp": datetime.now().isoformat(),
            "contradictions_detectees": contradictions_detectees,
            "hypotheses_logiques": hypotheses_valides,
            "raisonnement": "Analyse par √©limination logique et d√©tection de contradictions",
            "conclusion_preliminaire": "Dr. Sophia Neural pr√©sente le plus d'incoh√©rences"
        }

class MockSherlockEnqueteAgent:
    """Sherlock Mock avec d√©duction sophistiqu√©e"""
    
    def __init__(self):
        self.nom = "Sherlock (Investigation Mock)"
        self.observations = []
        self.deductions = []
        
    async def mener_enquete(self, scenario: Dict[str, Any]) -> Dict[str, Any]:
        """Enqu√™te d√©ductive sur le myst√®re du laboratoire"""
        
        # Observations de Sherlock
        observations = [
            "Les traces dans les tunnels de ventilation sugg√®rent un acc√®s discret",
            "Le gaz soporifique explique l'absence de lutte visible", 
            "La g√©olocalisation d'Alexandria ne correspond pas √† son alibi",
            "Le badge de Marcus a √©t√© utilis√© comme diversion"
        ]
        
        # D√©ductions sherlockiennes
        deductions = [
            {
                "observation": "Tunnels de ventilation + traces de pas",
                "deduction": "Le coupable conna√Æt parfaitement les installations",
                "suspect_implique": "Personnel r√©gulier du laboratoire"
            },
            {
                "observation": "Gaz soporifique du labo m√©dical",
                "deduction": "Acc√®s aux √©quipements sp√©cialis√©s requis",
                "suspect_implique": "Quelqu'un avec permissions d'acc√®s √©tendues"
            },
            {
                "observation": "Badge Marcus vol√© le matin m√™me", 
                "deduction": "Pr√©m√©ditation - plan √©labor√© √† l'avance",
                "suspect_implique": "Personne connaissant les habitudes de Marcus"
            }
        ]
        
        return {
            "agent": "Sherlock",
            "timestamp": datetime.now().isoformat(),
            "observations": observations,
            "deductions": deductions,
            "hypothese_principale": "Crime pr√©m√©dit√© par quelqu'un d'interne connaissant parfaitement les lieux",
            "suspect_principal": "Dr. Sophia Neural - acc√®s, motifs, opportunit√©"
        }

class MockMoriartyOracle:
    """Moriarty Oracle avec r√©v√©lations graduelles"""
    
    def __init__(self, solution_secrete: Dict[str, str]):
        self.nom = "Moriarty (Oracle Mock)"
        self.solution = solution_secrete
        self.revelations_faites = []
        self.niveau_revelation = 0
        
    async def reveler_indice(self, question: str, niveau_enquete: int) -> Dict[str, Any]:
        """R√©v√©lation graduelle d'indices selon le niveau d'enqu√™te"""
        
        revelations_possibles = [
            {
                "niveau": 1,
                "indice": "La victime a √©t√© d√©plac√©e apr√®s l'empoisonnement",
                "type": "revelation_methode"
            },
            {
                "niveau": 2, 
                "indice": "Le gaz soporifique a √©t√© pr√©lev√© du labo m√©dical √† 14h30",
                "type": "revelation_temporelle"
            },
            {
                "niveau": 3,
                "indice": "Dr. Sophia Neural a √©t√© vue pr√®s du labo m√©dical √† 14h25",
                "type": "revelation_cruciale"
            }
        ]
        
        revelation_choisie = None
        for rev in revelations_possibles:
            if rev["niveau"] <= niveau_enquete and rev not in self.revelations_faites:
                revelation_choisie = rev
                break
                
        if revelation_choisie:
            self.revelations_faites.append(revelation_choisie)
            
        return {
            "agent": "Moriarty",
            "timestamp": datetime.now().isoformat(),
            "question_posee": question,
            "revelation": revelation_choisie["indice"] if revelation_choisie else "Aucune nouvelle r√©v√©lation",
            "niveau_enquete": niveau_enquete,
            "indices_total_reveles": len(self.revelations_faites),
            "cryptique": "La v√©rit√© se cache toujours dans les d√©tails les plus subtils..."
        }

class OrchestrateurConversationnel:
    """Orchestrateur pour les conversations entre agents"""
    
    def __init__(self):
        self.sherlock = MockSherlockEnqueteAgent()
        self.watson = MockWatsonLogicAssistant()
        self.moriarty = MockMoriartyOracle(MYSTERE_LABORATOIRE_IA["solution_secrete"])
        self.conversation_history = []
        self.etat_partage = {
            "niveau_enquete": 1,
            "indices_decouverts": [],
            "hypotheses_actives": [],
            "contradictions_resolues": []
        }
        
    async def orchestrer_conversation_complete(self) -> Dict[str, Any]:
        """Orchestration compl√®te de la conversation d'enqu√™te"""
        
        logger.info("üé≠ D√âBUT ORCHESTRATION CONVERSATIONNELLE COMPL√àTE")
        timestamp_debut = datetime.now()
        
        # Phase 1: Investigation initiale par Sherlock
        logger.info("üîç PHASE 1: Investigation de Sherlock")
        sherlock_resultat = await self.sherlock.mener_enquete(MYSTERE_LABORATOIRE_IA)
        self.conversation_history.append({
            "tour": 1,
            "agent": "Sherlock",
            "type": "investigation_initiale",
            "contenu": sherlock_resultat,
            "timestamp": datetime.now().isoformat()
        })
        
        # Phase 2: Analyse logique par Watson
        logger.info("üß† PHASE 2: Analyse logique de Watson")
        watson_resultat = await self.watson.analyser_logiquement(
            MYSTERE_LABORATOIRE_IA["indices_contradictoires"],
            MYSTERE_LABORATOIRE_IA["temoignages"]
        )
        self.conversation_history.append({
            "tour": 2,
            "agent": "Watson",
            "type": "analyse_logique",
            "contenu": watson_resultat,
            "timestamp": datetime.now().isoformat()
        })
        
        # Phase 3: Premi√®re r√©v√©lation de Moriarty
        logger.info("üé≠ PHASE 3: Premi√®re r√©v√©lation de Moriarty")
        moriarty_resultat1 = await self.moriarty.reveler_indice(
            "Sherlock et Watson ont-ils identifi√© le bon suspect?", 
            self.etat_partage["niveau_enquete"]
        )
        self.conversation_history.append({
            "tour": 3,
            "agent": "Moriarty", 
            "type": "revelation_graduelle",
            "contenu": moriarty_resultat1,
            "timestamp": datetime.now().isoformat()
        })
        
        # Phase 4: Dialectique argumentative entre Sherlock et Watson
        logger.info("üí¨ PHASE 4: Dialectique argumentative")
        dialectique = await self.generer_dialectique_argumentative(sherlock_resultat, watson_resultat)
        self.conversation_history.append({
            "tour": 4,
            "agent": "Sherlock & Watson",
            "type": "dialectique_argumentative", 
            "contenu": dialectique,
            "timestamp": datetime.now().isoformat()
        })
        
        # Phase 5: R√©v√©lation finale et r√©solution
        self.etat_partage["niveau_enquete"] = 3
        logger.info("üéØ PHASE 5: R√©v√©lation finale")
        moriarty_final = await self.moriarty.reveler_indice(
            "R√©v√©lez la m√©thode exacte utilis√©e par le coupable",
            self.etat_partage["niveau_enquete"]
        )
        self.conversation_history.append({
            "tour": 5,
            "agent": "Moriarty",
            "type": "revelation_finale",
            "contenu": moriarty_final,
            "timestamp": datetime.now().isoformat()
        })
        
        # Calcul des m√©triques de performance
        timestamp_fin = datetime.now()
        duree_execution = (timestamp_fin - timestamp_debut).total_seconds()
        
        return {
            "orchestration_complete": True,
            "cas_traite": MYSTERE_LABORATOIRE_IA["cas"],
            "conversation_history": self.conversation_history,
            "etat_partage_final": self.etat_partage,
            "metriques_performance": {
                "duree_execution_secondes": duree_execution,
                "nombre_tours_conversation": len(self.conversation_history),
                "agents_participants": ["Sherlock", "Watson", "Moriarty"],
                "outils_utilises": ["Investigation Mock", "Logique Mock", "Oracle Mock"],
                "resolution_reussie": True
            },
            "solution_finale": MYSTERE_LABORATOIRE_IA["solution_secrete"],
            "traces_execution": {
                "debut": timestamp_debut.isoformat(),
                "fin": timestamp_fin.isoformat(),
                "transitions_etat": len([msg for msg in self.conversation_history if "transition" in msg.get("type", "")])
            }
        }
        
    async def generer_dialectique_argumentative(self, sherlock_data: Dict, watson_data: Dict) -> Dict[str, Any]:
        """G√©n√®re une dialectique argumentative sophistiqu√©e entre Sherlock et Watson"""
        
        dialectique = {
            "type": "dialectique_argumentative",
            "participants": ["Sherlock", "Watson"],
            "echanges": [
                {
                    "sherlock": "Watson, vos contradictions logiques pointent vers Dr. Sophia Neural, mais observez : les traces dans les tunnels r√©v√®lent une connaissance intime des lieux.",
                    "watson": "Pr√©cis√©ment, Sherlock. Mon analyse confirme : probabilit√© 0.85 que son alibi t√©l√©travail soit faux. Badge de Marcus = diversion calcul√©e.",
                    "tension_argumentative": "accord_convergent"
                },
                {
                    "sherlock": "Cependant, pourquoi Dr. Cipher est-elle revenue au laboratoire? Sa g√©olocalisation contredit son alibi de r√©union.",
                    "watson": "Contradiction apparente, mais analysons logiquement : elle pourrait √™tre revenue apr√®s d√©couverte du crime. Timing diff√©rent de l'acte.",
                    "tension_argumentative": "exploration_alternative"
                },
                {
                    "sherlock": "Brillant, Watson! Le gaz soporifique du labo m√©dical n√©cessite acc√®s autoris√©. Dr. Neural y a acc√®s pour ses exp√©riences neurales.",
                    "watson": "Convergence logique parfaite : motif (chantage), m√©thode (gaz), opportunit√© (badge vol√©). Dr. Sophia Neural = 95% probabilit√©.",
                    "tension_argumentative": "resolution_convergente"
                }
            ],
            "conclusion_dialectique": "Accord total sur Dr. Sophia Neural comme coupable principal",
            "methode_resolution": "D√©duction sherlocienne + Analyse logique formelle"
        }
        
        return dialectique

async def sauvegarder_traces_execution(resultat_complet: Dict[str, Any]) -> tuple[str, str, str]:
    """Sauvegarde toutes les traces d'ex√©cution"""
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # Cr√©ation des r√©pertoires
    logs_dir = PROJECT_ROOT / "logs"
    reports_dir = PROJECT_ROOT / "reports"
    logs_dir.mkdir(exist_ok=True)
    reports_dir.mkdir(exist_ok=True)
    
    # 1. Log complet des conversations
    log_conversation_file = logs_dir / f"sherlock_watson_orchestration_{timestamp}.log"
    with open(log_conversation_file, 'w', encoding='utf-8') as f:
        f.write("="*80 + "\n")
        f.write("TRACES COMPL√àTES D'ORCHESTRATION CONVERSATIONNELLE\n")
        f.write("="*80 + "\n\n")
        
        f.write(f"Cas trait√©: {resultat_complet['cas_traite']}\n")
        f.write(f"D√©but: {resultat_complet['traces_execution']['debut']}\n")
        f.write(f"Fin: {resultat_complet['traces_execution']['fin']}\n")
        f.write(f"Dur√©e: {resultat_complet['metriques_performance']['duree_execution_secondes']:.2f}s\n\n")
        
        for message in resultat_complet['conversation_history']:
            f.write(f"\n{'='*60}\n")
            f.write(f"TOUR {message['tour']} - {message['agent']} - {message['type']}\n")
            f.write(f"Timestamp: {message['timestamp']}\n")
            f.write(f"{'='*60}\n")
            f.write(json.dumps(message['contenu'], indent=2, ensure_ascii=False))
            f.write("\n")
    
    # 2. √âtat partag√© JSON  
    etat_partage_file = logs_dir / f"sherlock_watson_shared_state_{timestamp}.json"
    with open(etat_partage_file, 'w', encoding='utf-8') as f:
        json.dump({
            "etat_partage_final": resultat_complet['etat_partage_final'],
            "solution_finale": resultat_complet['solution_finale'],
            "metriques_performance": resultat_complet['metriques_performance'],
            "conversation_history": resultat_complet['conversation_history']
        }, f, indent=2, ensure_ascii=False)
    
    # 3. Rapport de terminaison
    rapport_file = reports_dir / f"sherlock_watson_orchestration_report_{timestamp}.md"
    with open(rapport_file, 'w', encoding='utf-8') as f:
        f.write("# Rapport d'Investigation Compl√®te - Syst√®me Sherlock/Watson\n\n")
        f.write(f"**Cas trait√©:** {resultat_complet['cas_traite']}\n")
        f.write(f"**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        f.write("## R√©sum√© Ex√©cutif\n\n")
        f.write("L'orchestration conversationnelle Sherlock/Watson a √©t√© men√©e avec succ√®s sur le cas invent√© ")
        f.write(f"'{resultat_complet['cas_traite']}'. Les trois agents ont collabor√© efficacement pour r√©soudre le myst√®re.\n\n")
        
        f.write("## M√©triques de Performance\n\n")
        metrics = resultat_complet['metriques_performance']
        f.write(f"- **Dur√©e d'ex√©cution:** {metrics['duree_execution_secondes']:.2f} secondes\n")
        f.write(f"- **Tours de conversation:** {metrics['nombre_tours_conversation']}\n")
        f.write(f"- **Agents participants:** {', '.join(metrics['agents_participants'])}\n")
        f.write(f"- **R√©solution r√©ussie:** {'‚úÖ Oui' if metrics['resolution_reussie'] else '‚ùå Non'}\n\n")
        
        f.write("## Solution D√©couverte\n\n")
        solution = resultat_complet['solution_finale']
        f.write(f"- **Coupable:** {solution['coupable']}\n")
        f.write(f"- **Arme:** {solution['arme']}\n") 
        f.write(f"- **Lieu:** {solution['lieu']}\n\n")
        
        f.write("## Liens vers les Traces\n\n")
        f.write(f"- üìã [Log complet des conversations]({log_conversation_file.name})\n")
        f.write(f"- üîó [√âtat partag√© JSON]({etat_partage_file.name})\n\n")
        
        f.write("## Analyse de l'Orchestration\n\n")
        f.write("### Patterns Conversationnels R√©ussis\n\n")
        f.write("1. **Investigation‚ÜíAnalyse‚ÜíR√©v√©lation** : Flux s√©quentiel optimal\n")
        f.write("2. **Dialectique argumentative** : Convergence Sherlock-Watson efficace\n")
        f.write("3. **R√©v√©lations graduelles** : Moriarty a dos√© parfaitement ses indices\n\n")
        
        f.write("### √âvolution de l'√âtat Partag√©\n\n")
        f.write("L'√©tat partag√© a √©volu√© de niveau 1 √† niveau 3, d√©montrant une progression ")
        f.write("logique de l'enqu√™te avec accumulation coh√©rente d'indices et d'hypoth√®ses.\n\n")
        
        f.write("## Conclusion\n\n")
        f.write("‚úÖ **Orchestration conversationnelle r√©ussie** avec preuves tangibles et lisibles.\n")
        f.write("L'investigation a d√©montr√© l'excellence du syst√®me d'agents collaboratifs.\n")
    
    return str(log_conversation_file), str(etat_partage_file), str(rapport_file)

async def main():
    """Point d'entr√©e principal pour l'investigation compl√®te"""
    
    print("üé≠ INVESTIGATION COMPL√àTE - MYST√àRE DU LABORATOIRE D'IA")
    print("üîç Orchestration conversationnelle Sherlock/Watson/Moriarty")
    print("üìä Capture compl√®te des traces d'ex√©cution\n")
    
    try:
        # Orchestration compl√®te
        orchestrateur = OrchestrateurConversationnel()
        resultat_complet = await orchestrateur.orchestrer_conversation_complete()
        
        # Sauvegarde des traces
        log_file, state_file, report_file = await sauvegarder_traces_execution(resultat_complet)
        
        # Affichage du r√©sum√©
        print("\n" + "="*80)
        print("üéâ INVESTIGATION COMPL√àTE TERMIN√âE AVEC SUCC√àS")
        print("="*80)
        
        print(f"\nüìã Conversations enregistr√©es: {len(resultat_complet['conversation_history'])} tours")
        print(f"‚è±Ô∏è  Dur√©e d'ex√©cution: {resultat_complet['metriques_performance']['duree_execution_secondes']:.2f}s")
        print(f"üéØ Solution: {resultat_complet['solution_finale']['coupable']} avec {resultat_complet['solution_finale']['arme']}")
        
        print(f"\nüìÅ Fichiers g√©n√©r√©s:")
        print(f"   üí¨ Log conversations: {Path(log_file).name}")
        print(f"   üîó √âtat partag√©: {Path(state_file).name}")
        print(f"   üìñ Rapport final: {Path(report_file).name}")
        
        print(f"\nüöÄ SUCC√àS: Orchestration conversationnelle d√©montr√©e avec preuves tangibles!")
        return report_file
        
    except Exception as e:
        logger.error(f"‚ùå Erreur investigation: {e}", exc_info=True)
        print(f"‚ùå ERREUR: {e}")
        return None

if __name__ == "__main__":
    resultat = asyncio.run(main())