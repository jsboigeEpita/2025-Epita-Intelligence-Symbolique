#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Script de d√©marrage pour l'API Web d'analyse argumentative.

Ce script facilite le lancement de l'API avec diff√©rentes configurations
et fournit des informations utiles pour les √©tudiants.
"""

import os
import sys
import argparse
import logging
from pathlib import Path

# Ajouter le r√©pertoire racine au chemin Python
current_dir = Path(__file__).parent
root_dir = current_dir.parent.parent
if str(root_dir) not in sys.path:
    sys.path.append(str(root_dir))

def setup_logging(debug: bool = False) -> None:
    """Configure le syst√®me de logging de base pour le script.

    :param debug: Si True, configure le niveau de logging √† DEBUG.
                  Sinon, configure √† INFO.
    :type debug: bool
    :return: None
    :rtype: None
    """
    level = logging.DEBUG if debug else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s [%(levelname)s] [%(name)s] %(message)s',
        datefmt='%H:%M:%S'
    )

def check_dependencies():
    """V√©rifie si les d√©pendances Python requises pour l'API sont install√©es.

    Tente d'importer 'flask', 'flask_cors', et 'pydantic'.
    Affiche un message d'erreur et des instructions si des paquets sont manquants.

    :return: True si toutes les d√©pendances sont pr√©sentes, False sinon.
    :rtype: bool
    """
    required_packages = ['flask', 'flask_cors', 'pydantic']
    missing = []
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing.append(package)
    
    if missing:
        print(f"‚ùå D√©pendances manquantes: {', '.join(missing)}")
        print("üì¶ Installez-les avec: pip install -r requirements.txt")
        return False
    
    print("‚úÖ Toutes les d√©pendances sont install√©es")
    return True

def check_port(port: int):
    """V√©rifie si un port TCP donn√© est disponible sur localhost.

    Tente de se lier au port sp√©cifi√©. Si cela r√©ussit, le port est consid√©r√©
    comme disponible.

    :param port: Le num√©ro de port √† v√©rifier.
    :type port: int
    :return: True si le port est disponible, False sinon.
    :rtype: bool
    """
    import socket
    
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('localhost', port))
        return True
    except OSError:
        return False

def print_startup_info(port: int, debug: bool):
    """Affiche les informations de d√©marrage de l'API dans la console.

    Inclut l'URL locale, le mode debug, et des liens utiles.

    :param port: Le port sur lequel l'API est configur√©e pour d√©marrer.
    :type port: int
    :param debug: Bool√©en indiquant si le mode debug est activ√©.
    :type debug: bool
    :return: None
    :rtype: None
    """
    print("\n" + "="*60)
    print("üöÄ API Web d'Analyse Argumentative")
    print("="*60)
    print(f"üìç URL locale: http://localhost:{port}")
    print(f"üîß Mode debug: {'Activ√©' if debug else 'D√©sactiv√©'}")
    print(f"üìö Documentation: http://localhost:{port}/api/endpoints")
    print(f"‚ù§Ô∏è  Health check: http://localhost:{port}/api/health")
    print("\nüìã Endpoints disponibles:")
    print("   ‚Ä¢ POST /api/analyze     - Analyse compl√®te de texte")
    print("   ‚Ä¢ POST /api/validate    - Validation d'argument")
    print("   ‚Ä¢ POST /api/fallacies   - D√©tection de sophismes")
    print("   ‚Ä¢ POST /api/framework   - Framework de Dung")
    print("   ‚Ä¢ GET  /api/health      - √âtat de l'API")
    print("   ‚Ä¢ GET  /api/endpoints   - Liste des endpoints")
    print("\nüí° Conseils:")
    print("   ‚Ä¢ Utilisez Postman ou curl pour tester l'API")
    print("   ‚Ä¢ Consultez le README.md pour des exemples")
    print("   ‚Ä¢ Activez CORS pour les appels depuis React")
    print("="*60)

def main():
    """Fonction principale."""
    parser = argparse.ArgumentParser(
        description="D√©marre l'API Web d'analyse argumentative",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  python start_api.py                    # D√©marrage standard (port 5000)
  python start_api.py --port 8080        # Port personnalis√©
  python start_api.py --debug             # Mode debug activ√©
  python start_api.py --host 0.0.0.0     # Accessible depuis l'ext√©rieur
        """
    )
    
    parser.add_argument(
        '--port', '-p',
        type=int,
        default=5000,
        help='Port du serveur (d√©faut: 5000)'
    )
    
    parser.add_argument(
        '--host',
        default='127.0.0.1',
        help='Adresse d\'√©coute (d√©faut: 127.0.0.1)'
    )
    
    parser.add_argument(
        '--debug', '-d',
        action='store_true',
        help='Active le mode debug'
    )
    
    parser.add_argument(
        '--no-check',
        action='store_true',
        help='Ignore les v√©rifications de d√©pendances'
    )
    
    parser.add_argument(
        '--quiet', '-q',
        action='store_true',
        help='Mode silencieux (moins de logs)'
    )
    
    args = parser.parse_args()
    
    # Configuration du logging
    setup_logging(args.debug and not args.quiet)
    logger = logging.getLogger("StartAPI")
    
    # V√©rifications pr√©liminaires
    if not args.no_check:
        print("üîç V√©rification des d√©pendances...")
        if not check_dependencies():
            sys.exit(1)
    
    # V√©rification du port
    if not check_port(args.port):
        print(f"‚ùå Le port {args.port} est d√©j√† utilis√©")
        print("üí° Essayez un autre port avec --port <num√©ro>")
        sys.exit(1)
    
    # Configuration des variables d'environnement
    os.environ['PORT'] = str(args.port)
    os.environ['DEBUG'] = str(args.debug)
    
    # Affichage des informations
    if not args.quiet:
        print_startup_info(args.port, args.debug)
    
    try:
        # Import et d√©marrage de l'application
        from services.web_api.app import app
        
        logger.info(f"D√©marrage de l'API sur {args.host}:{args.port}")
        
        # D√©marrage du serveur
        app.run(
            host=args.host,
            port=args.port,
            debug=args.debug,
            use_reloader=args.debug,
            threaded=True
        )
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print("üí° V√©rifiez que tous les modules sont correctement install√©s")
        sys.exit(1)
        
    except KeyboardInterrupt:
        print("\nüëã Arr√™t de l'API demand√© par l'utilisateur")
        
    except Exception as e:
        logger.error(f"Erreur lors du d√©marrage: {e}")
        print(f"‚ùå Erreur inattendue: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()