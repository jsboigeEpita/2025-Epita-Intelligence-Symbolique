{
  "timestamp": "2025-05-28T01:48:28.554391",
  "summary": {
    "total_tests": 189,
    "passed": 176,
    "failed": 10,
    "errors": 3,
    "success_rate": 93.1,
    "remaining_problems": 13
  },
  "problems_by_category": {
    "FUNCTION_SIGNATURE": {
      "count": 3,
      "description": "Erreurs de signature de fonction",
      "files": [
        "test_load_extract_definitions.py"
      ],
      "details": [
        "test_save_definitions_encrypted - Paramètre manquant",
        "test_save_definitions_unencrypted - Paramètre manquant",
        "test_load_definitions - Paramètre definitions_path incorrect"
      ]
    },
    "MOCK_CONFIGURATION": {
      "count": 7,
      "description": "Problèmes de configuration des mocks",
      "files": [
        "test_extract_agent_adapter.py"
      ],
      "details": [
        "Mock ExtractAgent - Paramètres manquants dans __init__",
        "Mock ValidationAgent - Configuration incomplète",
        "Mock ExtractPlugin - Attributs manquants",
        "Import Mock - from unittest.mock import Mock manquant",
        "Mock state - Attributs task_dependencies manquants",
        "Mock return values - Valeurs de retour incorrectes",
        "Mock method calls - Appels de méthodes non configurés"
      ]
    },
    "TACTICAL_MONITORING": {
      "count": 3,
      "description": "Erreurs dans le monitoring tactique",
      "files": [
        "test_tactical_monitor.py",
        "test_tactical_monitor_advanced.py"
      ],
      "details": [
        "test_detect_critical_issues - Attribut Mock manquant",
        "test_evaluate_overall_coherence - Clé recommendations manquante",
        "test_monitor_task_progress - Logique de dépendances incorrecte"
      ]
    }
  },
  "file_analysis": [
    {
      "file": "tests/test_extract_agent_adapter.py",
      "problems": []
    },
    {
      "file": "tests/test_load_extract_definitions.py",
      "problems": [
        {
          "type": "PYDANTIC_COMPATIBILITY",
          "description": "Méthode model_validate manquante",
          "line_context": "Ajouter @classmethod model_validate"
        }
      ]
    },
    {
      "file": "tests/test_tactical_monitor.py",
      "problems": [
        {
          "type": "IMPORT_ERROR",
          "description": "Import Mock manquant",
          "line_context": "from unittest.mock import Mock"
        },
        {
          "type": "MOCK_ATTRIBUTE",
          "description": "Attribut task_dependencies manquant dans mock",
          "line_context": "self.state.task_dependencies = {}"
        }
      ]
    },
    {
      "file": "tests/test_tactical_monitor_advanced.py",
      "problems": [
        {
          "type": "IMPORT_ERROR",
          "description": "Import Mock manquant",
          "line_context": "from unittest.mock import Mock"
        },
        {
          "type": "MOCK_ATTRIBUTE",
          "description": "Attribut task_dependencies manquant dans mock",
          "line_context": "self.state.task_dependencies = {}"
        }
      ]
    }
  ],
  "recommendations": {
    "PRIORITÉ_HAUTE": [
      {
        "problème": "Import Mock manquant",
        "fichier": "test_extract_agent_adapter.py",
        "correction": "Ajouter: from unittest.mock import Mock, MagicMock",
        "impact": "Résout 1 erreur critique"
      },
      {
        "problème": "Paramètre definitions_path incorrect",
        "fichier": "test_load_extract_definitions.py",
        "correction": "Remplacer definitions_path= par file_path=",
        "impact": "Résout 2 erreurs de signature"
      },
      {
        "problème": "Attributs Mock task_dependencies manquants",
        "fichier": "test_tactical_monitor.py",
        "correction": "Ajouter: self.state.task_dependencies = {}",
        "impact": "Résout 1 erreur Mock"
      }
    ],
    "PRIORITÉ_MOYENNE": [
      {
        "problème": "Configuration Mock ExtractAgent incomplète",
        "fichier": "test_extract_agent_adapter.py",
        "correction": "Configurer tous les paramètres __init__ requis",
        "impact": "Résout 3-4 échecs de tests"
      },
      {
        "problème": "Clé recommendations manquante",
        "fichier": "test_tactical_monitor_advanced.py",
        "correction": "Ajouter overall_coherence[\"recommendations\"] = []",
        "impact": "Résout 1 échec de test"
      }
    ],
    "PRIORITÉ_BASSE": [
      {
        "problème": "Optimisation des mocks",
        "fichier": "Tous les fichiers de test",
        "correction": "Améliorer la robustesse des configurations Mock",
        "impact": "Améliore la stabilité générale"
      }
    ]
  },
  "next_steps": [
    "Appliquer les corrections de priorité haute",
    "Tester les corrections individuellement",
    "Valider l'amélioration du taux de réussite",
    "Appliquer les corrections de priorité moyenne",
    "Viser 100% de réussite des tests"
  ]
}