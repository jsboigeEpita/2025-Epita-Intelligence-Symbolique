#!/usr/bin/env pwsh
<#
.SYNOPSIS
Script de lancement de l'application web d'analyse argumentative

.DESCRIPTION
Ce script lance automatiquement le serveur backend Flask et l'interface frontend React
pour l'application d'analyse argumentative.

.PARAMETER BackendOnly
Lance uniquement le serveur backend

.PARAMETER FrontendOnly  
Lance uniquement l'interface frontend

.PARAMETER Help
Affiche l'aide

.EXAMPLE
.\start_web_application.ps1
Lance backend et frontend

.EXAMPLE
.\start_web_application.ps1 -BackendOnly
Lance uniquement le backend

.NOTES
Auteur: √âquipe Argumentation Analysis
Version: 1.0
Date: 2025-06-06
#>

param(
    [switch]$BackendOnly,
    [switch]$FrontendOnly,
    [switch]$Help
)

if ($Help) {
    Get-Help $MyInvocation.MyCommand.Path -Full
    exit 0
}

# Configuration UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
$OutputEncoding = [System.Text.Encoding]::UTF8

Write-Host "üöÄ Lancement de l'Application Web d'Analyse Argumentative" -ForegroundColor Green
Write-Host "=" * 60

# Chargement de l'environnement
Write-Host "üìã Chargement de l'environnement..." -ForegroundColor Blue
& .\scripts\env\activate_project_env.ps1

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erreur lors du chargement de l'environnement" -ForegroundColor Red
    exit 1
}

# Fonction pour lancer le backend
function Start-Backend {
    Write-Host "üîß D√©marrage du serveur backend Flask..." -ForegroundColor Blue
    
    # V√©rifier que le backend existe
    if (-not (Test-Path "argumentation_analysis/services/web_api/app.py")) {
        Write-Host "‚ùå Fichier backend non trouv√©: argumentation_analysis/services/web_api/app.py" -ForegroundColor Red
        return $false
    }
    
    # Lancer le backend en arri√®re-plan
    $backendJob = Start-Job -ScriptBlock {
        param($projectPath)
        Set-Location $projectPath
        & .\scripts\env\activate_project_env.ps1 -CommandToRun "python -m argumentation_analysis.services.web_api.app"
    } -ArgumentList (Get-Location).Path -Name "Backend"
    
    Write-Host "üì° Backend Flask d√©marr√© (Job ID: $($backendJob.Id))" -ForegroundColor Green
    Write-Host "üåê URL Backend: http://localhost:5003" -ForegroundColor Cyan
    
    return $backendJob
}

# Fonction pour lancer le frontend
function Start-Frontend {
    Write-Host "‚öõÔ∏è D√©marrage de l'interface React..." -ForegroundColor Blue
    
    # V√©rifier que le frontend existe
    $frontendPath = "services/web_api/interface-web-argumentative"
    if (-not (Test-Path "$frontendPath/package.json")) {
        Write-Host "‚ùå Interface frontend non trouv√©e: $frontendPath" -ForegroundColor Red
        return $false
    }
    
    # Installer les d√©pendances si n√©cessaire
    Push-Location $frontendPath
    if (-not (Test-Path "node_modules")) {
        Write-Host "üì¶ Installation des d√©pendances npm..." -ForegroundColor Yellow
        npm install
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Erreur lors de l'installation npm" -ForegroundColor Red
            Pop-Location
            return $false
        }
    }
    
    # Lancer le frontend en arri√®re-plan
    $frontendJob = Start-Job -ScriptBlock {
        param($frontendPath)
        Set-Location $frontendPath
        npm start
    } -ArgumentList (Resolve-Path $frontendPath).Path -Name "Frontend"
    
    Pop-Location
    
    Write-Host "üì± Interface React d√©marr√©e (Job ID: $($frontendJob.Id))" -ForegroundColor Green
    Write-Host "üåê URL Frontend: http://localhost:3000" -ForegroundColor Cyan
    
    return $frontendJob
}

# Fonction pour attendre que les serveurs soient pr√™ts
function Wait-ForServers {
    param($CheckBackend = $true, $CheckFrontend = $true)
    
    Write-Host "‚è≥ Attente du d√©marrage des serveurs..." -ForegroundColor Yellow
    
    $maxAttempts = 30
    $sleepInterval = 2
    
    for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
        $backendReady = if ($CheckBackend) { 
            (Test-NetConnection -ComputerName localhost -Port 5003 -WarningAction SilentlyContinue).TcpTestSucceeded 
        } else { $true }
        
        $frontendReady = if ($CheckFrontend) { 
            (Test-NetConnection -ComputerName localhost -Port 3000 -WarningAction SilentlyContinue).TcpTestSucceeded 
        } else { $true }
        
        if ($backendReady -and $frontendReady) {
            Write-Host "‚úÖ Tous les serveurs sont op√©rationnels!" -ForegroundColor Green
            return $true
        }
        
        $status = "Tentative $attempt/$maxAttempts"
        if ($CheckBackend) { $status += " | Backend: $(if($backendReady){'‚úÖ'}else{'‚è≥'})" }
        if ($CheckFrontend) { $status += " | Frontend: $(if($frontendReady){'‚úÖ'}else{'‚è≥'})" }
        Write-Host $status -ForegroundColor Yellow
        
        Start-Sleep -Seconds $sleepInterval
    }
    
    Write-Host "‚ö†Ô∏è Timeout: Les serveurs ne sont pas tous pr√™ts" -ForegroundColor Red
    return $false
}

# Lancement conditionnel
$jobs = @()

if ($BackendOnly) {
    $backendJob = Start-Backend
    if ($backendJob) {
        $jobs += $backendJob
        Wait-ForServers -CheckBackend $true -CheckFrontend $false
    }
} elseif ($FrontendOnly) {
    $frontendJob = Start-Frontend
    if ($frontendJob) {
        $jobs += $frontendJob
        Wait-ForServers -CheckBackend $false -CheckFrontend $true
    }
} else {
    # Lancer backend et frontend
    $backendJob = Start-Backend
    if ($backendJob) { $jobs += $backendJob }
    
    Start-Sleep -Seconds 3  # Laisser le temps au backend de d√©marrer
    
    $frontendJob = Start-Frontend
    if ($frontendJob) { $jobs += $frontendJob }
    
    if ($jobs.Count -gt 0) {
        Wait-ForServers -CheckBackend $true -CheckFrontend $true
    }
}

if ($jobs.Count -eq 0) {
    Write-Host "‚ùå Aucun service n'a pu √™tre d√©marr√©" -ForegroundColor Red
    exit 1
}

# Affichage des informations finales
Write-Host ""
Write-Host "üéâ Application Web lanc√©e avec succ√®s!" -ForegroundColor Green
Write-Host "=" * 60
Write-Host "üìä Services actifs:" -ForegroundColor Blue

foreach ($job in $jobs) {
    $status = if ($job.State -eq "Running") { "üü¢ Actif" } else { "üî¥ Arr√™t√©" }
    Write-Host "  ‚Ä¢ $($job.Name): $status" -ForegroundColor White
}

if (-not $BackendOnly) {
    Write-Host ""
    Write-Host "üåê Acc√®s √† l'interface:" -ForegroundColor Blue
    Write-Host "  Frontend: http://localhost:3000" -ForegroundColor Cyan
}

if (-not $FrontendOnly) {
    Write-Host "  Backend API: http://localhost:5003" -ForegroundColor Cyan
    Write-Host "  Documentation API: http://localhost:5003/api/health" -ForegroundColor Cyan
}

Write-Host ""
Write-Host "üß™ Tests fonctionnels:" -ForegroundColor Blue
Write-Host "  Pour lancer les tests Playwright: .\scripts\run_all_and_test.ps1" -ForegroundColor Yellow

Write-Host ""
Write-Host "‚èπÔ∏è Pour arr√™ter les services:" -ForegroundColor Red
Write-Host "  Appuyez sur Ctrl+C ou fermez cette fen√™tre" -ForegroundColor Red

# Attendre que l'utilisateur arr√™te
try {
    Write-Host ""
    Write-Host "Appuyez sur Ctrl+C pour arr√™ter les services..." -ForegroundColor Yellow
    while ($true) {
        Start-Sleep -Seconds 5
        
        # V√©rifier l'√©tat des jobs
        $runningJobs = $jobs | Where-Object { $_.State -eq "Running" }
        if ($runningJobs.Count -eq 0) {
            Write-Host "‚ö†Ô∏è Tous les services se sont arr√™t√©s" -ForegroundColor Yellow
            break
        }
    }
} finally {
    Write-Host ""
    Write-Host "üõë Arr√™t des services..." -ForegroundColor Yellow
    
    foreach ($job in $jobs) {
        if ($job.State -eq "Running") {
            Stop-Job $job -Force
            Write-Host "  ‚úÖ $($job.Name) arr√™t√©" -ForegroundColor Green
        }
        Remove-Job $job -Force
    }
    
    Write-Host "üëã Application ferm√©e. Merci d'avoir utilis√© notre outil!" -ForegroundColor Green
}