[pytest]
testpaths = tests argumentation_analysis services
python_files = test_*.py tests_*.py *_test.py *_tests.py
python_classes = *Test* *Tests Test* Tests
python_functions = test_*
markers =
    slow: marks tests as slow to run
    api: marks tests as API tests
    integration: marks tests as integration tests
    real_jpype: marks tests that require a real JPype and JVM
    database: marks tests requiring database access
    qdrant: marks tests requiring Qdrant access
    docker: marks tests requiring Docker
    anyio: mark a test as being anyio-driven
    asyncio: mark a test as asyncio-driven
# asyncio_mode = auto # Remplacé
asyncio_default_fixture_loop_scope = function
norecursedirs = .git .tox .env venv argumentation_analysis/agents/runners argumentation_analysis/agents/test_scripts argumentation_analysis/scripts
pythonpath = . argumentation_analysis



    

[coverage:run]
source = argumentation_analysis
omit =
    */__pycache__/*
    */tests/*
    */venv/*
    */env/*
    */.venv/*
    */site-packages/*
    */dist-packages/*
    # Exclure les scripts d'exécution de tests eux-mêmes s'ils sont dans le source
    argumentation_analysis/tests/run_*.py
    argumentation_analysis/tests/tools/run_*.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise NotImplementedError
    if __name__ == .__main__.:
    # Ligne suivante ajoutée pour correspondre à la syntaxe pytest-cov plus récente
    if __name__ == "__main__":
    pass
    raise ImportError
    # Exclure les blocs try/except pour import facultatif
    except ImportError:
    # Exclure les définitions de classes et fonctions vides
    ^\s*class\s.*\(\s*\):(\s*#.*)?\s*pass\s*$
    ^\s*def\s.*\(\s*\):(\s*#.*)?\s*pass\s*$

[coverage:html]
directory = tests/htmlcov
title = Rapport de couverture - Projet d'Analyse Argumentative

[coverage:xml]
output = tests/coverage.xml