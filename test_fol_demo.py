#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
D√©monstration rapide des tests FOL Agent.

Ce script teste rapidement l'agent FOL et la suite de tests cr√©√©e
pour valider que l'impl√©mentation fonctionne correctement.
"""

import asyncio
import sys
import logging
from pathlib import Path

# Configuration logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Ajout du chemin pour imports
sys.path.insert(0, str(Path.cwd()))

async def test_fol_agent_basic():
    """Test basique de l'agent FOL."""
    try:
        from argumentation_analysis.agents.core.logic.fol_logic_agent import (
            FOLLogicAgent, 
            FOLAnalysisResult, 
            create_fol_agent
        )
        
        logger.info("‚úÖ Import agent FOL r√©ussi")
        
        # Cr√©ation agent
        agent = create_fol_agent(agent_name="DemoAgent")
        logger.info(f"‚úÖ Agent cr√©√©: {agent.agent_name}")
        
        # Test analyse basique
        test_text = "Tous les hommes sont mortels. Socrate est un homme. Donc Socrate est mortel."
        result = await agent.analyze(test_text)
        
        # V√©rifications
        assert isinstance(result, FOLAnalysisResult), "R√©sultat doit √™tre FOLAnalysisResult"
        assert len(result.formulas) > 0, "Doit g√©n√©rer des formules"
        assert result.confidence_score >= 0.0, "Score confiance valide"
        
        logger.info(f"‚úÖ Analyse r√©ussie:")
        logger.info(f"   Formules: {result.formulas}")
        logger.info(f"   Coh√©rence: {result.consistency_check}")
        logger.info(f"   Confiance: {result.confidence_score:.2f}")
        logger.info(f"   Inf√©rences: {len(result.inferences)}")
        
        return True
        
    except ImportError as e:
        logger.error(f"‚ùå Erreur import agent FOL: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erreur test agent FOL: {e}")
        return False

def test_unified_config():
    """Test configuration unifi√©e FOL."""
    try:
        from config.unified_config import (
            UnifiedConfig, 
            LogicType, 
            AgentType, 
            PresetConfigs
        )
        
        logger.info("‚úÖ Import configuration r√©ussi")
        
        # Test configuration FOL
        config = PresetConfigs.authentic_fol()
        assert config.logic_type == LogicType.FOL
        assert AgentType.FOL_LOGIC in config.agents
        
        # Test mapping agent
        agent_classes = config.get_agent_classes()
        assert "fol_logic" in agent_classes
        assert agent_classes["fol_logic"] == "FirstOrderLogicAgent"
        
        logger.info("‚úÖ Configuration FOL valid√©e")
        return True
        
    except ImportError as e:
        logger.error(f"‚ùå Erreur import configuration: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erreur test configuration: {e}")
        return False

def test_files_structure():
    """Test structure des fichiers de tests."""
    test_files = [
        "tests/unit/agents/test_fol_logic_agent.py",
        "tests/integration/test_fol_tweety_integration.py", 
        "tests/validation/test_fol_complete_validation.py",
        "tests/migration/test_modal_to_fol_migration.py",
        "scripts/run_fol_tests.py",
        "tests/README_FOL_TESTS.md"
    ]
    
    missing_files = []
    for file_path in test_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
    
    if missing_files:
        logger.error(f"‚ùå Fichiers manquants: {missing_files}")
        return False
    
    logger.info("‚úÖ Structure fichiers tests valid√©e")
    return True

async def run_demo():
    """Ex√©cute la d√©monstration compl√®te."""
    logger.info("üöÄ D√©but d√©monstration tests FOL Agent")
    
    tests = [
        ("Structure fichiers", test_files_structure),
        ("Configuration unifi√©e", test_unified_config),
        ("Agent FOL basique", test_fol_agent_basic)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        logger.info(f"‚ñ∂Ô∏è Test: {test_name}")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            results[test_name] = result
            
            if result:
                logger.info(f"‚úÖ {test_name} r√©ussi")
            else:
                logger.error(f"‚ùå {test_name} √©chou√©")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur {test_name}: {e}")
            results[test_name] = False
    
    # R√©sum√©
    total_tests = len(results)
    passed_tests = sum(results.values())
    success_rate = passed_tests / total_tests
    
    logger.info("\n" + "="*60)
    logger.info("üìã R√âSUM√â D√âMONSTRATION FOL")
    logger.info("="*60)
    logger.info(f"Tests r√©ussis: {passed_tests}/{total_tests} ({success_rate:.1%})")
    
    for test_name, result in results.items():
        status = "‚úÖ" if result else "‚ùå"
        logger.info(f"  {status} {test_name}")
    
    if success_rate == 1.0:
        logger.info("\nüéâ D√©monstration r√©ussie - Suite tests FOL op√©rationnelle!")
        logger.info("\nüìã Prochaines √©tapes:")
        logger.info("  1. Ex√©cuter: python scripts/run_fol_tests.py --unit-only")
        logger.info("  2. Puis: python scripts/run_fol_tests.py --integration")
        logger.info("  3. Enfin: python scripts/run_fol_tests.py --all --real-tweety")
    else:
        logger.warning("\n‚ö†Ô∏è Probl√®mes d√©tect√©s - Corrections n√©cessaires")
    
    return success_rate == 1.0

if __name__ == "__main__":
    success = asyncio.run(run_demo())
    sys.exit(0 if success else 1)