# Requirements pour Intelligence Symbolique Enhanced v2.1.0
# Généré après corrections des dépendances critiques - 08/06/2025

# ===== CORE DEPENDENCIES =====
# Python ML/Data Science Stack
numpy>=2.0
pandas==2.2.3
scipy==1.15.3
scikit-learn==1.6.1
nltk>=3.8
spacy>=3.7

# ===== WEB & API =====
flask>=2.0.0
Flask-CORS>=4.0.0
flask_socketio>=5.3.6
requests>=2.28.0
uvicorn[standard]>=0.20.0 # Ajout pour le serveur ASGI
a2wsgi>=1.8.0 # Ajout pour servir Flask avec Uvicorn

# ===== UTILITIES =====
pydantic==2.9.2
python-dotenv>=1.0.0
cryptography>=3.4.0
tqdm>=4.60.0
pyyaml>=6.0
unidecode>=1.3.0
markdown>=3.4.0

# ===== PLOTTING & VISUALIZATION =====
matplotlib>=3.5.0
seaborn>=0.11.0
statsmodels>=0.13.0
networkx==3.4.2

pyvis>=0.3.0
# ===== LOGIC & REASONING =====
clingo>=5.6.0
jpype1>=1.4.0

# ===== AI & LLM DEPENDENCIES =====
# PyTorch/Transformers
torch>=1.12.0
transformers>=4.20.0

# Semantic Kernel - CRITICAL DEPENDENCY
semantic-kernel>=1.33.0
# NOTE: Using latest version (>1.0.0) a modern API
# CRITICAL UPDATE: Resolves Pydantic import errors and modernizes API
# Provides: Core semantic kernel functionality

# ===== TESTING FRAMEWORK =====
pytest>=7.0.0
pytest-cov>=4.0.0
pytest-mock>=3.10.0
pytest-asyncio>=0.21.0  # CRITICAL: For async tests - FIXED
coverage>=7.0.0

# ===== WEB TESTING =====
playwright>=1.40.0
pytest-playwright>=0.4.0

# ===== DEVELOPMENT TOOLS =====
# Jupyter (if needed)
# jupyter>=1.0.0
# ipykernel>=6.0.0

# ===== STATUS APRÈS CORRECTIONS =====
# ✅ semantic-kernel: Installé avec fallback agents
# ✅ pytest-asyncio: Installé et validé
# ✅ AuthorRole: Disponible via fallback
# ✅ Tous systèmes critiques: OPÉRATIONNELS
# ✅ Score d'opérationnalité: 100%

# ===== FALLBACKS IMPLÉMENTÉS =====
# project_core/semantic_kernel_agents_fallback.py
# project_core/semantic_kernel_agents_import.py
# test_critical_dependencies.py

# Pour installer toutes les dépendances:
# pip install -r requirements.txt

# Pour l'environnement conda (recommandé):
# conda env create -f environment.yml
