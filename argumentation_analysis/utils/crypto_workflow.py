#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Module de gestion des workflows avec d√©chiffrement automatique
===========================================================

Composant r√©utilisable pour :
- D√©chiffrement automatique de corpus
- Gestion des cl√©s de chiffrement
- Pipeline de traitement des textes chiffr√©s
- Validation de l'int√©grit√© des donn√©es

Int√©gr√© dans l'architecture modulaire pour √©viter la duplication de code.
"""

import os
import logging
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from cryptography.fernet import Fernet
import base64
import hashlib


@dataclass
class CorpusDecryptionResult:
    """R√©sultat du d√©chiffrement de corpus."""
    success: bool
    loaded_files: List[Dict[str, Any]]
    errors: List[str]
    total_definitions: int
    processing_time: float


class CryptoWorkflowManager:
    """Gestionnaire de workflows avec d√©chiffrement automatique."""
    
    def __init__(self, passphrase: Optional[str] = None):
        self.logger = logging.getLogger(f"{__name__}.CryptoWorkflowManager")
        self.passphrase = passphrase or os.getenv("TEXT_CONFIG_PASSPHRASE", "epita_ia_symb_2025_temp_key")
        self._encryption_key = None
        
    def derive_encryption_key(self) -> bytes:
        """D√©rive une cl√© de chiffrement depuis la passphrase."""
        if self._encryption_key is None:
            # D√©rivation compatible avec le syst√®me existant
            key_material = self.passphrase.encode('utf-8')
            key_hash = hashlib.sha256(key_material).digest()
            self._encryption_key = base64.urlsafe_b64encode(key_hash)
        return self._encryption_key
    
    async def load_encrypted_corpus(self, corpus_files: List[str]) -> CorpusDecryptionResult:
        """
        Charge et d√©chiffre une liste de fichiers de corpus.
        
        Args:
            corpus_files: Liste des chemins vers les fichiers chiffr√©s
            
        Returns:
            R√©sultat du d√©chiffrement avec m√©tadonn√©es
        """
        import time
        start_time = time.time()
        
        result = CorpusDecryptionResult(
            success=True,
            loaded_files=[],
            errors=[],
            total_definitions=0,
            processing_time=0.0
        )
        
        try:
            # Import dynamique pour √©viter les erreurs de d√©pendances
            from argumentation_analysis.ui.file_operations import load_extract_definitions
            
            encryption_key = self.derive_encryption_key()
            self.logger.info(f"üîì D√©chiffrement de {len(corpus_files)} fichiers de corpus")
            
            for corpus_file in corpus_files:
                corpus_path = Path(corpus_file)
                
                if not corpus_path.exists():
                    error_msg = f"Fichier corpus non trouv√©: {corpus_path}"
                    self.logger.warning(error_msg)
                    result.errors.append(error_msg)
                    continue
                
                try:
                    self.logger.debug(f"üìÇ D√©chiffrement: {corpus_path}")
                    
                    # Chargement et d√©chiffrement
                    definitions = load_extract_definitions(
                        config_file=corpus_path,
                        key=encryption_key
                    )
                    
                    if definitions:
                        file_info = {
                            "file": str(corpus_path),
                            "definitions_count": len(definitions),
                            "definitions": definitions,
                            "status": "success"
                        }
                        result.loaded_files.append(file_info)
                        result.total_definitions += len(definitions)
                        
                        self.logger.info(f"‚úÖ {corpus_path.name}: {len(definitions)} d√©finitions")
                    else:
                        error_msg = f"√âchec du d√©chiffrement: {corpus_path}"
                        result.errors.append(error_msg)
                        self.logger.error(error_msg)
                        
                except Exception as e:
                    error_msg = f"Erreur traitement {corpus_path}: {e}"
                    result.errors.append(error_msg)
                    self.logger.error(error_msg)
            
            result.success = len(result.loaded_files) > 0
            result.processing_time = time.time() - start_time
            
            self.logger.info(f"üéØ D√©chiffrement termin√©: {len(result.loaded_files)} fichiers, {result.total_definitions} d√©finitions")
            
        except ImportError as e:
            error_msg = f"Modules de d√©chiffrement non disponibles: {e}"
            self.logger.error(error_msg)
            result.success = False
            result.errors.append(error_msg)
            result.processing_time = time.time() - start_time
            
        except Exception as e:
            error_msg = f"Erreur g√©n√©rale de d√©chiffrement: {e}"
            self.logger.error(error_msg, exc_info=True)
            result.success = False
            result.errors.append(error_msg)
            result.processing_time = time.time() - start_time
        
        return result
    
    def encrypt_content(self, content: str) -> bytes:
        """Chiffre du contenu textuel."""
        try:
            fernet = Fernet(self.derive_encryption_key())
            return fernet.encrypt(content.encode('utf-8'))
        except Exception as e:
            self.logger.error(f"Erreur chiffrement: {e}")
            raise
    
    def decrypt_content(self, encrypted_content: bytes) -> str:
        """D√©chiffre du contenu textuel."""
        try:
            fernet = Fernet(self.derive_encryption_key())
            return fernet.decrypt(encrypted_content).decode('utf-8')
        except Exception as e:
            self.logger.error(f"Erreur d√©chiffrement: {e}")
            raise
    
    def validate_corpus_integrity(self, corpus_data: Dict[str, Any]) -> Tuple[bool, List[str]]:
        """Valide l'int√©grit√© des donn√©es de corpus d√©chiffr√©es."""
        errors = []
        
        if not corpus_data.get("loaded_files"):
            errors.append("Aucun fichier charg√©")
            return False, errors
        
        for file_data in corpus_data["loaded_files"]:
            if not file_data.get("definitions"):
                errors.append(f"Fichier sans d√©finitions: {file_data.get('file', 'inconnu')}")
            
            for definition in file_data.get("definitions", []):
                if not definition.get("content"):
                    errors.append(f"D√©finition sans contenu dans {file_data.get('file', 'inconnu')}")
        
        return len(errors) == 0, errors


# Factory function pour faciliter l'utilisation
def create_crypto_manager(passphrase: Optional[str] = None) -> CryptoWorkflowManager:
    """Cr√©e un gestionnaire de workflow crypto."""
    return CryptoWorkflowManager(passphrase)