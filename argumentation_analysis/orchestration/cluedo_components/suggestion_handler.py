# argumentation_analysis/orchestration/cluedo_components/suggestion_handler.py
import logging
from typing import Optional, Dict, Any

from argumentation_analysis.agents.core.oracle.moriarty_interrogator_agent import (
    MoriartyInterrogatorAgent,
)

logger = logging.getLogger(__name__)


class SuggestionHandler:
    """
    G√®re l'extraction et le traitement des suggestions Cluedo faites par les agents.
    """

    def __init__(self, moriarty_agent: MoriartyInterrogatorAgent):
        self.moriarty_agent = moriarty_agent

    # def extract_cluedo_suggestion(self, message_content: str) -> Optional[Dict[str, str]]:
    #     """
    #     [OBSOL√àTE - Remplac√© par le Tool Calling]
    #     Extrait une suggestion Cluedo d'un message (suspect, arme, lieu).
    #
    #     Args:
    #         message_content: Contenu du message √† analyser
    #
    #     Returns:
    #         Dict avec suspect/arme/lieu ou None si pas de suggestion d√©tect√©e
    #     """
    #     content_lower = message_content.lower()
    #
    #     suggestion_keywords = ['sugg√®re', 'propose', 'accuse', 'pense que', 'suspect', 'suppose']
    #     if not any(keyword in content_lower for keyword in suggestion_keywords):
    #         return None
    #
    #     suspects = ["colonel moutarde", "professeur violet", "mademoiselle rose", "docteur orchid√©e"]
    #     armes = ["poignard", "chandelier", "revolver", "corde"]
    #     lieux = ["salon", "cuisine", "bureau", "biblioth√®que"]
    #
    #     found_suspect = next((s.title() for s in suspects if s in content_lower), None)
    #     found_arme = next((a.title() for a in armes if a in content_lower), None)
    #     found_lieu = next((l.title() for l in lieux if l in content_lower), None)
    #
    #     # On exige maintenant que les 3 √©l√©ments soient pr√©sents pour consid√©rer cela comme une suggestion valide.
    #     if found_suspect and found_arme and found_lieu:
    #         return {
    #             "suspect": found_suspect,
    #             "arme": found_arme,
    #             "lieu": found_lieu
    #         }
    #
    #     return None

    async def force_moriarty_oracle_revelation(
        self, suggestion: Dict[str, str], suggesting_agent: str
    ) -> Optional[Dict[str, Any]]:
        """
        Force Moriarty √† r√©v√©ler ses cartes pour une suggestion donn√©e.

        Args:
            suggestion: Dict avec suspect/arme/lieu
            suggesting_agent: Nom de l'agent qui fait la suggestion

        Returns:
            R√©ponse Oracle de Moriarty ou None si erreur
        """
        try:
            logger.info(
                f"üîÆ Force Oracle r√©v√©lation: {suggestion} par {suggesting_agent}"
            )

            oracle_result = await self.moriarty_agent.validate_suggestion_cluedo(
                suspect=suggestion.get("suspect", ""),
                arme=suggestion.get("arme", ""),
                lieu=suggestion.get("lieu", ""),
                suggesting_agent=suggesting_agent,
            )

            if (
                oracle_result.authorized
                and oracle_result.data
                and oracle_result.data.can_refute
            ):
                revealed_cards = oracle_result.revealed_information or []
                if revealed_cards:
                    content = f"*sourire √©nigmatique* Ah, {suggesting_agent}... Je poss√®de {', '.join(revealed_cards)} ! Votre th√©orie s'effondre."
                    return {
                        "content": content,
                        "type": "oracle_revelation",
                        "revealed_cards": revealed_cards,
                        "can_refute": True,
                        "suggestion": suggestion,
                    }
                else:
                    # Cas de s√©curit√©, m√™me si Moriarty a √©t√© corrig√© pour ne plus arriver ici.
                    logger.warning(
                        f"Oracle a indiqu√© pouvoir r√©futer mais n'a retourn√© aucune carte pour la suggestion: {suggestion}"
                    )
                    content = f"*silence calcul√©* Votre suggestion, {suggesting_agent}, est... notable. Mais je ne r√©v√©lerai rien pour l'instant."
                    return {
                        "content": content,
                        "type": "oracle_no_refutation",
                        "revealed_cards": [],
                        "can_refute": False,
                        "suggestion": suggestion,
                        "warning": "Incoh√©rence Oracle",
                    }
            else:
                content = f"*silence inqui√©tant* Int√©ressant, {suggesting_agent}... Je ne peux rien r√©v√©ler sur cette suggestion."
                return {
                    "content": content,
                    "type": "oracle_no_refutation",
                    "revealed_cards": [],
                    "can_refute": False,
                    "suggestion": suggestion,
                    "warning": "Suggestion potentiellement correcte",
                }

        except Exception as e:
            logger.error(f"‚ùå Erreur Oracle r√©v√©lation: {e}", exc_info=True)
            error_content = f"*confusion momentan√©e* Pardonnez-moi, {suggesting_agent}... Un myst√®re technique m'emp√™che de r√©pondre."
            return {
                "content": error_content,
                "type": "oracle_error",
                "revealed_cards": [],
                "can_refute": False,
                "error": str(e),
            }
