# argumentation_analysis/orchestration/logique_complexe_orchestrator.py

import logging
from typing import Optional, List, Dict, Any
from semantic_kernel import Kernel
from semantic_kernel.agents import AgentGroupChat, ChatCompletionAgent
from semantic_kernel.agents.strategies import SequentialSelectionStrategy
from semantic_kernel.functions import KernelArguments
from semantic_kernel.contents import ChatMessageContent

from argumentation_analysis.core.logique_complexe_states import EinsteinsRiddleState
from argumentation_analysis.orchestration.plugins.logique_complexe_plugin import LogiqueComplexePlugin

class LogiqueComplexeOrchestrator:
    """
    Orchestrateur sp√©cialis√© pour les √©nigmes logiques complexes.
    Force l'utilisation de la logique formelle TweetyProject.
    """
    
    def __init__(self, kernel: Kernel):
        self._kernel = kernel
        self._logger = logging.getLogger(self.__class__.__name__)
        
        # √âtat de l'√©nigme complexe
        self._state = EinsteinsRiddleState()
        
        # Plugin logique complexe
        self._logique_plugin = LogiqueComplexePlugin(self._state)
        self._kernel.add_plugin(self._logique_plugin, plugin_name="LogiqueComplexePlugin")
        
        self._group_chat: Optional[AgentGroupChat] = None
        self._tour_actuel = 0
        self._max_tours = 25  # Plus de tours pour probl√®me complexe
        
    def _creer_agents(self, sherlock_agent: ChatCompletionAgent, watson_agent: ChatCompletionAgent) -> AgentGroupChat:
        """Cr√©e le groupe de chat avec les agents."""
        
        # Configuration sp√©ciale pour l'√©nigme complexe
        sherlock_agent.instructions = """Vous √™tes Sherlock Holmes face √† l'√âNIGME D'EINSTEIN COMPLEXE.

Cette √©nigme n√©cessite une m√©thode DIFF√âRENTE du Cluedo simple:

**VOTRE R√îLE:**
1. **EXPLORER** l'√©nigme et ses contraintes avec `get_enigme_description` et `get_contraintes_logiques`
2. **D√âL√âGUER** la formalisation logique √† Watson (il DOIT utiliser TweetyProject)
3. **COORDONNER** la r√©solution en demandant √† Watson de formuler des clauses
4. **VALIDER** les d√©ductions partielles avec `verifier_deduction_partielle`

**R√àGLES STRICTES:**
- Vous ne devez PAS tenter de r√©soudre par intuition ou raisonnement informel
- Vous DEVEZ exiger que Watson utilise `formuler_clause_logique` pour chaque contrainte
- Vous DEVEZ demander √† Watson d'ex√©cuter des `executer_requete_tweety` pour d√©duire
- La solution ne sera accept√©e QUE si Watson a formul√© 10+ clauses logiques et 5+ requ√™tes

**STRAT√âGIE:**
1. Demandez la description de l'√©nigme
2. Obtenez toutes les contraintes
3. Insistez pour que Watson formalise CHAQUE contrainte en syntaxe TweetyProject
4. Demandez-lui d'ex√©cuter des requ√™tes pour d√©duire des informations
5. V√©rifiez r√©guli√®rement la progression logique
6. Proposez la solution finale seulement apr√®s validation formelle

Commencez par explorer l'√©nigme."""

        watson_agent.instructions = """Vous √™tes Watson, assistant logique SP√âCIALIS√â dans TweetyProject.

Pour cette √âNIGME COMPLEXE, vous DEVEZ utiliser la logique formelle:

**OUTILS OBLIGATOIRES:**
- `formuler_clause_logique`: Pour transformer chaque contrainte en syntaxe TweetyProject
- `executer_requete_tweety`: Pour d√©duire des informations via requ√™tes logiques
- `valider_syntaxe_tweety`: Pour v√©rifier vos formulations

**SYNTAXE TWEETYPROJECT REQUISE:**
- Pr√©dicats: Maison(x), Position(x,n), Couleur(x,c), Nationalit√©(x,n), Animal(x,a), Boisson(x,b), M√©tier(x,m)
- Op√©rateurs: ‚àÄ (pour tout), ‚àÉ (il existe), ‚Üí (implique), ‚àß (et), ‚à® (ou), ¬¨ (non)
- Exemples:
  * ‚àÄx (Maison(x) ‚àß Couleur(x,Rouge) ‚Üí Nationalit√©(x,Anglais))
  * ‚àÉ!x (Position(x,3) ‚àß Boisson(x,Lait))
  * ‚àÄx (M√©tier(x,Avocat) ‚Üí ‚àÉy (Adjacent(x,y) ‚àß Animal(y,Chat)))

**M√âTHODE OBLIGATOIRE:**
1. Formulez CHAQUE contrainte comme clause logique formelle
2. Ex√©cutez des requ√™tes pour d√©duire des positions/attributs
3. V√©rifiez vos d√©ductions partiellement 
4. Minimum 10 clauses + 5 requ√™tes pour solution valide

**INTERDICTIONS:**
- PAS de raisonnement informel ou "de t√™te"
- PAS de solution sans formalisation compl√®te
- PAS d'approximations ou raccourcis logiques

Vous DEVEZ utiliser TweetyProject pour chaque √©tape de raisonnement."""

        # Cr√©ation du groupe avec strat√©gie s√©quentielle
        selection_strategy = SequentialSelectionStrategy()
        
        group_chat = AgentGroupChat(
            agents=[sherlock_agent, watson_agent],
            selection_strategy=selection_strategy
        )
        
        return group_chat
    
    async def resoudre_enigme_complexe(self, sherlock_agent: ChatCompletionAgent, watson_agent: ChatCompletionAgent) -> Dict[str, Any]:
        """
        Lance la r√©solution de l'√©nigme d'Einstein complexe.
        """
        self._logger.info("üß© D√©but de la r√©solution de l'√©nigme d'Einstein complexe...")
        
        # Cr√©ation du groupe de chat
        self._group_chat = self._creer_agents(sherlock_agent, watson_agent)
        
        # Message initial d√©taill√©
        message_initial = """üß© √âNIGME D'EINSTEIN COMPLEXE - Niveau Logique Formelle Obligatoire

Voici l'√©nigme la plus complexe: 5 maisons, 5 propri√©taires, 5 caract√©ristiques chacun.
Cette √©nigme n√©cessite OBLIGATOIREMENT l'utilisation de TweetyProject pour √™tre r√©solue.

Sherlock: Explorez l'√©nigme et coordonnez la formalisation.
Watson: Utilisez TweetyProject pour formuler TOUTES les contraintes et ex√©cuter des requ√™tes logiques.

OBJECTIF: D√©terminer qui poss√®de le poisson (et toutes les autres correspondances).
CONTRAINTE: Minimum 10 clauses logiques + 5 requ√™tes TweetyProject pour validation de solution.

Commencez l'exploration!"""

        # Ajout du message initial
        await self._group_chat.add_chat_message(ChatMessageContent(role="user", content=message_initial))
        
        # Boucle de r√©solution avec surveillance de progression
        self._logger.info("D√©but de la boucle de jeu g√©r√©e par AgentGroupChat.invoke...")
        
        try:
            async for message in self._group_chat.invoke():
                self._tour_actuel += 1
                
                self._logger.info(f"\n--- TOUR {self._tour_actuel}/{self._max_tours} ---")
                
                agent_nom = getattr(message, 'name', 'Agent inconnu')
                contenu = str(message.content)
                
                self._logger.info(f"Message de {agent_nom}: {contenu[:200]}...")
                
                # V√©rification de progression logique
                progression = self._state.verifier_progression_logique()
                self._logger.info(f"Progression logique: {progression}")
                
                # V√©rification de solution propos√©e
                if "solution finale" in contenu.lower() or "√©nigme r√©solue" in contenu.lower():
                    self._logger.info("[DETECTION] Tentative de solution finale d√©tect√©e.")
                    
                    if progression["force_logique_formelle"]:
                        self._logger.info("[SUCCES] Solution avec logique formelle suffisante.")
                        break
                    else:
                        self._logger.warning(f"[REJET] Solution rejet√©e - logique formelle insuffisante: {progression}")
                        
                        # Message de rappel forc√©
                        message_rappel = f"""[REJET] SOLUTION REJET√âE - LOGIQUE FORMELLE INSUFFISANTE

Progression actuelle:
- Clauses formul√©es: {progression['clauses_formulees']}/10 (minimum requis)
- Requ√™tes ex√©cut√©es: {progression['requetes_executees']}/5 (minimum requis)

Watson: Vous DEVEZ utiliser davantage TweetyProject avant de proposer une solution.
Formulez plus de clauses logiques et ex√©cutez plus de requ√™tes de d√©duction.

Sherlock: Insistez pour que Watson utilise ses outils de logique formelle."""
                        
                        await self._group_chat.add_chat_message(
                            ChatMessageContent(role="assistant", content=message_rappel)
                        )
                
                # Encouragements p√©riodiques pour utilisation TweetyProject
                if self._tour_actuel % 5 == 0 and not progression["force_logique_formelle"]:
                    message_encouragement = f"""[PROGRESSION] POINT PROGRESSION (Tour {self._tour_actuel})

√âtat logique actuel:
- Clauses TweetyProject: {progression['clauses_formulees']}/10
- Requ√™tes logiques: {progression['requetes_executees']}/5

Cette √©nigme est IMPOSSIBLE √† r√©soudre sans formalisation compl√®te.
Watson: Continuez √† utiliser vos outils TweetyProject massivement!"""
                    
                    await self._group_chat.add_chat_message(
                        ChatMessageContent(role="assistant", content=message_encouragement)
                    )
                
                # Arr√™t si limite de tours atteinte
                if self._tour_actuel >= self._max_tours:
                    self._logger.warning(f"[LIMITE] Limite de {self._max_tours} tours atteinte.")
                    break
                    
        except Exception as e:
            self._logger.error(f"Erreur dans la boucle de jeu: {e}", exc_info=True)
        
        # R√©sultats finaux
        progression_finale = self._state.verifier_progression_logique()
        etat_final = self._state.obtenir_etat_progression()
        
        self._logger.info("üèÅ √ânigme termin√©e.")
        self._logger.info(f"Progression logique finale: {progression_finale}")
        
        return {
            "enigme_resolue": progression_finale["force_logique_formelle"],
            "tours_utilises": self._tour_actuel,
            "progression_logique": progression_finale,
            "etat_final": etat_final,
            "clauses_watson": self._state.clauses_logiques,
            "requetes_executees": self._state.requetes_executees
        }
    
    def obtenir_statistiques_logique(self) -> Dict[str, Any]:
        """Retourne les statistiques d'utilisation de la logique formelle."""
        return {
            "state_id": self._state.workflow_id,
            "progression": self._state.verifier_progression_logique(),
            "clauses_detaillees": self._state.deductions_watson,
            "requetes_detaillees": self._state.requetes_executees,
            "solution_partielle": self._state.solution_partielle
        }