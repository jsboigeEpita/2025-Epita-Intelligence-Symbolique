#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Script pour tester l'orchestration compl√®te avec tous les agents sur un texte complexe.

Ce script s√©lectionne un texte complexe depuis les sources disponibles,
extrait son contenu et lance l'orchestration avec tous les agents,
en s'assurant que l'agent Informel am√©lior√© est bien utilis√©.
"""

import os
import sys
import json
import asyncio
import logging
from pathlib import Path
from datetime import datetime

# Ajouter le r√©pertoire racine au chemin de recherche des modules
current_dir = Path(__file__).parent
parent_dir = current_dir.parent.parent
root_dir = parent_dir.parent
if str(root_dir) not in sys.path:
    sys.path.append(str(root_dir))

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] [%(name)s] %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger("TestOrchestrationComplete")

# Cr√©er un r√©pertoire pour les traces
TRACES_DIR = Path(parent_dir) / "execution_traces" / "orchestration"
TRACES_DIR.mkdir(exist_ok=True, parents=True)

async def load_kremlin_speech():
    """
    Charge directement le texte complet du discours du Kremlin depuis le cache.
    
    Returns:
        Le texte complet du discours
    """
    # Identifiant du fichier cache pour le discours du Kremlin
    cache_id = "4cf2d4853745719f6504a54610237738ad016de4f64176c3e8f5218f8fd2c01b"
    cache_path = Path(root_dir) / "text_cache" / f"{cache_id}.txt"
    
    logger.info(f"Chargement direct du discours du Kremlin depuis le cache...")
    
    try:
        with open(cache_path, 'r', encoding='utf-8') as f:
            text = f.read()
        
        if not text:
            logger.error("Le fichier cache est vide.")
            return None
        
        logger.info(f"Texte charg√© avec succ√®s ({len(text)} caract√®res)")
        return text
    except Exception as e:
        logger.error(f"Erreur lors du chargement du fichier cache: {e}")
        return None

class ConversationTracer:
    """
    Classe pour tracer la conversation entre les agents.
    """
    def __init__(self, output_dir):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        self.trace = {
            "timestamp_debut": datetime.now().isoformat(),
            "messages": [],
            "agents_utilises": set(),
            "timestamp_fin": None,
            "duree_totale": None,
            "statistiques": {
                "nombre_messages": 0,
                "messages_par_agent": {}
            }
        }
    
    def add_message(self, agent_name, message_content, message_type="message"):
        """
        Ajoute un message √† la trace.
        """
        timestamp = datetime.now().isoformat()
        self.trace["messages"].append({
            "timestamp": timestamp,
            "agent": agent_name,
            "type": message_type,
            "content": message_content
        })
        
        # Mettre √† jour les statistiques
        self.trace["agents_utilises"].add(agent_name)
        self.trace["statistiques"]["nombre_messages"] += 1
        
        if agent_name not in self.trace["statistiques"]["messages_par_agent"]:
            self.trace["statistiques"]["messages_par_agent"][agent_name] = 0
        
        self.trace["statistiques"]["messages_par_agent"][agent_name] += 1
    
    def finalize_trace(self):
        """
        Finalise la trace et calcule les statistiques.
        """
        end_time = datetime.now()
        self.trace["timestamp_fin"] = end_time.isoformat()
        
        # Calculer la dur√©e totale
        start_time = datetime.fromisoformat(self.trace["timestamp_debut"])
        duration = (end_time - start_time).total_seconds()
        self.trace["duree_totale"] = duration
        
        # Convertir le set en liste pour la s√©rialisation JSON
        self.trace["agents_utilises"] = list(self.trace["agents_utilises"])
        
        # Sauvegarder la trace
        trace_path = self.output_dir / f"trace_complete_{end_time.strftime('%Y%m%d_%H%M%S')}.json"
        with open(trace_path, "w", encoding="utf-8") as f:
            json.dump(self.trace, f, indent=2, ensure_ascii=False)
        
        logger.info(f"Trace compl√®te sauvegard√©e dans {trace_path}")
        return trace_path

async def run_orchestration_test():
    """
    Ex√©cute le test d'orchestration compl√®te avec tous les agents.
    """
    # Charger le texte du discours du Kremlin directement depuis le cache
    text_content = await load_kremlin_speech()
    
    if not text_content:
        logger.error("Impossible de charger le texte pour le test.")
        return
    
    logger.info(f"Texte charg√© pour le test ({len(text_content)} caract√®res)")
    
    # Initialiser l'environnement
    from dotenv import load_dotenv
    load_dotenv(override=True)
    
    # Initialisation de la JVM
    from argumentation_analysis.core.jvm_setup import initialize_jvm
    jvm_ready_status = initialize_jvm(lib_dir_path=LIBS_DIR)
    
    if not jvm_ready_status:
        logger.warning("‚ö†Ô∏è JVM n'a pas pu √™tre initialis√©e. L'agent PropositionalLogicAgent ne fonctionnera pas.")
    
    # Cr√©ation du Service LLM
    from argumentation_analysis.core.llm_service import create_llm_service
    llm_service = create_llm_service()
    
    if not llm_service:
        logger.error("‚ùå Impossible de cr√©er le service LLM.")
        return
    
    # Initialiser le traceur de conversation
    tracer = ConversationTracer(TRACES_DIR)
    
    # Ex√©cuter l'orchestration avec tous les agents
    from argumentation_analysis.orchestration.analysis_runner import run_analysis_conversation
    from argumentation_analysis.paths import LIBS_DIR
    
    logger.info("Lancement de l'orchestration avec tous les agents...")
    start_time = asyncio.get_event_loop().time()
    
    # Cr√©er un hook pour intercepter les messages entre agents
    def message_hook(agent_name, message_content, message_type="message"):
        tracer.add_message(agent_name, message_content, message_type)
        logger.info(f"Message de {agent_name} intercept√© ({len(message_content)} caract√®res)")
    
    try:
        # S'assurer que tous les agents sont activ√©s, y compris l'agent Informel
        await run_analysis_conversation(
            texte_a_analyser=text_content,
            llm_service=llm_service,
            use_informal_agent=True,  # Activer explicitement l'agent Informel
            use_pl_agent=True,        # Activer explicitement l'agent PL
            message_hook=message_hook  # Hook pour intercepter les messages
        )
        
        end_time = asyncio.get_event_loop().time()
        duration = end_time - start_time
        
        logger.info(f"üèÅ Orchestration termin√©e avec succ√®s en {duration:.2f} secondes.")
        
        # Finaliser la trace
        trace_path = tracer.finalize_trace()
        
        # G√©n√©rer un rapport d'analyse
        await generate_analysis_report(trace_path, duration)
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'orchestration: {e}", exc_info=True)

async def generate_analysis_report(trace_path, duration):
    """
    G√©n√®re un rapport d'analyse bas√© sur la trace de conversation.
    """
    logger.info("G√©n√©ration du rapport d'analyse...")
    
    # Charger la trace
    with open(trace_path, "r", encoding="utf-8") as f:
        trace = json.load(f)
    
    # Cr√©er le rapport
    report = {
        "titre": "Rapport d'Analyse d'Orchestration Compl√®te",
        "date": datetime.now().isoformat(),
        "duree_execution": duration,
        "statistiques": {
            "nombre_messages_total": trace["statistiques"]["nombre_messages"],
            "agents_utilises": trace["agents_utilises"],
            "messages_par_agent": trace["statistiques"]["messages_par_agent"]
        },
        "analyse_qualitative": {
            "performance_agent_informel": "√Ä √©valuer manuellement",
            "qualite_analyse_argumentative": "√Ä √©valuer manuellement",
            "integration_agents": "√Ä √©valuer manuellement"
        },
        "recommandations": [
            "√âvaluer la qualit√© des sophismes identifi√©s par l'agent Informel",
            "V√©rifier l'int√©gration entre l'agent Informel et l'agent PL",
            "Analyser la pertinence des arguments extraits"
        ]
    }
    
    # Sauvegarder le rapport
    report_path = Path(parent_dir) / "documentation" / "reports" / f"rapport_analyse_orchestration_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(report_path, "w", encoding="utf-8") as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    # Cr√©er une version markdown du rapport pour une meilleure lisibilit√©
    md_report = f"""# {report['titre']}

## Informations G√©n√©rales
- **Date d'ex√©cution:** {datetime.fromisoformat(report['date']).strftime('%d/%m/%Y %H:%M:%S')}
- **Dur√©e d'ex√©cution:** {report['duree_execution']:.2f} secondes

## Statistiques
- **Nombre total de messages:** {report['statistiques']['nombre_messages_total']}
- **Agents utilis√©s:** {', '.join(report['statistiques']['agents_utilises'])}

### Messages par agent
{chr(10).join([f"- **{agent}:** {count}" for agent, count in report['statistiques']['messages_par_agent'].items()])}

## Analyse Qualitative
- **Performance de l'agent Informel:** {report['analyse_qualitative']['performance_agent_informel']}
- **Qualit√© de l'analyse argumentative:** {report['analyse_qualitative']['qualite_analyse_argumentative']}
- **Int√©gration entre les agents:** {report['analyse_qualitative']['integration_agents']}

## Recommandations
{chr(10).join([f"- {rec}" for rec in report['recommandations']])}

## Conclusion
Ce rapport a √©t√© g√©n√©r√© automatiquement apr√®s l'ex√©cution de l'orchestration compl√®te. Une analyse manuelle plus approfondie est recommand√©e pour √©valuer la qualit√© de l'analyse argumentative produite.
"""
    
    md_report_path = Path(parent_dir) / "documentation" / "reports" / f"rapport_analyse_orchestration_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
    with open(md_report_path, "w", encoding="utf-8") as f:
        f.write(md_report)
    
    logger.info(f"Rapport d'analyse sauvegard√© dans {md_report_path}")

async def main():
    """
    Fonction principale du script.
    """
    logger.info("D√©marrage du test d'orchestration compl√®te...")
    await run_orchestration_test()
    logger.info("Test d'orchestration termin√©.")

if __name__ == "__main__":
    asyncio.run(main())