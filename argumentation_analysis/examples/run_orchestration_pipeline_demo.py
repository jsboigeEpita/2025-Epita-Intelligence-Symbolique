#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
D√©monstration du Pipeline d'Orchestration Unifi√©
===============================================

Ce script d√©montre l'utilisation du nouveau pipeline d'orchestration unifi√©
qui int√®gre l'architecture hi√©rarchique et les orchestrateurs sp√©cialis√©s.

Usage:
    python run_orchestration_pipeline_demo.py [--mode MODE] [--type TYPE] [--text TEXT]

Exemples:
    # D√©monstration compl√®te avec tous les modes
    python run_orchestration_pipeline_demo.py
    
    # Mode sp√©cifique
    python run_orchestration_pipeline_demo.py --mode hierarchical_full --type comprehensive
    
    # Texte personnalis√©
    python run_orchestration_pipeline_demo.py --text "Votre texte √† analyser"
    
    # Comparaison des approches
    python run_orchestration_pipeline_demo.py --compare

Auteur: Intelligence Symbolique EPITA
Date: 10/06/2025
"""

import asyncio
import argparse
import logging
import time
import json
from pathlib import Path
from typing import Dict, Any, List

# Configuration du logging pour la d√©monstration
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    datefmt='%H:%M:%S'
)

# Imports du pipeline d'orchestration
try:
    from argumentation_analysis.pipelines.unified_orchestration_pipeline import (
        run_unified_orchestration_pipeline,
        run_extended_unified_analysis,
        compare_orchestration_approaches,
        ExtendedOrchestrationConfig,
        OrchestrationMode,
        AnalysisType,
        create_extended_config_from_params
    )
    ORCHESTRATION_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Pipeline d'orchestration non disponible: {e}")
    ORCHESTRATION_AVAILABLE = False

# Import du pipeline original pour comparaison
try:
    from argumentation_analysis.pipelines.unified_text_analysis import (
        run_unified_text_analysis_pipeline,
        UnifiedAnalysisConfig
    )
    ORIGINAL_PIPELINE_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Pipeline original non disponible: {e}")
    ORIGINAL_PIPELINE_AVAILABLE = False


# Textes d'exemple pour diff√©rents types d'analyse
EXAMPLE_TEXTS = {
    "rhetorical": """
    L'√©ducation est fondamentale pour le d√©veloppement d'une soci√©t√©. Premi√®rement, elle forme les citoyens 
    en leur donnant les connaissances n√©cessaires pour participer activement √† la vie d√©mocratique. 
    Deuxi√®mement, elle favorise l'innovation et le progr√®s technologique. Cependant, certains pr√©tendent 
    que l'√©ducation traditionnelle est obsol√®te. Cette affirmation est clairement fausse car elle ignore 
    les nombreux b√©n√©fices prouv√©s de l'enseignement structur√©.
    """,
    
    "logical": """
    Si tous les hommes sont mortels, et si Socrate est un homme, alors Socrate est mortel. 
    Cette d√©duction suit le principe du syllogisme aristot√©licien. Or, nous savons que Socrate est effectivement 
    un homme, donc nous pouvons conclure avec certitude qu'il est mortel. Ce raisonnement illustre parfaitement 
    la logique d√©ductive o√π la conclusion d√©coule n√©cessairement des pr√©misses.
    """,
    
    "investigative": """
    Le t√©moin A affirme avoir vu le suspect pr√®s de la sc√®ne de crime √† 21h30. Le t√©moin B contredit cette version 
    en d√©clarant que le suspect √©tait ailleurs √† cette heure. L'alibi du suspect semble solide, mais plusieurs 
    incoh√©rences apparaissent dans son t√©moignage. De plus, les preuves mat√©rielles sugg√®rent une pr√©sence sur 
    les lieux. Qui dit la v√©rit√© ? Quels √©l√©ments permettraient de trancher cette contradiction ?
    """,
    
    "fallacy_focused": """
    "Tous ceux qui s'opposent √† cette mesure sont des extr√©mistes dangereux. D'ailleurs, m√™me mon voisin, 
    qui est pourtant quelqu'un de bien, la soutient. Si nous n'agissons pas maintenant, c'est la catastrophe 
    assur√©e ! De toute fa√ßon, puisque 90% des experts sont d'accord, il n'y a plus rien √† d√©battre. 
    Soit vous √™tes avec nous, soit vous √™tes contre la nation."
    """,
    
    "debate": """
    Participant A : "Le t√©l√©travail am√©liore la productivit√© car les employ√©s sont moins distraits."
    Participant B : "C'est faux ! Le t√©l√©travail isole les gens et nuit √† la collaboration."
    Participant A : "Vous g√©n√©ralisez abusivement. Les √©tudes montrent une am√©lioration de 20% de la productivit√©."
    Participant B : "Ces √©tudes sont biais√©es par l'industrie tech. En r√©alit√©, la cr√©ativit√© diminue sans contact humain."
    """,
    
    "comprehensive": """
    La question du changement climatique soul√®ve des enjeux complexes qui n√©cessitent une approche multidisciplinaire. 
    D'un c√¥t√©, les donn√©es scientifiques convergent vers un consensus sur l'origine anthropique du r√©chauffement. 
    Les mod√®les climatiques, bas√©s sur des d√©cennies d'observations, pr√©voient des cons√©quences dramatiques si aucune 
    action n'est entreprise. D'un autre c√¥t√©, les solutions propos√©es font d√©bat. Certains privil√©gient les technologies 
    vertes, d'autres la d√©croissance. Cependant, l'argument selon lequel "nous n'avons pas le choix" constitue une 
    fausse dichotomie qui ignore les nuances des politiques possibles. Il est donc crucial d'analyser rationnellement 
    les options disponibles sans tomber dans l'alarmisme ni le d√©ni.
    """
}


def print_header(title: str, char: str = "=", width: int = 80):
    """Affiche un en-t√™te format√©."""
    print(f"\n{char * width}")
    print(f"{title:^{width}}")
    print(f"{char * width}")


def print_results_summary(results: Dict[str, Any], title: str = "R√©sultats d'Analyse"):
    """Affiche un r√©sum√© format√© des r√©sultats."""
    print_header(title, "‚îÄ", 60)
    
    # M√©tadonn√©es de base
    metadata = results.get("metadata", {})
    print(f"üìä ID d'analyse: {metadata.get('analysis_id', 'N/A')}")
    print(f"üïê Temps d'ex√©cution: {results.get('execution_time', 0):.2f}s")
    print(f"üìù Mode d'orchestration: {metadata.get('orchestration_mode', 'N/A')}")
    print(f"üéØ Type d'analyse: {metadata.get('analysis_type', 'N/A')}")
    print(f"‚úÖ Statut: {results.get('status', 'unknown')}")
    
    # R√©sultats hi√©rarchiques
    if "strategic_analysis" in results and results["strategic_analysis"]:
        strategic = results["strategic_analysis"]
        print(f"\nüéØ Analyse Strat√©gique:")
        print(f"   ‚Ä¢ Objectifs d√©finis: {len(strategic.get('objectives', []))}")
        
    if "tactical_coordination" in results and results["tactical_coordination"]:
        tactical = results["tactical_coordination"]
        print(f"‚öîÔ∏è Coordination Tactique:")
        print(f"   ‚Ä¢ T√¢ches cr√©√©es: {tactical.get('tasks_created', 0)}")
        
    if "operational_results" in results and results["operational_results"]:
        operational = results["operational_results"]
        print(f"‚öôÔ∏è Ex√©cution Op√©rationnelle:")
        print(f"   ‚Ä¢ T√¢ches ex√©cut√©es: {operational.get('tasks_executed', 0)}")
    
    # Orchestration sp√©cialis√©e
    if "specialized_orchestration" in results and results["specialized_orchestration"]:
        specialized = results["specialized_orchestration"]
        orchestrator = specialized.get("orchestrator_used", "N/A")
        print(f"üöÄ Orchestration Sp√©cialis√©e:")
        print(f"   ‚Ä¢ Orchestrateur: {orchestrator}")
        print(f"   ‚Ä¢ Statut: {specialized.get('results', {}).get('status', 'N/A')}")
    
    # Coordination hi√©rarchique
    if "hierarchical_coordination" in results and results["hierarchical_coordination"]:
        coord = results["hierarchical_coordination"]
        print(f"üèóÔ∏è Coordination Hi√©rarchique:")
        print(f"   ‚Ä¢ Score global: {coord.get('overall_score', 0):.2%}")
        print(f"   ‚Ä¢ Alignement strat√©gique: {coord.get('strategic_alignment', 0):.2%}")
        print(f"   ‚Ä¢ Efficacit√© tactique: {coord.get('tactical_efficiency', 0):.2%}")
        print(f"   ‚Ä¢ Succ√®s op√©rationnel: {coord.get('operational_success', 0):.2%}")
    
    # Analyses de base (compatibilit√©)
    if "informal_analysis" in results and results["informal_analysis"]:
        informal = results["informal_analysis"]
        fallacies = informal.get("fallacies", [])
        print(f"üîç Analyse Informelle:")
        print(f"   ‚Ä¢ Sophismes d√©tect√©s: {len(fallacies)}")
        if fallacies:
            avg_confidence = sum(f.get("confidence", 0) for f in fallacies) / len(fallacies)
            print(f"   ‚Ä¢ Confiance moyenne: {avg_confidence:.2%}")
    
    if "formal_analysis" in results and results["formal_analysis"]:
        formal = results["formal_analysis"]
        print(f"üßÆ Analyse Formelle:")
        print(f"   ‚Ä¢ Statut: {formal.get('status', 'N/A')}")
        if formal.get("consistency_check") is not None:
            consistency = "‚úÖ Coh√©rent" if formal["consistency_check"] else "‚ùå Incoh√©rent"
            print(f"   ‚Ä¢ Coh√©rence: {consistency}")
    
    # Recommandations
    recommendations = results.get("recommendations", [])
    if recommendations:
        print(f"\nüí° Recommandations ({len(recommendations)}):")
        for i, rec in enumerate(recommendations[:3], 1):  # Afficher max 3 recommandations
            print(f"   {i}. {rec}")
    
    # Erreurs √©ventuelles
    if "error" in results:
        print(f"\n‚ùå Erreur: {results['error']}")
    
    print("‚îÄ" * 60)


async def demo_basic_usage():
    """D√©monstration de l'utilisation de base."""
    print_header("D√©monstration - Utilisation de Base")
    
    text = EXAMPLE_TEXTS["comprehensive"]
    print(f"üìù Texte d'exemple: {text[:100]}...")
    
    print("\nüîÑ Analyse avec configuration par d√©faut (s√©lection automatique)...")
    start_time = time.time()
    
    try:
        results = await run_unified_orchestration_pipeline(text)
        execution_time = time.time() - start_time
        
        print(f"‚úÖ Analyse termin√©e en {execution_time:.2f}s")
        print_results_summary(results, "Analyse avec Configuration Par D√©faut")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse: {e}")


async def demo_hierarchical_orchestration():
    """D√©monstration de l'orchestration hi√©rarchique compl√®te."""
    print_header("D√©monstration - Orchestration Hi√©rarchique Compl√®te")
    
    text = EXAMPLE_TEXTS["comprehensive"]
    
    config = ExtendedOrchestrationConfig(
        analysis_modes=["informal", "formal", "unified"],
        orchestration_mode=OrchestrationMode.HIERARCHICAL_FULL,
        analysis_type=AnalysisType.COMPREHENSIVE,
        enable_hierarchical=True,
        enable_specialized_orchestrators=False,  # D√©sactiver pour se concentrer sur hi√©rarchique
        save_orchestration_trace=True
    )
    
    print("üèóÔ∏è Lancement de l'orchestration hi√©rarchique compl√®te...")
    
    try:
        results = await run_unified_orchestration_pipeline(text, config)
        print_results_summary(results, "Orchestration Hi√©rarchique Compl√®te")
        
        # Affichage d√©taill√© de la trace d'orchestration
        trace = results.get("orchestration_trace", [])
        if trace:
            print(f"\nüìã Trace d'orchestration ({len(trace)} √©v√©nements):")
            for event in trace[-5:]:  # Afficher les 5 derniers √©v√©nements
                timestamp = event.get("timestamp", "")[:19]  # Format YYYY-MM-DD HH:MM:SS
                event_type = event.get("event_type", "")
                print(f"   {timestamp} - {event_type}")
                
    except Exception as e:
        print(f"‚ùå Erreur lors de l'orchestration hi√©rarchique: {e}")


async def demo_specialized_orchestrators():
    """D√©monstration des orchestrateurs sp√©cialis√©s."""
    print_header("D√©monstration - Orchestrateurs Sp√©cialis√©s")
    
    specialized_demos = [
        {
            "name": "Investigation Cluedo",
            "mode": OrchestrationMode.CLUEDO_INVESTIGATION,
            "type": AnalysisType.INVESTIGATIVE,
            "text": EXAMPLE_TEXTS["investigative"]
        },
        {
            "name": "Analyse Rh√©torique",
            "mode": OrchestrationMode.CONVERSATION,
            "type": AnalysisType.RHETORICAL,
            "text": EXAMPLE_TEXTS["rhetorical"]
        },
        {
            "name": "D√©tection de Sophismes",
            "mode": OrchestrationMode.REAL,
            "type": AnalysisType.FALLACY_FOCUSED,
            "text": EXAMPLE_TEXTS["fallacy_focused"]
        }
    ]
    
    for demo in specialized_demos:
        print(f"\nüöÄ {demo['name']}...")
        
        config = ExtendedOrchestrationConfig(
            orchestration_mode=demo["mode"],
            analysis_type=demo["type"],
            enable_hierarchical=False,
            enable_specialized_orchestrators=True
        )
        
        try:
            results = await run_unified_orchestration_pipeline(demo["text"], config)
            print_results_summary(results, f"Orchestrateur Sp√©cialis√© - {demo['name']}")
            
        except Exception as e:
            print(f"‚ùå Erreur {demo['name']}: {e}")


async def demo_api_compatibility():
    """D√©monstration de la compatibilit√© avec l'API existante."""
    print_header("D√©monstration - Compatibilit√© API Existante")
    
    text = EXAMPLE_TEXTS["rhetorical"]
    
    print("üîÑ Test avec l'API de compatibilit√©...")
    
    try:
        # Nouvelle API compatible
        results = await run_extended_unified_analysis(
            text=text,
            mode="comprehensive",
            orchestration_mode="auto_select",
            use_mocks=False
        )
        
        print_results_summary(results, "API de Compatibilit√©")
        
        # Comparaison avec l'API originale si disponible
        if ORIGINAL_PIPELINE_AVAILABLE:
            print("\nüîÑ Comparaison avec le pipeline original...")
            original_config = UnifiedAnalysisConfig(
                analysis_modes=["informal", "formal"],
                orchestration_mode="pipeline"
            )
            
            original_results = await run_unified_text_analysis_pipeline(text, original_config)
            print_results_summary(original_results, "Pipeline Original")
            
            # Comparaison simple
            new_time = results.get("execution_time", 0)
            old_time = original_results.get("execution_time", 0)
            print(f"\n‚ö° Comparaison des performances:")
            print(f"   ‚Ä¢ Nouveau pipeline: {new_time:.2f}s")
            print(f"   ‚Ä¢ Pipeline original: {old_time:.2f}s")
            
    except Exception as e:
        print(f"‚ùå Erreur test compatibilit√©: {e}")


async def demo_orchestration_comparison():
    """D√©monstration de la comparaison d'approches d'orchestration."""
    print_header("D√©monstration - Comparaison des Approches d'Orchestration")
    
    text = EXAMPLE_TEXTS["comprehensive"]
    approaches = ["pipeline", "hierarchical", "specialized", "hybrid"]
    
    print(f"üìä Comparaison des approches: {', '.join(approaches)}")
    print("üîÑ Lancement des analyses comparatives...")
    
    try:
        comparison = await compare_orchestration_approaches(text, approaches)
        
        print("\nüìä R√©sultats de la comparaison:")
        print(f"   ‚Ä¢ Texte analys√©: {comparison['text']}")
        
        # R√©sultats par approche
        for approach, results in comparison["approaches"].items():
            status = results.get("status", "unknown")
            exec_time = results.get("execution_time", 0)
            
            if status == "success":
                print(f"   ‚Ä¢ {approach}: ‚úÖ {exec_time:.2f}s")
                
                # D√©tails de l'orchestration
                summary = results.get("summary", {})
                active_components = [k for k, v in summary.items() if v]
                if active_components:
                    print(f"     ‚îî‚îÄ Composants actifs: {', '.join(active_components)}")
            else:
                error = results.get("error", "Erreur inconnue")
                print(f"   ‚Ä¢ {approach}: ‚ùå {error}")
        
        # Recommandations de la comparaison
        comp_results = comparison.get("comparison", {})
        if comp_results:
            print("\nüèÜ R√©sultats comparatifs:")
            fastest = comp_results.get("fastest")
            most_comprehensive = comp_results.get("most_comprehensive")
            
            if fastest:
                print(f"   ‚Ä¢ Approche la plus rapide: {fastest}")
            if most_comprehensive:
                print(f"   ‚Ä¢ Approche la plus compl√®te: {most_comprehensive}")
        
        # Recommandations g√©n√©rales
        recommendations = comparison.get("recommendations", [])
        if recommendations:
            print("\nüí° Recommandations:")
            for rec in recommendations:
                print(f"   ‚Ä¢ {rec}")
                
    except Exception as e:
        print(f"‚ùå Erreur comparaison: {e}")


async def demo_custom_analysis():
    """D√©monstration d'une analyse personnalis√©e."""
    print_header("D√©monstration - Analyse Personnalis√©e")
    
    # Configuration personnalis√©e avanc√©e
    config = ExtendedOrchestrationConfig(
        analysis_modes=["informal", "unified"],
        orchestration_mode=OrchestrationMode.ADAPTIVE_HYBRID,
        analysis_type=AnalysisType.DEBATE_ANALYSIS,
        enable_hierarchical=True,
        enable_specialized_orchestrators=True,
        auto_select_orchestrator=True,
        max_concurrent_analyses=3,
        analysis_timeout=60,
        save_orchestration_trace=True,
        specialized_orchestrator_priority=["conversation", "cluedo", "real_llm"]
    )
    
    text = EXAMPLE_TEXTS["debate"]
    
    print("üéØ Analyse de d√©bat avec configuration hybride adaptative...")
    print(f"üìù Texte: {text[:150]}...")
    
    try:
        results = await run_unified_orchestration_pipeline(text, config)
        print_results_summary(results, "Analyse Personnalis√©e - D√©bat")
        
        # Affichage des d√©tails de configuration
        metadata = results.get("metadata", {})
        print(f"\n‚öôÔ∏è Configuration utilis√©e:")
        print(f"   ‚Ä¢ Mode d'orchestration: {metadata.get('orchestration_mode')}")
        print(f"   ‚Ä¢ Type d'analyse: {metadata.get('analysis_type')}")
        
        # Trace d'orchestration si disponible
        trace = results.get("orchestration_trace", [])
        strategic_events = [e for e in trace if "strategic" in e.get("event_type", "")]
        specialized_events = [e for e in trace if "specialized" in e.get("event_type", "")]
        
        if strategic_events or specialized_events:
            print(f"\nüìã Activit√© d'orchestration:")
            print(f"   ‚Ä¢ √âv√©nements strat√©giques: {len(strategic_events)}")
            print(f"   ‚Ä¢ √âv√©nements sp√©cialis√©s: {len(specialized_events)}")
            
    except Exception as e:
        print(f"‚ùå Erreur analyse personnalis√©e: {e}")


async def run_full_demo():
    """Lance la d√©monstration compl√®te."""
    print_header("D√âMONSTRATION COMPL√àTE DU PIPELINE D'ORCHESTRATION UNIFI√â", "=", 80)
    
    if not ORCHESTRATION_AVAILABLE:
        print("‚ùå Le pipeline d'orchestration n'est pas disponible.")
        print("   V√©rifiez que tous les modules requis sont install√©s.")
        return
    
    print("üöÄ D√©marrage de la d√©monstration compl√®te...")
    print("   Cette d√©monstration pr√©sente les diff√©rentes capacit√©s du nouveau pipeline.")
    
    demos = [
        demo_basic_usage,
        demo_hierarchical_orchestration,
        demo_specialized_orchestrators,
        demo_api_compatibility,
        demo_orchestration_comparison,
        demo_custom_analysis
    ]
    
    total_start = time.time()
    
    for i, demo in enumerate(demos, 1):
        print(f"\nüìç D√©monstration {i}/{len(demos)}: {demo.__name__.replace('demo_', '').replace('_', ' ').title()}")
        
        try:
            await demo()
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è D√©monstration interrompue par l'utilisateur.")
            break
        except Exception as e:
            print(f"‚ùå Erreur lors de la d√©monstration {demo.__name__}: {e}")
            continue
        
        if i < len(demos):
            print("\n‚è±Ô∏è Appuyez sur Entr√©e pour continuer vers la d√©monstration suivante...")
            input()
    
    total_time = time.time() - total_start
    print(f"\nüèÅ D√©monstration compl√®te termin√©e en {total_time:.1f}s")
    print("   Merci d'avoir test√© le pipeline d'orchestration unifi√© !")


async def run_specific_demo(mode: str, analysis_type: str, text: str = None):
    """Lance une d√©monstration sp√©cifique."""
    print_header(f"D√©monstration Sp√©cifique - {mode.upper()}")
    
    if not text:
        # S√©lectionner un texte appropri√© selon le type d'analyse
        text_mapping = {
            "rhetorical": "rhetorical",
            "logical": "logical",
            "investigative": "investigative",
            "fallacy_focused": "fallacy_focused",
            "debate_analysis": "debate",
            "comprehensive": "comprehensive"
        }
        text_key = text_mapping.get(analysis_type, "comprehensive")
        text = EXAMPLE_TEXTS[text_key]
    
    try:
        # Mapper les param√®tres vers les √©num√©rations
        mode_mapping = {
            "auto_select": OrchestrationMode.AUTO_SELECT,
            "hierarchical": OrchestrationMode.HIERARCHICAL_FULL,
            "hierarchical_full": OrchestrationMode.HIERARCHICAL_FULL,
            "strategic_only": OrchestrationMode.STRATEGIC_ONLY,
            "tactical_coordination": OrchestrationMode.TACTICAL_COORDINATION,
            "operational_direct": OrchestrationMode.OPERATIONAL_DIRECT,
            "cluedo_investigation": OrchestrationMode.CLUEDO_INVESTIGATION,
            "logic_complex": OrchestrationMode.LOGIC_COMPLEX,
            "adaptive_hybrid": OrchestrationMode.ADAPTIVE_HYBRID,
            "pipeline": OrchestrationMode.PIPELINE,
            "real": OrchestrationMode.REAL,
            "conversation": OrchestrationMode.CONVERSATION
        }
        
        type_mapping = {
            "comprehensive": AnalysisType.COMPREHENSIVE,
            "rhetorical": AnalysisType.RHETORICAL,
            "logical": AnalysisType.LOGICAL,
            "investigative": AnalysisType.INVESTIGATIVE,
            "fallacy_focused": AnalysisType.FALLACY_FOCUSED,
            "argument_structure": AnalysisType.ARGUMENT_STRUCTURE,
            "debate_analysis": AnalysisType.DEBATE_ANALYSIS,
            "custom": AnalysisType.CUSTOM
        }
        
        orchestration_mode = mode_mapping.get(mode.lower(), OrchestrationMode.AUTO_SELECT)
        analysis_type_enum = type_mapping.get(analysis_type.lower(), AnalysisType.COMPREHENSIVE)
        
        config = ExtendedOrchestrationConfig(
            orchestration_mode=orchestration_mode,
            analysis_type=analysis_type_enum,
            enable_hierarchical=True,
            enable_specialized_orchestrators=True,
            save_orchestration_trace=True
        )
        
        print(f"üéØ Mode d'orchestration: {orchestration_mode.value}")
        print(f"üìä Type d'analyse: {analysis_type_enum.value}")
        print(f"üìù Texte: {text[:100]}...")
        
        print("\nüîÑ Lancement de l'analyse...")
        
        results = await run_unified_orchestration_pipeline(text, config)
        print_results_summary(results, f"D√©monstration - {mode.title()}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration sp√©cifique: {e}")


def main():
    """Point d'entr√©e principal du script."""
    parser = argparse.ArgumentParser(
        description="D√©monstration du Pipeline d'Orchestration Unifi√©",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  %(prog)s                                    # D√©monstration compl√®te
  %(prog)s --mode hierarchical_full           # Mode hi√©rarchique complet
  %(prog)s --type investigative               # Analyse investigative
  %(prog)s --mode cluedo --type investigative # Investigation Cluedo
  %(prog)s --compare                          # Comparaison des approches
  %(prog)s --text "Votre texte"               # Texte personnalis√©
        """
    )
    
    parser.add_argument(
        "--mode", 
        choices=[
            "auto_select", "hierarchical_full", "strategic_only", "tactical_coordination", 
            "operational_direct", "cluedo_investigation", "logic_complex", "adaptive_hybrid",
            "pipeline", "real", "conversation"
        ],
        default=None,
        help="Mode d'orchestration √† utiliser"
    )
    
    parser.add_argument(
        "--type",
        choices=[
            "comprehensive", "rhetorical", "logical", "investigative", 
            "fallacy_focused", "argument_structure", "debate_analysis", "custom"
        ],
        default="comprehensive",
        help="Type d'analyse √† effectuer"
    )
    
    parser.add_argument(
        "--text",
        type=str,
        default=None,
        help="Texte personnalis√© √† analyser"
    )
    
    parser.add_argument(
        "--compare",
        action="store_true",
        help="Lancer une comparaison des diff√©rentes approches d'orchestration"
    )
    
    parser.add_argument(
        "--verbose",
        action="store_true",
        help="Affichage verbeux avec logs d√©taill√©s"
    )
    
    args = parser.parse_args()
    
    # Configuration du logging
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # V√©rification de la disponibilit√©
    if not ORCHESTRATION_AVAILABLE:
        print("‚ùå Erreur: Le pipeline d'orchestration unifi√© n'est pas disponible.")
        print("   V√©rifiez que tous les modules et d√©pendances sont correctement install√©s.")
        return 1
    
    # Ex√©cution selon les arguments
    try:
        if args.compare:
            # Comparaison des approches
            text = args.text or EXAMPLE_TEXTS["comprehensive"]
            asyncio.run(compare_orchestration_approaches(text))
            
        elif args.mode:
            # D√©monstration sp√©cifique
            asyncio.run(run_specific_demo(args.mode, args.type, args.text))
            
        else:
            # D√©monstration compl√®te
            asyncio.run(run_full_demo())
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è D√©monstration interrompue par l'utilisateur.")
        return 0
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())