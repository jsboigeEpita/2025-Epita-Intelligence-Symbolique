# core/jvm_setup.py
# import jpype # Comment√© pour d√©placer l'import dans les fonctions
# try:
#     import jpype.imports # Comment√© √©galement
# except (ImportError, ModuleNotFoundError):
#     pass
import os
import pathlib
import platform
import logging
from typing import Optional
# import requests # Supprim√© car download_tweety_jars est retir√©
# import urllib.request # Supprim√© car download_tweety_jars est retir√©
# from tqdm import tqdm # Supprim√© car download_tweety_jars est retir√©
import stat # Ajout pour chmod (Linux/Mac)
import shutil # Ajout pour shutil.which
import zipfile # Ajout pour l'extraction du JDK portable
import sys # Pour platform.system si non global, d√©j√† import√© via platform

from argumentation_analysis.paths import LIBS_DIR, PROJECT_ROOT_DIR # Ajout de PROJECT_ROOT_DIR


logger = logging.getLogger("Orchestration.JPype")
# Assurer logger configur√©
if not logger.handlers and not logger.propagate:
    handler = logging.StreamHandler(); formatter = logging.Formatter('%(asctime)s [%(levelname)s] [%(name)s] %(message)s', datefmt='%H:%M:%S'); handler.setFormatter(formatter); logger.addHandler(handler); logger.setLevel(logging.INFO)

MIN_JAVA_VERSION = 15
TWEETY_VERSION = "1.28" # Version de Tweety √† t√©l√©charger

PORTABLE_JDK_DOWNLOAD_URL = "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_x64_windows_hotspot_17.0.15_6.zip"

# Les fonctions suivantes li√©es au t√©l√©chargement des JARs Tweety (download_tweety_jars,
# _download_file_with_progress, et la classe TqdmUpTo) sont supprim√©es de ce fichier.
# La logique de t√©l√©chargement est maintenant suppos√©e √™tre g√©r√©e en dehors de l'initialisation
# de la JVM pour les tests, par exemple via un script de setup s√©par√© ou manuellement.
# La fixture `ensure_tweety_libs` dans `tests/conftest.py` v√©rifiera la pr√©sence des libs.

PORTABLE_JDK_DIR_NAME = "portable_jdk"
PORTABLE_JDK_ZIP_NAME = "OpenJDK17U-jdk_x64_windows_hotspot_17.0.15_6_new.zip"
TEMP_DIR_NAME = "_temp"

def _extract_portable_jdk(project_root: pathlib.Path, portable_jdk_parent_dir: pathlib.Path, portable_jdk_zip_path: pathlib.Path) -> Optional[pathlib.Path]:
    """
    Extrait le JDK portable de l'archive ZIP vers le r√©pertoire portable_jdk.
    Retourne le chemin vers le dossier racine du JDK extrait (ex: portable_jdk/jdk-17.0.15+6) ou None si √©chec.
    """
    logger.info(f"Tentative d'extraction du JDK portable depuis '{portable_jdk_zip_path}' vers '{portable_jdk_parent_dir}'...")
    try:
        with zipfile.ZipFile(portable_jdk_zip_path, 'r') as zip_ref:
            zip_ref.extractall(portable_jdk_parent_dir)
        logger.info(f"JDK portable extrait avec succ√®s dans '{portable_jdk_parent_dir}'.")

        for item in portable_jdk_parent_dir.iterdir():
            if item.is_dir() and item.name.startswith("jdk-"):
                logger.info(f"Dossier racine du JDK portable d√©tect√© : '{item}'")
                return item
        logger.warning(f"Impossible de d√©terminer le dossier racine du JDK dans '{portable_jdk_parent_dir}' apr√®s extraction. Recherche d'un dossier 'jdk-*' a √©chou√©.")
        extracted_items = [d for d in portable_jdk_parent_dir.iterdir() if d.is_dir()]
        if len(extracted_items) == 1:
            logger.info(f"Un seul dossier trouv√© apr√®s extraction: '{extracted_items[0]}', en supposant que c'est le JDK.")
            return extracted_items[0]
        
        return None
    except FileNotFoundError:
        logger.error(f"L'archive ZIP du JDK portable '{portable_jdk_zip_path}' n'a pas √©t√© trouv√©e.")
        return None
    except zipfile.BadZipFile:
        logger.error(f"L'archive ZIP du JDK portable '{portable_jdk_zip_path}' est corrompue.")
        return None
    except Exception as e:
        logger.error(f"Erreur lors de l'extraction du JDK portable: {e}", exc_info=True)
        return None

# --- Fonction de d√©tection JAVA_HOME (modifi√©e pour prioriser Java >= MIN_JAVA_VERSION et utiliser _download_file_with_progress pour le JDK) ---
# Note: _download_file_with_progress est maintenant retir√©, donc la logique de t√©l√©chargement du JDK portable
# devra √™tre assur√©e par un m√©canisme externe si l'archive ZIP n'est pas pr√©sente.
def find_valid_java_home() -> Optional[str]:
    logger.debug(f"D√©but recherche r√©pertoire Java Home valide (priorit√© Java >= {MIN_JAVA_VERSION})...")
    
    system = platform.system()
    exe_suffix = ".exe" if system == "Windows" else ""

    # Chemins relatifs au projet
    project_root = PROJECT_ROOT_DIR # Assurez-vous que PROJECT_ROOT_DIR est d√©fini dans paths.py
    portable_jdk_parent_dir = project_root / PORTABLE_JDK_DIR_NAME
    portable_jdk_zip_path = project_root / TEMP_DIR_NAME / PORTABLE_JDK_ZIP_NAME

    # 0. V√©rifier le JDK portable int√©gr√©
    logger.info(f"V√©rification du JDK portable int√©gr√© dans '{portable_jdk_parent_dir}'...")
    
    # Chercher un dossier JDK existant (ex: jdk-17.0.15+6)
    potential_jdk_root_dir = None
    if portable_jdk_parent_dir.is_dir():
        for item in portable_jdk_parent_dir.iterdir():
            if item.is_dir() and item.name.startswith("jdk-"): # Heuristique pour trouver le dossier JDK
                java_exe_portable = item / "bin" / f"java{exe_suffix}"
                if java_exe_portable.is_file():
                    logger.info(f"JDK portable trouv√© et valide dans: '{item}'")
                    potential_jdk_root_dir = item
                    break # Premier trouv√© suffit
    
    if potential_jdk_root_dir:
        logger.info(f"üéâ Utilisation du JDK portable int√©gr√©: '{potential_jdk_root_dir}'")
        return str(potential_jdk_root_dir.resolve())

    # Si le JDK portable n'est pas trouv√© extrait, mais que l'archive ZIP existe, tenter de l'extraire
    logger.info(f"JDK portable non trouv√© dans '{portable_jdk_parent_dir}'. V√©rification de l'archive ZIP '{portable_jdk_zip_path}'...")
    if portable_jdk_zip_path.is_file():
        logger.info(f"Archive ZIP du JDK portable trouv√©e. Tentative d'extraction...")
        # S'assurer que le r√©pertoire parent pour l'extraction existe
        portable_jdk_parent_dir.mkdir(parents=True, exist_ok=True)
        
        extracted_jdk_root = _extract_portable_jdk(project_root, portable_jdk_parent_dir, portable_jdk_zip_path)
        
        if extracted_jdk_root:
            java_exe_portable = extracted_jdk_root / "bin" / f"java{exe_suffix}"
            if java_exe_portable.is_file():
                logger.info(f"üéâ JDK portable extrait et valid√© avec succ√®s: '{extracted_jdk_root}'. Utilisation.")
                # Optionnel: supprimer l'archive ZIP apr√®s extraction r√©ussie
                # try:
                #     portable_jdk_zip_path.unlink()
                #     logger.info(f"Archive ZIP '{portable_jdk_zip_path.name}' supprim√©e apr√®s extraction.")
                # except OSError as e_unlink:
                #     logger.warning(f"Impossible de supprimer l'archive ZIP '{portable_jdk_zip_path.name}': {e_unlink}")
                return str(extracted_jdk_root.resolve())
            else:
                logger.error(f"JDK portable extrait dans '{extracted_jdk_root}', mais 'bin/java{exe_suffix}' non trouv√©.")
        else:
            logger.error(f"√âchec de l'extraction ou de la validation du JDK portable depuis '{portable_jdk_zip_path}'.")
    else:
        logger.info(f"Archive ZIP du JDK portable '{portable_jdk_zip_path.name}' non trouv√©e. Tentative de t√©l√©chargement...")
        # S'assurer que le r√©pertoire _temp existe
        temp_dir = project_root / TEMP_DIR_NAME
        temp_dir.mkdir(parents=True, exist_ok=True)

        # La logique de t√©l√©chargement du JDK portable a √©t√© retir√©e car _download_file_with_progress a √©t√© retir√©.
        # On suppose maintenant que l'archive ZIP du JDK est soit d√©j√† pr√©sente, soit g√©r√©e par un processus externe.
        logger.warning(f"Logique de t√©l√©chargement du JDK portable d√©sactiv√©e dans find_valid_java_home. L'archive '{portable_jdk_zip_path.name}' doit √™tre pr√©sente manuellement si n√©cessaire.")
        # jdk_downloaded, _ = _download_file_with_progress( # Appel original comment√©
        #     PORTABLE_JDK_DOWNLOAD_URL,
        #     portable_jdk_zip_path,
        #     description="JDK Portable (OpenJDK 17.0.15+6)"
        # )
        # Pour simuler l'√©chec du t√©l√©chargement si le fichier n'est pas l√† :
        jdk_downloaded = portable_jdk_zip_path.is_file()


        if jdk_downloaded: # Condition simplifi√©e: si le fichier existe (ou aurait √©t√© t√©l√©charg√©)
            logger.info(f"JDK portable t√©l√©charg√© avec succ√®s : '{portable_jdk_zip_path}'. Tentative d'extraction...")
            # S'assurer que le r√©pertoire parent pour l'extraction existe
            portable_jdk_parent_dir.mkdir(parents=True, exist_ok=True)
            extracted_jdk_root = _extract_portable_jdk(project_root, portable_jdk_parent_dir, portable_jdk_zip_path)
            if extracted_jdk_root:
                java_exe_portable = extracted_jdk_root / "bin" / f"java{exe_suffix}"
                if java_exe_portable.is_file():
                    logger.info(f"üéâ JDK portable t√©l√©charg√©, extrait et valid√© avec succ√®s: '{extracted_jdk_root}'. Utilisation.")
                    return str(extracted_jdk_root.resolve())
                else:
                    logger.error(f"JDK portable t√©l√©charg√© et extrait dans '{extracted_jdk_root}', mais 'bin/java{exe_suffix}' non trouv√©.")
            else:
                logger.error(f"√âchec de l'extraction ou de la validation du JDK portable apr√®s t√©l√©chargement depuis '{portable_jdk_zip_path}'.")
        else:
            logger.error(f"√âchec du t√©l√©chargement du JDK portable depuis '{PORTABLE_JDK_DOWNLOAD_URL}'. Le JDK portable ne sera pas utilis√©.")

    # Si le JDK portable n'est pas utilis√©, continuer avec la logique existante
    logger.info("Poursuite avec la d√©tection standard de JAVA_HOME (variables d'environnement, heuristiques syst√®me)...")
    exe_suffix = ".exe" if system == "Windows" else ""
    # Stocke un JAVA_HOME valide trouv√© dans l'env, mais qui ne correspond pas √† MIN_JAVA_VERSION (pour fallback)
    java_home_from_env_fallback: Optional[str] = None
    
    # Chemin sp√©cifique prioritaire pour Java 21 (car mentionn√© comme disponible sur le syst√®me cible)
    # Cela peut √™tre adapt√© ou supprim√© si une d√©tection plus g√©n√©rique est pr√©f√©r√©e.
    specific_java_21_path_str = "C:\\Program Files\\Java\\jdk-21"
    specific_java_21_path = pathlib.Path(specific_java_21_path_str)

    # 0. V√©rifier le chemin sp√©cifique prioris√© pour Java 21 (ou autre version >= MIN_JAVA_VERSION si pertinent)
    if system == "Windows" and specific_java_21_path.is_dir():
        java_exe_specific = specific_java_21_path / "bin" / f"java{exe_suffix}"
        if java_exe_specific.is_file():
            # Ici, on pourrait ajouter une v√©rification de version si le chemin n'est pas garanti >= MIN_JAVA_VERSION
            logger.info(f"üéâ Java >= {MIN_JAVA_VERSION} (sp√©cifiquement Java 21) trouv√© au chemin prioris√©: '{specific_java_21_path_str}'. Utilisation.")
            return str(specific_java_21_path)
        else:
            logger.info(f"‚ÑπÔ∏è Chemin sp√©cifique Java 21 '{specific_java_21_path_str}' existe mais 'bin/java{exe_suffix}' non trouv√©.")
    elif system == "Windows":
        logger.info(f"‚ÑπÔ∏è Chemin sp√©cifique Java 21 '{specific_java_21_path_str}' non trouv√© ou n'est pas un dossier.")

    # 1. V√©rifier la variable d'environnement JAVA_HOME
    java_home_env_var = os.getenv("JAVA_HOME")
    if java_home_env_var:
        logger.info(f"‚ÑπÔ∏è Variable JAVA_HOME trouv√©e: '{java_home_env_var}'")
        java_home_path = pathlib.Path(java_home_env_var)
        if java_home_path.is_dir():
            java_exe = java_home_path / "bin" / f"java{exe_suffix}"
            if java_exe.is_file():
                logger.info(f"‚úîÔ∏è JAVA_HOME ('{java_home_env_var}') pointe vers une installation Java avec 'bin/java'.")
                # Tentative de d√©duire la version √† partir du nom du chemin
                # C'est une heuristique et pourrait n√©cessiter d'ex√©cuter `java -version` pour une certitude
                path_name_lower = java_home_path.name.lower()
                version_in_name = -1
                try:
                    # Cherche des nombres comme "15", "17", "21" dans le nom du dossier
                    import re
                    match = re.search(r'(?:jdk-|java-|openjdk-)?(\d+)', path_name_lower)
                    if match:
                        version_in_name = int(match.group(1))
                except: # noqa
                    pass # Ignorer les erreurs de parsing, version_in_name restera -1

                if version_in_name >= MIN_JAVA_VERSION:
                    logger.info(f"üéâ JAVA_HOME ('{java_home_env_var}') semble √™tre une version Java >= {MIN_JAVA_VERSION} (version {version_in_name} d√©duite). Utilisation prioritaire.")
                    return str(java_home_path)
                elif version_in_name != -1 : # Version d√©duite mais < MIN_JAVA_VERSION
                    logger.info(f"   JAVA_HOME ('{java_home_env_var}') est valide (version {version_in_name} d√©duite) mais < {MIN_JAVA_VERSION}. Conserv√© comme fallback.")
                    java_home_from_env_fallback = str(java_home_path)
                else: # Impossible de d√©duire la version, on suppose qu'elle pourrait √™tre bonne si l'utilisateur l'a mise
                    logger.info(f"   JAVA_HOME ('{java_home_env_var}') est valide, version non d√©duite du nom. On suppose qu'elle est >= {MIN_JAVA_VERSION} si d√©finie par l'utilisateur.")
                    # On pourrait ici ajouter une v√©rification r√©elle de la version si n√©cessaire,
                    # mais pour l'instant, on fait confiance √† l'utilisateur s'il a d√©fini JAVA_HOME.
                    # Si on veut √™tre strict, on ne le retourne que si on peut confirmer la version.
                    # Pour l'instant, on le retourne, en priorisant les d√©tections explicites.
                    # Si on veut √™tre plus strict, on le mettrait dans java_home_from_env_fallback
                    # et on ne le retournerait que si aucune autre option >= MIN_JAVA_VERSION n'est trouv√©e.
                    # Pour l'instant, on le retourne directement.
                    return str(java_home_path) # Optionnel: √™tre plus strict et le mettre en fallback
            else:
                logger.warning(f"‚ö†Ô∏è JAVA_HOME ('{java_home_env_var}') trouv√© mais 'bin/java{exe_suffix}' non trouv√© ou n'est pas un fichier.")
        else:
            logger.warning(f"‚ö†Ô∏è JAVA_HOME ('{java_home_env_var}') n'est pas un dossier valide.")
    else:
        logger.info(f"‚ÑπÔ∏è Variable d'environnement JAVA_HOME non d√©finie.")

    # 2. Tentative de d√©tection via heuristiques sp√©cifiques √† l'OS
    logger.info(f"‚ÑπÔ∏è Tentative de d√©tection via heuristiques (priorit√© Java >= {MIN_JAVA_VERSION}, apr√®s JAVA_HOME et chemin sp√©cifique)...")
    potential_homes_dirs = []
    
    # Logique de collecte des chemins potentiels (inchang√©e pour la collecte, le filtrage se fera apr√®s)
    if system == "Windows":
        logger.debug("-> Recherche Windows...")
        program_files_paths_str = [os.getenv("ProgramFiles", "C:/Program Files"),
                                   os.getenv("ProgramFiles(x86)", "C:/Program Files (x86)")]
        # Ajout de "GraalVM" qui peut fournir des JDKs
        vendors = ["Java", "OpenJDK", "Eclipse Adoptium", "Amazon Corretto", "Microsoft", "Semeru", "Azul Systems", "BellSoft", "RedHat", "GraalVM"]
        for pf_path_str in filter(None, program_files_paths_str):
            pf_path = pathlib.Path(pf_path_str)
            for vendor in vendors:
                vendor_dir = pf_path / vendor
                if vendor_dir.is_dir():
                    logger.debug(f"  Scan du dossier: {vendor_dir}")
                    potential_homes_dirs.extend(vendor_dir.glob("jdk*"))
                    potential_homes_dirs.extend(vendor_dir.glob("jre*"))
                    potential_homes_dirs.extend(vendor_dir.glob("zulu*"))
                    potential_homes_dirs.extend(vendor_dir.glob("corretto*"))
                    potential_homes_dirs.extend(vendor_dir.glob("semeru*"))
                    potential_homes_dirs.extend(vendor_dir.glob("liberica*"))
                    potential_homes_dirs.extend(vendor_dir.glob("graalvm*")) # Pour GraalVM

    elif system == "Darwin": # macOS
        logger.debug("-> Recherche macOS...")
        mac_paths_str = ["/Library/Java/JavaVirtualMachines",
                         os.path.expanduser("~/Library/Java/JavaVirtualMachines")]
        for brew_prefix in ["/opt/homebrew", "/usr/local"]: # Homebrew paths
            if os.path.exists(f"{brew_prefix}/opt"): mac_paths_str.append(f"{brew_prefix}/opt")
            if os.path.exists(f"{brew_prefix}/Cellar"):
                cellar_path = pathlib.Path(f"{brew_prefix}/Cellar")
                potential_homes_dirs.extend(cellar_path.glob("openjdk*/*"))
                potential_homes_dirs.extend(cellar_path.glob("java*/*"))
                potential_homes_dirs.extend(cellar_path.glob("graalvm-ce-java*/*")) # GraalVM via Homebrew

        for base_path_str in mac_paths_str:
            base_path_p = pathlib.Path(base_path_str)
            if base_path_p.is_dir():
                logger.debug(f"  Scan du dossier: {base_path_p}")
                potential_homes_dirs.extend(base_path_p.glob("*.jdk"))
                potential_homes_dirs.extend(base_path_p.glob("openjdk*"))
                potential_homes_dirs.extend(base_path_p.glob("zulu*"))
                potential_homes_dirs.extend(base_path_p.glob("corretto*"))
                potential_homes_dirs.extend(base_path_p.glob("semeru*"))
                potential_homes_dirs.extend(base_path_p.glob("liberica*"))
                potential_homes_dirs.extend(base_path_p.glob("graalvm*"))
                for jdk_path in base_path_p.glob("*.jdk"):
                    if (jdk_path / "Contents" / "Home").is_dir():
                        potential_homes_dirs.append(jdk_path / "Contents" / "Home")
                for opt_path in base_path_p.glob("openjdk*"):
                    if (opt_path / "libexec" / "openjdk.jdk" / "Contents" / "Home").is_dir():
                        potential_homes_dirs.append(opt_path / "libexec" / "openjdk.jdk" / "Contents" / "Home")
                    elif (opt_path / "Contents" / "Home").is_dir():
                         potential_homes_dirs.append(opt_path / "Contents" / "Home")
                # GraalVM peut aussi avoir une structure Contents/Home
                for graal_path in base_path_p.glob("graalvm*"):
                     if (graal_path / "Contents" / "Home").is_dir():
                        potential_homes_dirs.append(graal_path / "Contents" / "Home")


    elif system == "Linux":
        logger.debug("-> Recherche Linux...")
        linux_paths_str = ["/usr/lib/jvm", "/usr/java", "/opt/java", "/usr/local/lib/jvm", "/opt/jdk", "/opt/jdks", "/opt/graalvm"]
        for base_path_str in linux_paths_str:
            base_path_p = pathlib.Path(base_path_str)
            if base_path_p.is_dir():
                logger.debug(f"  Scan du dossier: {base_path_p}")
                potential_homes_dirs.extend(base_path_p.glob("java-*"))
                potential_homes_dirs.extend(base_path_p.glob("jdk*"))
                potential_homes_dirs.extend(base_path_p.glob("jre*"))
                potential_homes_dirs.extend(base_path_p.glob("openjdk*"))
                potential_homes_dirs.extend(base_path_p.glob("zulu*"))
                potential_homes_dirs.extend(base_path_p.glob("corretto*"))
                potential_homes_dirs.extend(base_path_p.glob("semeru*"))
                potential_homes_dirs.extend(base_path_p.glob("liberica*"))
                potential_homes_dirs.extend(base_path_p.glob("graalvm*"))


    unique_potential_homes = sorted(list(set(p for p in potential_homes_dirs if p.is_dir())), key=lambda p: p.name, reverse=True)

    if unique_potential_homes:
        logger.info(f"  {len(unique_potential_homes)} installations Java potentielles (uniques, dossiers) trouv√©es par heuristique.")
        
        suitable_java_candidates = [] # Candidats >= MIN_JAVA_VERSION
        other_valid_candidates = []   # Candidats valides mais < MIN_JAVA_VERSION (pour fallback)
        
        logger.info(f"  Filtrage et validation des candidats Java (recherche >= {MIN_JAVA_VERSION})...")
        for home_candidate_path in unique_potential_homes:
            actual_home = home_candidate_path
            # Ajustements sp√©cifiques OS (macOS .jdk, Homebrew, GraalVM)
            if system == "Darwin":
                if home_candidate_path.name.endswith(".jdk") and (home_candidate_path / "Contents" / "Home").is_dir():
                    actual_home = home_candidate_path / "Contents" / "Home"
                elif "Cellar" in str(home_candidate_path) and ("openjdk" in home_candidate_path.parent.name or "graalvm" in home_candidate_path.parent.name):
                    if (home_candidate_path / "libexec" / "openjdk.jdk" / "Contents" / "Home").is_dir(): # OpenJDK
                         actual_home = home_candidate_path / "libexec" / "openjdk.jdk" / "Contents" / "Home"
                    elif (home_candidate_path / "Contents" / "Home").is_dir(): # GraalVM ou autre
                         actual_home = home_candidate_path / "Contents" / "Home"
            
            java_exe = actual_home / "bin" / f"java{exe_suffix}"
            if java_exe.is_file():
                path_name_lower = actual_home.name.lower()
                version_in_name = -1
                try:
                    import re
                    # Regex am√©lior√©e pour extraire la version majeure (ex: jdk-17.0.1 -> 17, java-21-openjdk -> 21)
                    # Prend en compte les num√©ros seuls (11, 15, 21), ou avec pr√©fixe (jdk-17, openjdk-11)
                    # ou avec s√©parateurs (java-11-openjdk, corretto-17.0.3)
                    match = re.search(r'(?:jdk-|jre-|java-|openjdk-|corretto-|zulu-|semeru-|liberica-|graalvm-ce-java)?(\d{1,2})(?:[.\-_]|$)', path_name_lower)
                    if not match and "jdk" in path_name_lower: # Cas comme "jdk17" sans s√©parateur
                         match = re.search(r'jdk(\d+)', path_name_lower)
                    if match:
                        version_in_name = int(match.group(1))
                except: # noqa
                    pass

                if version_in_name >= MIN_JAVA_VERSION:
                    logger.debug(f"    -> Candidat Java >= {MIN_JAVA_VERSION} (version {version_in_name} d√©duite, avec bin/java) trouv√©: {actual_home}")
                    suitable_java_candidates.append(actual_home)
                elif version_in_name != -1: # Version d√©duite mais < MIN_JAVA_VERSION
                    logger.debug(f"    -> Candidat Java (version {version_in_name} d√©duite, < {MIN_JAVA_VERSION}, avec bin/java) trouv√©: {actual_home}. Conserv√© pour fallback.")
                    other_valid_candidates.append(actual_home)
                else: # Impossible de d√©duire, on ne le consid√®re pas prioritaire
                    logger.debug(f"    -> Candidat Java (version non d√©duite, avec bin/java) trouv√©: {actual_home}. Conserv√© pour fallback si aucune version >= {MIN_JAVA_VERSION} n'est trouv√©e.")
                    other_valid_candidates.append(actual_home) # Peut √™tre utilis√© en dernier recours
            else:
                logger.debug(f"    -> 'bin/java{exe_suffix}' non trouv√© dans {actual_home} (candidat ignor√©).")
        
        # Trier les candidats valides (>= MIN_JAVA_VERSION) par version (plus haute d'abord), puis par nom
        suitable_java_candidates.sort(key=lambda x: (
            int(re.search(r'(\d+)', x.name.lower()).group(1)) if re.search(r'(\d+)', x.name.lower()) else 0,
            x.name
        ), reverse=True)
        
        if suitable_java_candidates:
            selected_java = suitable_java_candidates[0]
            logger.info(f"üéâ Java >= {MIN_JAVA_VERSION} trouv√© par heuristique: '{selected_java}'. Utilisation.")
            return str(selected_java)
        else:
            logger.info(f"  Aucune installation Java >= {MIN_JAVA_VERSION} valide trouv√©e par heuristique.")
        
        # Fallback 1: Utiliser JAVA_HOME s'il √©tait valide mais < MIN_JAVA_VERSION (et pas d√©j√† retourn√©)
        if java_home_from_env_fallback:
            logger.info(f"‚úîÔ∏è JAVA_HOME ('{java_home_from_env_fallback}') √©tait valide (mais < {MIN_JAVA_VERSION}), utilisation en fallback (apr√®s heuristique Java >= {MIN_JAVA_VERSION}).")
            return java_home_from_env_fallback

        # Fallback 2: Utiliser une autre version valide (< MIN_JAVA_VERSION) trouv√©e par heuristique (la plus r√©cente par nom/version)
        if other_valid_candidates:
            other_valid_candidates.sort(key=lambda x: (
                int(re.search(r'(\d+)', x.name.lower()).group(1)) if re.search(r'(\d+)', x.name.lower()) else 0,
                x.name
            ), reverse=True)
            selected_other_home = other_valid_candidates[0]
            logger.info(f"‚úîÔ∏è Aucun Java >= {MIN_JAVA_VERSION} trouv√©, utilisation d'une autre version Java valide trouv√©e par heuristique: '{selected_other_home}'.")
            return str(selected_other_home)
        
        logger.warning(f"‚ö†Ô∏è Heuristique a trouv√© des dossiers Java mais aucun avec 'bin/java' valide (ni >= {MIN_JAVA_VERSION}, ni autre).")

    # Si aucune heuristique n'a rien donn√©, mais que JAVA_HOME √©tait valide (et < MIN_JAVA_VERSION, et pas d√©j√† retourn√©)
    elif java_home_from_env_fallback:
        logger.info(f"‚úîÔ∏è Aucune installation trouv√©e par heuristique, mais JAVA_HOME ('{java_home_from_env_fallback}') √©tait valide (< {MIN_JAVA_VERSION}). Utilisation.")
        return java_home_from_env_fallback
    else:
        logger.info(f"  Aucune installation Java trouv√©e via heuristiques et JAVA_HOME non d√©fini, non valide, ou d√©j√† trait√© comme non prioritaire.")

    logger.error(f"‚ùå Recherche finale: Aucun r√©pertoire Java Home valide n'a pu √™tre localis√© (Java >= {MIN_JAVA_VERSION} prioris√©, puis autres).")
    return None


# --- Fonction d'Initialisation JVM (modifi√©e pour appeler download_tweety_jars) ---
def initialize_jvm(
    lib_dir_path: str = LIBS_DIR,
    native_lib_subdir: str = "native",
    tweety_version: str = TWEETY_VERSION
    ) -> bool:
    import jpype # Importation locale
    try:
        import jpype.imports # Importation locale
    except (ImportError, ModuleNotFoundError):
        pass # G√©r√© comme avant
    logger.info("\n--- Pr√©paration et Initialisation de la JVM via JPype ---")
    # libs_ok = download_tweety_jars(version=tweety_version, target_dir=lib_dir_path, native_subdir=native_lib_subdir) # G√©r√© par la fixture ensure_tweety_libs
    libs_ok = True # Supposons que les libs sont OK car ensure_tweety_libs s'en est charg√©
    if not libs_ok:
        logger.error("‚ùå Probl√®me avec les fichiers Tweety (Core manquant?). D√©marrage JVM annul√©.")
        return False
    LIB_DIR = pathlib.Path(lib_dir_path)
    NATIVE_LIBS_DIR = LIB_DIR / native_lib_subdir
    jvm_ready = False
    logger.info(f"DEBUG_JVM_SETUP: Appel de jpype.isJVMStarted() au d√©but de initialize_jvm. R√©sultat: {jpype.isJVMStarted()}")
    if jpype.isJVMStarted():
        logger.warning("‚ÑπÔ∏è JVM d√©j√† d√©marr√©e (d√©tect√© au d√©but de initialize_jvm). Utilisation existante.")
        jvm_ready = True
        try:
            if hasattr(jpype, 'imports') and jpype.imports is not None:
                 jpype.imports.registerDomain("org", alias="org")
                 jpype.imports.registerDomain("java", alias="java")
                 jpype.imports.registerDomain("net", alias="net")
                 logger.info("   Domaines JPype (org, java, net) enregistr√©s (ou d√©j√† pr√©sents).")
            else:
                logger.warning("   jpype.imports non disponible pour enregistrer les domaines (possible si mock partiel).")
        except Exception: pass
        return True
    java_home_to_set = find_valid_java_home()
    if java_home_to_set and not os.getenv("JAVA_HOME"):
        try:
            os.environ['JAVA_HOME'] = java_home_to_set
            logger.info(f"‚úÖ JAVA_HOME d√©fini dynamiquement √† '{java_home_to_set}' pour cette session.")
        except Exception as e_setenv:
            logger.error(f"‚ùå Impossible de d√©finir JAVA_HOME dynamiquement: {e_setenv}")
    elif not java_home_to_set:
         logger.error("‚ùå JAVA_HOME non trouv√©. D√©marrage JVM impossible.")
         return False 
    jvm_path_final = None
    jvm_args = [] # D√©finir jvm_args ici pour qu'il soit toujours disponible pour le log d'erreur
    try:
        logger.info(f"‚è≥ Tentative de d√©marrage JVM...")
        try:
            jvm_path_final = jpype.getDefaultJVMPath()
            logger.info(f"   (Chemin JVM par d√©faut d√©tect√© par JPype: {jvm_path_final})")
        except jpype.JVMNotFoundException: # N√©cessite jpype import√©
            logger.warning("   (JPype n'a pas trouv√© de JVM par d√©faut - d√©pendra de JAVA_HOME)")
            jvm_path_final = None
        classpath_separator = os.pathsep
        # Construire la liste des JARs principaux depuis lib_dir_path (qui est LIB_DIR ici)
        main_jar_list = sorted([str(p.resolve()) for p in LIB_DIR.glob("*.jar")])
        logger.info(f"   JARs principaux trouv√©s dans '{LIB_DIR}': {len(main_jar_list)}")

        # Chemin vers les JARs de test
        # PROJECT_ROOT_DIR doit √™tre accessible ici (import√© depuis .paths)
        test_libs_dir_path_obj = PROJECT_ROOT_DIR / "argumentation_analysis" / "tests" / "resources" / "libs"
        test_jar_list = []
        if test_libs_dir_path_obj.is_dir():
            test_jar_list = sorted([str(p.resolve()) for p in test_libs_dir_path_obj.glob("*.jar")])
            logger.info(f"   JARs de test trouv√©s dans '{test_libs_dir_path_obj}': {len(test_jar_list)}")
        else:
            logger.info(f"   R√©pertoire des JARs de test '{test_libs_dir_path_obj}' non trouv√© ou non accessible.")

        # Combiner les listes de JARs, en donnant la priorit√© aux JARs de test
        main_jars_map = {pathlib.Path(p).name: p for p in main_jar_list}
        test_jars_map = {pathlib.Path(p).name: p for p in test_jar_list}
        
        # Inverser la priorit√©: les JARs principaux √©crasent les JARs de test pour les m√™mes noms.
        # Cela assure que nous utilisons les JARs de LIBS_DIR (PROJECT_ROOT/libs) s'ils existent.
        # final_jars_map = {**test_jars_map, **main_jars_map}
        # combined_jar_list_original = sorted(list(final_jars_map.values()))
        # logger.info(f"   Nombre total de JARs apr√®s fusion (priorit√© aux tests): {len(combined_jar_list_original)}")

        # Inverser la priorit√©: les JARs principaux √©crasent les JARs de test pour les m√™mes noms.
        # Cela assure que nous utilisons les JARs de LIBS_DIR (PROJECT_ROOT/libs) s'ils existent.
        final_jars_map = {**test_jars_map, **main_jars_map}
        
        combined_jar_list = sorted(list(final_jars_map.values()))
        logger.info(f"   Nombre total de JARs apr√®s fusion (priorit√© aux tests): {len(combined_jar_list)}")

        if not combined_jar_list:
             logger.error("‚ùå Aucun JAR trouv√© (ni principal, ni de test apr√®s fusion) pour le classpath ! D√©marrage annul√©.")
             return False
        
        # Construire la cha√Æne de classpath pour l'environnement et le log
        classpath_str_for_env_and_log = classpath_separator.join(combined_jar_list)
        logger.info(f"   Classpath combin√© construit ({len(combined_jar_list)} JARs). Valeur pour env: {classpath_str_for_env_and_log}")
        logger.debug(f"   CLASSPATH pour JVM (avant d√©finition env var): {classpath_str_for_env_and_log}")


        # D√©finir la variable d'environnement CLASSPATH
        try:
            os.environ['CLASSPATH'] = classpath_str_for_env_and_log
            logger.info(f"   Variable d'environnement CLASSPATH d√©finie.")
        except Exception as e_set_classpath_env:
            logger.error(f"   ‚ùå Impossible de d√©finir la variable d'environnement CLASSPATH: {e_set_classpath_env}")
            # Continuer quand m√™me, JPype pourrait la trouver via d'autres moyens ou le param√®tre direct

        # Gestion de java.library.path pour les biblioth√®ques natives
        # (Cette section vient des "Stashed changes" et est int√©gr√©e ici)
        # Priorit√© aux natives du lib_dir_path principal, puis celles des tests si diff√©rentes et pr√©sentes.
        # Cependant, initialize_jvm utilise NATIVE_LIBS_DIR qui est d√©riv√© de lib_dir_path.
        # Si les tests ont leurs propres natives dans un sous-dossier "native" de TEST_LIBS_DIR,
        # et que lib_dir_path pointe vers les libs principales, alors les natives des tests ne seraient pas prises.
        # Pour l'instant, on se fie √† NATIVE_LIBS_DIR calcul√© √† partir du lib_dir_path principal.
        # Si les tests n√©cessitent des natives sp√©cifiques qui ne sont PAS dans LIBS_DIR/native,
        # cela n√©cessitera une gestion plus complexe de java.library.path.
        # Le code actuel utilise NATIVE_LIBS_DIR qui est LIB_DIR / native_lib_subdir.
        # Si lib_dir_path est LIBS_DIR, alors NATIVE_LIBS_DIR est LIBS_DIR / "native".
        
        jvm_args = [] # Initialisation de jvm_args
        
        if NATIVE_LIBS_DIR.exists() and any(NATIVE_LIBS_DIR.iterdir()):
            native_path_arg = f"-Djava.library.path={NATIVE_LIBS_DIR.resolve()}"
            jvm_args.append(native_path_arg)
            logger.info(f"   Argument JVM natif ajout√©: {native_path_arg}")
        else:
            logger.info(f"   (Pas de biblioth√®ques natives trouv√©es dans '{NATIVE_LIBS_DIR.resolve()}', -Djava.library.path non ajout√©)")
        
        # Ajout des options de m√©moire pour la JVM
        jvm_memory_options = ["-Xms256m", "-Xmx512m"]
        jvm_args.extend(jvm_memory_options)
        logger.info(f"   Options de m√©moire JVM ajout√©es: {jvm_memory_options}")

        # Ajout des options de d√©bogage JPype
        # jpype_debug_options = ["-Djpype.debug=true", "-Djpype.trace=true"]
        # jvm_args.extend(jpype_debug_options)
        # logger.info(f"   Options de d√©bogage JPype ajout√©es: {jpype_debug_options}")
        logger.info(f"   Options de d√©bogage JPype D√âSACTIV√âES pour ce test.")

        # D√©terminer le chemin JVM √† utiliser explicitement bas√© sur java_home_to_set
        jvm_path_to_use_explicit: Optional[str] = None
        if java_home_to_set: # java_home_to_set est le r√©sultat de find_valid_java_home()
            _java_home_path = pathlib.Path(java_home_to_set)
            _system = platform.system()
            _jvm_dll_path: Optional[pathlib.Path] = None
            if _system == "Windows":
                _jvm_dll_path = _java_home_path / "bin" / "server" / "jvm.dll"
            elif _system == "Darwin": # macOS
                _jvm_dll_path = _java_home_path / "lib" / "server" / "libjvm.dylib"
                if not _jvm_dll_path.is_file() and (_java_home_path / "Contents" / "Home" / "lib" / "server" / "libjvm.dylib").is_file():
                     _jvm_dll_path = _java_home_path / "Contents" / "Home" / "lib" / "server" / "libjvm.dylib"
                elif not _jvm_dll_path.is_file():
                     _jvm_dll_path = _java_home_path / "jre" / "lib" / "server" / "libjvm.dylib"
            else: # Linux et autres
                _jvm_dll_path = _java_home_path / "lib" / "server" / "libjvm.so"
                if not _jvm_dll_path.is_file():
                    lib_server_paths = list((_java_home_path / "lib").glob("**/server/libjvm.so"))
                    if lib_server_paths:
                        _jvm_dll_path = lib_server_paths[0]
                    else:
                         jre_lib_server_paths = list((_java_home_path / "jre" / "lib").glob("**/server/libjvm.so"))
                         if jre_lib_server_paths:
                              _jvm_dll_path = jre_lib_server_paths[0]
            
            if _jvm_dll_path and _jvm_dll_path.is_file():
                jvm_path_to_use_explicit = str(_jvm_dll_path.resolve())
                logger.info(f"   Chemin JVM explicite d√©termin√© pour startJVM: {jvm_path_to_use_explicit}")
            else:
                logger.warning(f"   Impossible de construire un chemin JVM valide depuis JAVA_HOME '{java_home_to_set}' (chemin test√©: {_jvm_dll_path}). JPype utilisera sa d√©tection par d√©faut.")
        
        logger.info(f"DEBUG_JVM_SETUP: JAVA_HOME avant startJVM: {os.getenv('JAVA_HOME')}")
        logger.info(f"DEBUG_JVM_SETUP: Path avant startJVM: {os.getenv('PATH')}")
        logger.info(f"DEBUG_JVM_SETUP: CLASSPATH avant startJVM: {os.getenv('CLASSPATH')}")
        logger.info(f"DEBUG_JVM_SETUP: Tentative de d√©marrage avec jvm_path_to_use_explicit='{jvm_path_to_use_explicit}', classpath='{len(combined_jar_list)} JARs', args='{jvm_args}'")
        logger.info(f"DEBUG_JVM_SETUP: APPEL IMMINENT DE jpype.startJVM()")
        if jvm_path_to_use_explicit:
            jpype.startJVM(jvm_path_to_use_explicit, classpath=combined_jar_list, *jvm_args, convertStrings=False, ignoreUnrecognized=True)
        else:
            logger.warning("   Aucun chemin JVM explicite fourni √† startJVM, utilisation de la d√©tection interne de JPype.")
            jpype.startJVM(classpath=combined_jar_list, *jvm_args, convertStrings=False, ignoreUnrecognized=True)
        logger.info(f"DEBUG_JVM_SETUP: jpype.startJVM() APPEL√â. V√©rification avec jpype.isJVMStarted(): {jpype.isJVMStarted()}")
        if hasattr(jpype, 'imports') and jpype.imports is not None:
            try:
                jpype.imports.registerDomain("java", alias="java")
                jpype.imports.registerDomain("org", alias="org")
                jpype.imports.registerDomain("net", alias="net")
                jpype.imports.registerDomain("net.sf", alias="sf")
                jpype.imports.registerDomain("net.sf.tweety", alias="tweety")
                logger.info("‚úÖ JVM d√©marr√©e avec succ√®s et domaines (java, org, net, sf, tweety) enregistr√©s.")
                try:
                    logger.info(f"   Classpath rapport√© par jpype.getClassPath() juste apr√®s startJVM: {jpype.getClassPath()}")
                except Exception as e_cp:
                    logger.warning(f"   Impossible d'obtenir jpype.getClassPath() juste apr√®s startJVM: {e_cp}")
            except Exception as e_reg_domain_jvm_setup:
                logger.error(f"‚ùå Erreur lors de l'enregistrement des domaines JPype dans jvm_setup: {e_reg_domain_jvm_setup}")
        else:
            logger.warning("‚úÖ JVM d√©marr√©e mais jpype.imports non disponible pour enregistrer les domaines (possible si mock partiel).")
        jvm_ready = True
    except Exception as e:
        logger.critical(f"\n‚ùå‚ùå‚ùå Erreur D√©marrage JVM: {e} ‚ùå‚ùå‚ùå", exc_info=True)
        logger.critical(f"   V√©rifiez chemin JVM, classpath, versions JDK/JARs.")
        logger.info(f"   JAVA_HOME (d√©fini ou trouv√©): {os.getenv('JAVA_HOME', 'Non d√©fini')}")
        if jvm_path_final: logger.info(f"   Chemin JVM D√©faut JPype: {jvm_path_final}")
        logger.info(f"   Arguments JVM tent√©s: {jvm_args}")
        jvm_ready = False
    if not jvm_ready:
        logger.warning(f"\n‚ÄºÔ∏è‚ÄºÔ∏è JVM NON PR√äTE apr√®s tentative. L'agent PL √©chouera probablement. ‚ÄºÔ∏è‚ÄºÔ∏è")
    else:
        logger.info("\n‚úÖ JVM pr√™te pour utilisation.")
    logger.info("--- Fin Initialisation JVM ---")
    return jvm_ready

module_logger = logging.getLogger(__name__)
module_logger.debug("Module core.jvm_setup charg√© et modifi√© pour inclure t√©l√©chargement JARs.")