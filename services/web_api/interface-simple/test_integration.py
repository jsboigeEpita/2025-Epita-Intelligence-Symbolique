#!/usr/bin/env python3
"""
Script de test pour l'int√©gration ServiceManager dans l'interface simple.

Ce script teste que l'interface simple utilise vraiment le ServiceManager
pour l'analyse de sophismes au lieu des fallbacks simul√©s.
"""

import asyncio
import sys
import logging
from pathlib import Path

# Configuration des chemins
sys.path.insert(0, str(Path(__file__).resolve().parent.parent.parent))

from app import (
    ServiceManager, SERVICE_MANAGER_AVAILABLE, FALLACY_ANALYZERS_AVAILABLE,
    initialize_services, service_manager, _extract_fallacy_analysis
)

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] [Test] %(message)s'
)
logger = logging.getLogger(__name__)


async def test_service_manager_integration():
    """Test principal de l'int√©gration du ServiceManager."""
    logger.info("=== D√âBUT TEST INT√âGRATION SERVICEMANAGER ===")
    
    # 1. V√©rifier la disponibilit√© des imports
    logger.info(f"ServiceManager disponible: {SERVICE_MANAGER_AVAILABLE}")
    logger.info(f"Analyseurs de sophismes disponibles: {FALLACY_ANALYZERS_AVAILABLE}")
    
    if not SERVICE_MANAGER_AVAILABLE:
        logger.error("ServiceManager non disponible - abandon du test")
        return False
    
    # 2. Test d'initialisation des services
    logger.info("Test d'initialisation des services...")
    try:
        await initialize_services()
        if service_manager:
            logger.info("‚úÖ ServiceManager initialis√© avec succ√®s")
        else:
            logger.error("‚ùå ServiceManager non initialis√©")
            return False
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation: {e}")
        return False
    
    # 3. Test d'analyse de texte avec sophismes
    logger.info("Test d'analyse de texte contenant des sophismes...")
    test_text = """
    Si nous acceptons l'immigration, alors notre pays va s'effondrer √©conomiquement.
    C'est √©vident car tous les immigrants sont des parasites qui ne travaillent jamais.
    D'ailleurs, mon voisin qui est contre l'immigration est un imb√©cile, 
    donc son opinion ne compte pas. Il faut choisir : soit nous fermons compl√®tement 
    les fronti√®res, soit nous acceptons que notre civilisation disparaisse.
    """
    
    try:
        result = await service_manager.analyze_text(
            text=test_text,
            analysis_type="comprehensive",
            options={'detect_fallacies': True}
        )
        
        logger.info("‚úÖ Analyse de texte termin√©e")
        logger.info(f"Structure du r√©sultat: {list(result.keys())}")
        
        # 4. Test d'extraction des sophismes
        fallacy_analysis = _extract_fallacy_analysis(result)
        logger.info(f"Sophismes d√©tect√©s: {fallacy_analysis['total_fallacies']}")
        logger.info(f"Cat√©gories trouv√©es: {fallacy_analysis['categories_found']}")
        
        if fallacy_analysis['total_fallacies'] > 0:
            logger.info("‚úÖ D√©tection de sophismes fonctionnelle")
        else:
            logger.warning("‚ö†Ô∏è Aucun sophisme d√©tect√© (peut √™tre normal)")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'analyse: {e}")
        return False


async def test_health_check():
    """Test du health check du ServiceManager."""
    logger.info("Test du health check...")
    
    try:
        if hasattr(service_manager, 'health_check'):
            health = await service_manager.health_check()
            logger.info(f"Health check: {health}")
        
        if hasattr(service_manager, 'get_service_status'):
            status = await service_manager.get_service_status()
            logger.info(f"Service status: {status}")
            
        logger.info("‚úÖ Health check termin√©")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur health check: {e}")
        return False


async def main():
    """Fonction principale de test."""
    logger.info("D√©but des tests d'int√©gration...")
    
    # Test 1: Int√©gration ServiceManager
    success1 = await test_service_manager_integration()
    
    # Test 2: Health check
    success2 = await test_health_check()
    
    # R√©sultat final
    if success1 and success2:
        logger.info("üéâ TOUS LES TESTS PASS√âS - Int√©gration ServiceManager r√©ussie")
        return True
    else:
        logger.error("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)