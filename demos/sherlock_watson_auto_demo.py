"""
D√©monstration automatique non-interactive du syst√®me Sherlock/Watson avec JTMS int√©gr√©.
Version simplifi√©e qui s'ex√©cute sans intervention utilisateur.
"""

import asyncio
import logging
import json
import os
import sys
from typing import Dict, Any, List
from datetime import datetime

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger("SherlockWatsonAutoDemo")

class AutoCluedoDemo:
    """D√©mo automatique d'investigation Cluedo avec agents simplifi√©s"""
    
    def __init__(self):
        # Agents simplifi√©s
        self.sherlock = None
        self.watson = None
        self.hub = None
        
        # Sc√©nario Cluedo simplifi√©
        self.cluedo_scenario = {
            "victim": {
                "name": "Dr. Lenoir",
                "location_found": "Biblioth√®que",
                "time_of_death": "21:30",
                "cause_preliminary": "Traumatisme cr√¢nien"
            },
            "suspects": ["Colonel Moutarde", "Professeur Violet", "Madame Leblanc"],
            "weapons": ["Chandelier", "Poignard", "Barre de fer"],
            "rooms": ["Biblioth√®que", "Cuisine", "Salon"],
            "evidence": {
                "fingerprints_kitchen": {
                    "type": "physical_evidence",
                    "description": "Empreintes digitales trouv√©es sur le chandelier dans la cuisine",
                    "suspects": ["Colonel Moutarde"],
                    "reliability": 0.9
                },
                "witness_testimony": {
                    "type": "testimony", 
                    "description": "T√©moin a vu Professeur Violet pr√®s de la biblioth√®que vers 21h",
                    "suspects": ["Professeur Violet"],
                    "reliability": 0.7
                }
            }
        }
    
    async def initialize_simplified_system(self) -> bool:
        """Initialise le syst√®me en mode simplifi√©"""
        try:
            logger.info("üîß Initialisation syst√®me simplifi√©")
            
            # Agent simplifi√©
            class SimpleAgent:
                def __init__(self, name, role):
                    self.agent_name = name
                    self.role = role
                    self.session_id = f"{name}_{hash(name) % 10000}"
                    self.beliefs = {}
                    
                async def add_belief(self, belief, metadata):
                    self.beliefs[belief] = metadata
                    logger.info(f"   {self.agent_name}: Ajout croyance '{belief}'")
                    
                def get_all_beliefs(self):
                    return self.beliefs
                    
                def get_session_statistics(self):
                    return {
                        "last_modified": datetime.now().isoformat(),
                        "total_beliefs": len(self.beliefs)
                    }
                    
                def export_session_state(self):
                    return {
                        "agent_name": self.agent_name,
                        "session_id": self.session_id,
                        "beliefs": self.beliefs,
                        "role": self.role
                    }
                    
                async def analyze_evidence(self, evidence_id, evidence_data):
                    """Analyse simul√©e d'√©vidence"""
                    if self.role == "detective":
                        return {
                            "relevance": evidence_data.get("reliability", 0.5),
                            "implications": [f"√âvidence {evidence_id} sugg√®re implication des suspects"],
                            "deduction": f"Bas√© sur {evidence_data.get('type', 'unknown')}"
                        }
                    else:  # validator
                        return {
                            "validity": evidence_data.get("reliability", 0.5) * 0.9,
                            "critique": [f"√âvidence {evidence_id} n√©cessite corroboration"],
                            "confidence": evidence_data.get("reliability", 0.5)
                        }
                        
                async def formulate_hypothesis(self, context):
                    """Formulation d'hypoth√®se simul√©e"""
                    if self.role == "detective":
                        return {
                            "primary_hypothesis": {
                                "suspect": "Colonel Moutarde",
                                "weapon": "Chandelier",
                                "room": "Cuisine",
                                "confidence": 0.75,
                                "reasoning": "Empreintes sur chandelier + pr√©sence √©tablie"
                            },
                            "alternative_hypotheses": [
                                {
                                    "suspect": "Professeur Violet",
                                    "weapon": "Poignard",
                                    "room": "Biblioth√®que", 
                                    "confidence": 0.6,
                                    "reasoning": "T√©moin + lieu du crime"
                                }
                            ]
                        }
                    return {}
                    
                async def validate_hypothesis(self, hypothesis_data):
                    """Validation d'hypoth√®se simul√©e"""
                    if self.role == "validator":
                        return {
                            "validity_assessment": {
                                "logical_consistency": 0.8,
                                "evidence_support": 0.7,
                                "completeness": 0.6
                            },
                            "identified_gaps": [
                                "Manque d'alibi v√©rifi√© pour Colonel Moutarde",
                                "Lien temporel √† √©tablir"
                            ],
                            "suggestions": [
                                "V√©rifier les alibis des suspects principaux",
                                "Analyser la s√©quence temporelle"
                            ],
                            "confidence_in_hypothesis": 0.65
                        }
                    return {}
            
            # Hub simplifi√©
            class SimpleHub:
                def __init__(self, sherlock_agent, watson_agent):
                    self.agents = {"Sherlock_Cluedo": sherlock_agent, "Watson_Cluedo": watson_agent}
                    self.statistics = {"messages_processed": 0, "conflicts_resolved": 0}
                    
                async def sync_beliefs(self, from_agent, to_agent):
                    from_agent_obj = self.agents.get(from_agent)
                    to_agent_obj = self.agents.get(to_agent)
                    
                    if from_agent_obj and to_agent_obj:
                        from_beliefs = from_agent_obj.get_all_beliefs()
                        synced_count = 0
                        
                        for belief, metadata in from_beliefs.items():
                            if belief not in to_agent_obj.beliefs:
                                await to_agent_obj.add_belief(f"sync_{belief}", metadata)
                                synced_count += 1
                        
                        logger.info(f"üîÑ Synchronisation: {synced_count} croyances transf√©r√©es de {from_agent} vers {to_agent}")
                        return {"beliefs_imported": synced_count, "status": "success"}
                    
                    return {"beliefs_imported": 0, "status": "error"}
                    
                async def check_global_consistency(self):
                    return {
                        "is_consistent": True,
                        "inter_agent_conflicts": [],
                        "resolutions": []
                    }
                    
                def get_hub_status(self):
                    return {
                        "status": "active_simplified",
                        "connected_agents": list(self.agents.keys()),
                        "statistics": self.statistics
                    }
                    
                async def shutdown(self):
                    logger.info("Hub simplifi√© arr√™t√©")
            
            # Cr√©er les agents
            self.sherlock = SimpleAgent("Sherlock_Cluedo", "detective")
            self.watson = SimpleAgent("Watson_Cluedo", "validator")
            self.hub = SimpleHub(self.sherlock, self.watson)
            
            logger.info(f"‚úÖ Sherlock initialis√©: {self.sherlock.agent_name}")
            logger.info(f"‚úÖ Watson initialis√©: {self.watson.agent_name}")
            logger.info(f"‚úÖ Hub actif")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation: {e}")
            return False
    
    async def run_auto_investigation(self):
        """Lance une investigation automatique compl√®te"""
        try:
            print("\n" + "="*80)
            print("üïµÔ∏è  D√âMONSTRATION AUTOMATIQUE SHERLOCK/WATSON JTMS  üïµÔ∏è")
            print("="*80)
            print(f"\nüìñ SC√âNARIO: Enqu√™te Cluedo - Meurtre du {self.cluedo_scenario['victim']['name']}")
            print(f"üìç Lieu: {self.cluedo_scenario['victim']['location_found']}")
            print(f"‚è∞ Heure estim√©e: {self.cluedo_scenario['victim']['time_of_death']}")
            print(f"üíÄ Cause: {self.cluedo_scenario['victim']['cause_preliminary']}")
            
            # Phase 1: Initialisation
            print(f"\nüé¨ PHASE 1: INITIALISATION")
            print("-" * 50)
            
            if not await self.initialize_simplified_system():
                print("‚ùå √âchec initialisation")
                return
            
            # Ajouter contexte initial
            basic_facts = [
                f"victim_found_in_{self.cluedo_scenario['victim']['location_found'].lower()}",
                f"time_of_death_{self.cluedo_scenario['victim']['time_of_death'].replace(':', 'h')}",
                f"cause_preliminary_{self.cluedo_scenario['victim']['cause_preliminary'].replace(' ', '_').lower()}"
            ]
            
            for fact in basic_facts:
                await self.sherlock.add_belief(
                    fact,
                    {"type": "initial_fact", "source": "crime_scene", "confidence": 0.95}
                )
            
            # Phase 2: Analyse des √©vidences
            print(f"\nüîç PHASE 2: ANALYSE DES √âVIDENCES")
            print("-" * 50)
            
            evidence_count = 0
            for evidence_id, evidence_data in self.cluedo_scenario['evidence'].items():
                print(f"\nüìã √âvidence: {evidence_id}")
                print(f"   Type: {evidence_data['type']}")
                print(f"   Description: {evidence_data['description']}")
                print(f"   Fiabilit√©: {evidence_data['reliability']}")
                
                # Ajouter dans Sherlock
                await self.sherlock.add_belief(
                    f"evidence_{evidence_id}",
                    {
                        "type": "evidence",
                        "source": evidence_data['type'],
                        "confidence": evidence_data['reliability'],
                        "description": evidence_data['description']
                    }
                )
                
                # Analyser avec Sherlock
                analysis = await self.sherlock.analyze_evidence(evidence_id, evidence_data)
                print(f"   üß† Analyse Sherlock: Pertinence {analysis.get('relevance', 'N/A')}")
                
                evidence_count += 1
            
            # Synchroniser avec Watson
            sync_result = await self.hub.sync_beliefs("Sherlock_Cluedo", "Watson_Cluedo")
            
            # Phase 3: Formation d'hypoth√®ses
            print(f"\nüí° PHASE 3: FORMATION D'HYPOTH√àSES")
            print("-" * 50)
            
            investigation_context = f"""
            Analyser le meurtre de {self.cluedo_scenario['victim']['name']} 
            dans {self.cluedo_scenario['victim']['location_found']}.
            """
            
            hypothesis_result = await self.sherlock.formulate_hypothesis(investigation_context)
            
            # Afficher les hypoth√®ses
            print("\nüéØ HYPOTH√àSE PRINCIPALE:")
            primary = hypothesis_result.get("primary_hypothesis", {})
            print(f"   Suspect: {primary.get('suspect', 'N/A')}")
            print(f"   Arme: {primary.get('weapon', 'N/A')}")
            print(f"   Lieu: {primary.get('room', 'N/A')}")
            print(f"   Confiance: {primary.get('confidence', 0):.2f}")
            print(f"   Raisonnement: {primary.get('reasoning', 'N/A')}")
            
            # Phase 4: Validation crois√©e
            print(f"\n‚öñÔ∏è  PHASE 4: VALIDATION CROIS√âE")
            print("-" * 50)
            
            critique_result = await self.watson.validate_hypothesis(hypothesis_result)
            
            print("\nüìù √âVALUATION WATSON:")
            validity = critique_result.get("validity_assessment", {})
            print(f"   Coh√©rence logique: {validity.get('logical_consistency', 0):.2f}")
            print(f"   Support √©videntiel: {validity.get('evidence_support', 0):.2f}")
            print(f"   Compl√©tude: {validity.get('completeness', 0):.2f}")
            
            gaps = critique_result.get("identified_gaps", [])
            if gaps:
                print(f"\nüîç LACUNES IDENTIFI√âES:")
                for gap in gaps:
                    print(f"   ‚Ä¢ {gap}")
            
            # Phase 5: Solution finale
            print(f"\nüéØ PHASE 5: SOLUTION FINALE")
            print("-" * 50)
            
            final_solution = {
                "solution": {
                    "culprit": "Colonel Moutarde",
                    "weapon": "Chandelier",
                    "location": "Cuisine",
                    "motive": "Diff√©rend financier avec la victime"
                },
                "confidence": 0.82,
                "supporting_evidence": [
                    "Empreintes digitales sur l'arme",
                    "Pr√©sence √©tablie dans le lieu",
                    "Acc√®s aux informations financi√®res"
                ]
            }
            
            print("\nüèÜ SOLUTION FINALE:")
            solution = final_solution.get("solution", {})
            print(f"   üîç Coupable: {solution.get('culprit', 'N/A')}")
            print(f"   üî™ Arme: {solution.get('weapon', 'N/A')}")
            print(f"   üìç Lieu: {solution.get('location', 'N/A')}")
            print(f"   üí≠ Motif: {solution.get('motive', 'N/A')}")
            print(f"   üéØ Confiance: {final_solution.get('confidence', 0):.2f}")
            
            # Statistiques finales
            print(f"\nüìä STATISTIQUES FINALES")
            print("-" * 50)
            
            sherlock_beliefs = len(self.sherlock.get_all_beliefs())
            watson_beliefs = len(self.watson.get_all_beliefs())
            
            print(f"   ‚Ä¢ Sherlock: {sherlock_beliefs} croyances")
            print(f"   ‚Ä¢ Watson: {watson_beliefs} croyances")
            print(f"   ‚Ä¢ √âvidences analys√©es: {evidence_count}")
            print(f"   ‚Ä¢ Hypoth√®ses formul√©es: {len(hypothesis_result.get('alternative_hypotheses', [])) + 1}")
            
            # V√©rification coh√©rence
            consistency = await self.hub.check_global_consistency()
            print(f"   ‚Ä¢ Coh√©rence globale: {'‚úÖ' if consistency.get('is_consistent', False) else '‚ùå'}")
            
            print(f"\n‚úÖ INVESTIGATION TERMIN√âE AVEC SUCC√àS")
            
        except Exception as e:
            logger.error(f"Erreur durant l'investigation automatique: {e}")
            print(f"‚ùå Erreur: {e}")
        
        finally:
            if self.hub:
                await self.hub.shutdown()

async def main():
    """Point d'entr√©e principal de la d√©monstration automatique"""
    demo = AutoCluedoDemo()
    await demo.run_auto_investigation()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\nüëã D√©monstration interrompue")
    except Exception as e:
        logger.error(f"Erreur fatale: {e}")
        print(f"\n‚ùå Erreur fatale: {e}")