diff --git a/argumentation_analysis/orchestration/advanced_analyzer.py b/argumentation_analysis/orchestration/advanced_analyzer.py
index fc28eff2..915a4317 100644
--- a/argumentation_analysis/orchestration/advanced_analyzer.py
+++ b/argumentation_analysis/orchestration/advanced_analyzer.py
@@ -16,6 +16,15 @@ from argumentation_analysis.utils.analysis_comparison import compare_rhetorical_
 
 logger = logging.getLogger(__name__)
 
+def _run_analysis_tool(tool_function, *args, **kwargs) -> Dict[str, Any]:
+    """Exécute une fonction d'outil d'analyse et gère les exceptions."""
+    try:
+        return tool_function(*args, **kwargs)
+    except Exception as e:
+        tool_name = tool_function.__self__.__class__.__name__ if hasattr(tool_function, '__self__') else tool_function.__name__
+        logger.error(f"Erreur lors de l'exécution de l'outil '{tool_name}': {e}", exc_info=True)
+        return {"error": str(e)}
+
 def analyze_extract_advanced(
     extract_definition: Dict[str, Any],
     source_name: str,
@@ -41,21 +50,17 @@ def analyze_extract_advanced(
     extract_text = extract_definition.get("extract_text")
     
     if not extract_text:
-        logger.warning(f"Texte non disponible pour l'extrait '{extract_name}' dans l'orchestrateur. Utilisation d'un texte d'exemple.")
-        extract_text = generate_sample_text(extract_name, source_name) # Nécessite generate_sample_text
+        logger.warning(f"Texte non disponible pour l'extrait '{extract_name}'. Utilisation d'un texte d'exemple.")
+        extract_text = generate_sample_text(extract_name, source_name)
     
-    arguments = split_text_into_arguments(extract_text) # Nécessite split_text_into_arguments
+    arguments = split_text_into_arguments(extract_text)
     
     if not arguments:
-        arguments = [extract_text] # Utiliser l'extrait entier si pas d'arguments trouvés
+        arguments = [extract_text]
     
-    # Le contexte peut être plus riche, ici on prend le nom de la source ou ce qui est dans l'extrait.
-    # Dans le script original, c'était `extract_definition.get("context", source_name)`
-    # On pourrait le passer en argument ou le construire ici. Pour l'instant, on simplifie.
     analysis_context = {"source_name": source_name, "extract_name": extract_name}
-    # Si `extract_definition` contient un champ "context", on pourrait l'utiliser :
-    # analysis_context.update(extract_definition.get("context", {}))
-
+    if "context" in extract_definition:
+        analysis_context.update(extract_definition["context"])
 
     results: Dict[str, Any] = {
         "extract_name": extract_name,
@@ -67,72 +72,53 @@ def analyze_extract_advanced(
     
     # Analyse des sophismes complexes
     if "complex_fallacy_analyzer" in tools:
-        try:
-            complex_fallacy_analyzer = tools["complex_fallacy_analyzer"]
-            complex_fallacy_results = complex_fallacy_analyzer.detect_composite_fallacies(
-                arguments, analysis_context # Utiliser analysis_context
-            )
-            results["analyses"]["complex_fallacies"] = complex_fallacy_results
-        except Exception as e:
-            logger.error(f"Erreur lors de l'analyse des sophismes complexes (orchestrateur): {e}", exc_info=True)
-            results["analyses"]["complex_fallacies"] = {"error": str(e)}
+        analyzer = tools["complex_fallacy_analyzer"]
+        results["analyses"]["complex_fallacies"] = _run_analysis_tool(
+            analyzer.detect_composite_fallacies, arguments, analysis_context
+        )
     
     # Analyse des sophismes contextuels améliorée
     if "contextual_fallacy_analyzer" in tools:
-        try:
-            contextual_fallacy_analyzer = tools["contextual_fallacy_analyzer"]
-            contextual_fallacy_results = contextual_fallacy_analyzer.analyze_context(
-                extract_text, analysis_context # Utiliser analysis_context
-            )
-            results["analyses"]["contextual_fallacies"] = contextual_fallacy_results
-        except Exception as e:
-            logger.error(f"Erreur lors de l'analyse contextuelle des sophismes (orchestrateur): {e}", exc_info=True)
-            results["analyses"]["contextual_fallacies"] = {"error": str(e)}
+        analyzer = tools["contextual_fallacy_analyzer"]
+        results["analyses"]["contextual_fallacies"] = _run_analysis_tool(
+            analyzer.analyze_context, extract_text, analysis_context
+        )
     
     # Évaluation de la gravité des sophismes
     if "fallacy_severity_evaluator" in tools:
-        try:
-            fallacy_severity_evaluator = tools["fallacy_severity_evaluator"]
-            severity_results = fallacy_severity_evaluator.evaluate_fallacy_severity(
-                arguments, analysis_context # Utiliser analysis_context
-            )
-            results["analyses"]["fallacy_severity"] = severity_results
-        except Exception as e:
-            logger.error(f"Erreur lors de l'évaluation de la gravité des sophismes (orchestrateur): {e}", exc_info=True)
-            results["analyses"]["fallacy_severity"] = {"error": str(e)}
+        analyzer = tools["fallacy_severity_evaluator"]
+        results["analyses"]["fallacy_severity"] = _run_analysis_tool(
+            analyzer.evaluate_fallacy_severity, arguments, analysis_context
+        )
     
     # Analyse globale des résultats rhétoriques
     if "rhetorical_result_analyzer" in tools:
-        try:
-            rhetorical_result_analyzer = tools["rhetorical_result_analyzer"]
-            
-            current_analysis_data = {
-                "complex_fallacy_analysis": results["analyses"].get("complex_fallacies", {}),
-                "contextual_fallacy_analysis": results["analyses"].get("contextual_fallacies", {}),
-                "fallacy_severity_evaluation": results["analyses"].get("fallacy_severity", {})
-            }
-            
-            if base_result: # Intégrer les résultats de base si disponibles
-                current_analysis_data["base_contextual_fallacies"] = base_result.get("analyses", {}).get("contextual_fallacies", {})
-                current_analysis_data["base_argument_coherence"] = base_result.get("analyses", {}).get("argument_coherence", {})
-                current_analysis_data["base_semantic_analysis"] = base_result.get("analyses", {}).get("semantic_analysis", {})
-            
-            rhetorical_analysis_output = rhetorical_result_analyzer.analyze_rhetorical_results(
-                current_analysis_data, analysis_context # Utiliser analysis_context
-            )
-            results["analyses"]["rhetorical_results"] = rhetorical_analysis_output
-        except Exception as e:
-            logger.error(f"Erreur lors de l'analyse globale des résultats rhétoriques (orchestrateur): {e}", exc_info=True)
-            results["analyses"]["rhetorical_results"] = {"error": str(e)}
+        analyzer = tools["rhetorical_result_analyzer"]
+        current_analysis_data = {
+            key: results["analyses"].get(key.replace('_analysis', 'es'), {})
+            for key in [
+                "complex_fallacy_analysis",
+                "contextual_fallacy_analysis",
+                "fallacy_severity_evaluation"
+            ]
+        }
+        
+        if base_result:
+            base_analyses = base_result.get("analyses", {})
+            current_analysis_data.update({
+                "base_contextual_fallacies": base_analyses.get("contextual_fallacies", {}),
+                "base_argument_coherence": base_analyses.get("argument_coherence", {}),
+                "base_semantic_analysis": base_analyses.get("semantic_analysis", {})
+            })
+        
+        results["analyses"]["rhetorical_results"] = _run_analysis_tool(
+            analyzer.analyze_rhetorical_results, current_analysis_data, analysis_context
+        )
     
     # Comparer avec les résultats de l'analyse de base
     if base_result:
-        try:
-            # compare_rhetorical_analyses attend les résultats complets (avancés et base)
-            comparison = compare_rhetorical_analyses(results, base_result) # Nécessite compare_rhetorical_analyses
-            results["comparison_with_base"] = comparison
-        except Exception as e:
-            logger.error(f"Erreur lors de la comparaison avec l'analyse de base (orchestrateur): {e}", exc_info=True)
-            results["comparison_with_base"] = {"error": str(e)}
+        results["comparison_with_base"] = _run_analysis_tool(
+            compare_rhetorical_analyses, results, base_result
+        )
     
     return results
\ No newline at end of file
