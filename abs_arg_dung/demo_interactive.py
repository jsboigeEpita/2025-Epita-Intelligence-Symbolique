#!/usr/bin/env python3
"""
D√©monstration interactive du projet d'argumentation Dung
Script de pr√©sentation pour showcaser toutes les fonctionnalit√©s
"""

import time
import os
from agent import DungAgent
from enhanced_agent import EnhancedDungAgent
from framework_generator import FrameworkGenerator
from io_utils import FrameworkIO
from project_info import print_project_info

def pause(message="Appuyez sur Entr√©e pour continuer..."):
    """Pause interactive"""
    input(f"\n{message}")

def demo_header(title):
    """Affiche un en-t√™te de d√©monstration"""
    print(f"\n{'='*70}")
    print(f"üéØ {title}")
    print(f"{'='*70}")

def demo_basic_usage():
    """D√©monstration de l'utilisation de base"""
    demo_header("D√âMONSTRATION 1: UTILISATION DE BASE")
    
    print("Cr√©ation d'un framework simple pour mod√©liser un d√©bat:")
    print("üí≠ Sujet: Faut-il √™tre v√©g√©tarien ?")
    
    agent = DungAgent()
    
    # Arguments du d√©bat
    arguments = {
        "sante": "√ätre v√©g√©tarien est bon pour la sant√©",
        "environnement": "L'√©levage nuit √† l'environnement", 
        "plaisir": "La viande procure du plaisir gustatif",
        "tradition": "Manger de la viande est traditionnel",
        "nutrition": "La viande apporte des nutriments essentiels"
    }
    
    print("\nüìù Arguments du d√©bat:")
    for key, desc in arguments.items():
        agent.add_argument(key)
        print(f"  ‚Ä¢ {key}: {desc}")
    
    pause()
    
    print("\n‚öîÔ∏è Relations d'attaque:")
    attacks = [
        ("sante", "nutrition"),
        ("environnement", "tradition"),
        ("plaisir", "sante"),
        ("nutrition", "sante")
    ]
    
    for source, target in attacks:
        agent.add_attack(source, target)
        print(f"  ‚Ä¢ {source} attaque {target}")
    
    pause()
    
    print("\nüîç Analyse du d√©bat:")
    agent.analyze_semantics_relationships()
    
    pause()
    
    print("\nüìä Statut de chaque argument:")
    agent.print_all_arguments_status()
    
    pause()
    
    # Visualisation
    print("\nüìà G√©n√©ration du graphique...")
    agent.visualize_graph(title_suffix=" - D√©bat V√©g√©tarisme")
    print("Graphique sauvegard√©!")
    
    return agent

def demo_enhanced_agent():
    """D√©monstration de l'agent am√©lior√©"""
    demo_header("D√âMONSTRATION 2: AGENT AM√âLIOR√â vs STANDARD")
    
    print("Comparaison sur un cas probl√©matique: argument auto-attaquant")
    print("üí≠ Cas: Un argument contradictoire qui s'auto-r√©fute")
    
    # Agent standard
    print("\nüîß Agent standard:")
    standard_agent = DungAgent()
    standard_agent.add_argument("contradiction")
    standard_agent.add_argument("conclusion")
    standard_agent.add_attack("contradiction", "contradiction")  # Self-attack
    standard_agent.add_attack("contradiction", "conclusion")
    
    std_grounded = standard_agent.get_grounded_extension()
    print(f"Extension fond√©e: {std_grounded}")
    
    # Agent am√©lior√©
    print("\n‚ú® Agent am√©lior√©:")
    enhanced_agent = EnhancedDungAgent()
    enhanced_agent.add_argument("contradiction")
    enhanced_agent.add_argument("conclusion")
    enhanced_agent.add_attack("contradiction", "contradiction")
    enhanced_agent.add_attack("contradiction", "conclusion")
    
    enh_grounded = enhanced_agent.get_grounded_extension()
    print(f"Extension fond√©e: {enh_grounded}")
    
    print(f"\nüéØ R√©sultat:")
    if std_grounded != enh_grounded:
        print("‚úÖ L'agent am√©lior√© corrige le comportement!")
        print(f"  Standard: {std_grounded} (conservateur)")
        print(f"  Am√©lior√©: {enh_grounded} (logique corrig√©e)")
    else:
        print("‚ÑπÔ∏è  Les deux agents donnent le m√™me r√©sultat")
    
    pause()

def demo_classic_examples():
    """D√©monstration des exemples classiques"""
    demo_header("D√âMONSTRATION 3: EXEMPLES CLASSIQUES")
    
    examples = FrameworkGenerator.generate_classic_examples()
    
    for name, agent in examples.items():
        print(f"\nüî• Exemple: {name.upper()}")
        
        if name == "triangle":
            print("Triangle conflictuel - Cycle d'arguments qui s'attaquent mutuellement")
        elif name == "self_defending":
            print("Arguments auto-d√©fendeurs - Conflit sym√©trique")
        elif name == "nixon_diamond":
            print("Diamant de Nixon - Dilemme classique avec conflits crois√©s")
        
        print("\nAnalyse:")
        semantics = agent.get_semantics_relationships()
        grounded = semantics['extensions']['grounded']
        preferred = semantics['extensions']['preferred']
        
        print(f"  Extension fond√©e: {grounded}")
        print(f"  Extensions pr√©f√©r√©es: {preferred}")
        
        if name == "nixon_diamond":
            print("  üí° Ce cas illustre l'importance des s√©mantiques multiples")
        
        pause("Continuer vers l'exemple suivant...")

def demo_random_generation():
    """D√©monstration de la g√©n√©ration al√©atoire"""
    demo_header("D√âMONSTRATION 4: G√âN√âRATION & ANALYSE AUTOMATIQUE")
    
    print("G√©n√©ration de frameworks al√©atoires pour analyse statistique")
    
    sizes = [5, 8, 12]
    probabilities = [0.2, 0.4, 0.6]
    
    results = []
    
    for size in sizes:
        for prob in probabilities:
            print(f"\nüé≤ Framework: {size} arguments, probabilit√© d'attaque {prob}")
            
            agent = FrameworkGenerator.generate_random_framework(size, prob, seed=42)
            props = agent.get_framework_properties()
            semantics = agent.get_semantics_relationships()
            
            result = {
                'size': size,
                'prob': prob,
                'attacks': props['num_attacks'],
                'cycles': props['has_cycles'],
                'grounded_size': len(semantics['extensions']['grounded']),
                'preferred_count': len(semantics['extensions']['preferred'])
            }
            results.append(result)
            
            print(f"  üìä {result['attacks']} attaques, cycles: {result['cycles']}")
            print(f"  üìä Extension fond√©e: {result['grounded_size']} arguments")
            print(f"  üìä {result['preferred_count']} extensions pr√©f√©r√©es")
    
    pause()
    
    print("\nüìà Tendances observ√©es:")
    for result in results:
        density = result['attacks'] / (result['size'] ** 2)
        print(f"  Taille {result['size']}, prob {result['prob']}: densit√© {density:.2f}")

def demo_import_export():
    """D√©monstration des capacit√©s d'import/export"""
    demo_header("D√âMONSTRATION 5: IMPORT/EXPORT & INTEROP√âRABILIT√â")
    
    print("Cr√©ation d'un framework et export vers diff√©rents formats")
    
    # Cr√©er un framework d'exemple
    agent = DungAgent()
    for arg in ["A", "B", "C", "D"]:
        agent.add_argument(arg)
    
    agent.add_attack("A", "B")
    agent.add_attack("B", "C")
    agent.add_attack("C", "D")
    agent.add_attack("D", "A")  # Cycle
    
    print("Framework cr√©√©: A‚ÜíB‚ÜíC‚ÜíD‚ÜíA (cycle)")
    
    # Export vers diff√©rents formats
    formats = {
        'json': 'demo_framework.json',
        'tgf': 'demo_framework.tgf', 
        'dot': 'demo_framework.dot'
    }
    
    print("\nüíæ Export vers diff√©rents formats:")
    for fmt, filename in formats.items():
        if fmt == 'json':
            FrameworkIO.export_to_json(agent, filename)
        elif fmt == 'tgf':
            FrameworkIO.export_to_tgf(agent, filename)
        elif fmt == 'dot':
            FrameworkIO.export_to_dot(agent, filename)
        
        if os.path.exists(filename):
            size = os.path.getsize(filename)
            print(f"  ‚úÖ {fmt.upper()}: {filename} ({size} bytes)")
    
    # Test import
    print(f"\nüì• Test d'import depuis JSON:")
    imported_agent = FrameworkIO.import_from_json('demo_framework.json')
    imported_grounded = imported_agent.get_grounded_extension()
    print(f"Extension fond√©e import√©e: {imported_grounded}")
    
    # Export rapport d'analyse
    print(f"\nüìã Export rapport d'analyse:")
    FrameworkIO.export_analysis_report(agent, 'demo_analysis.json')
    print("Rapport complet export√©!")
    
    pause()

def demo_performance():
    """D√©monstration de performance"""
    demo_header("D√âMONSTRATION 6: PERFORMANCE & PASSAGE √Ä L'√âCHELLE")
    
    print("Test de performance sur diff√©rentes tailles de frameworks")
    
    sizes = [5, 10, 15]
    
    for size in sizes:
        print(f"\n‚è±Ô∏è Test taille {size}:")
        agent = FrameworkGenerator.generate_random_framework(size, 0.3, seed=42)
        
        start_time = time.time()
        grounded = agent.get_grounded_extension()
        preferred = agent.get_preferred_extensions() 
        stable = agent.get_stable_extensions()
        complete = agent.get_complete_extensions()
        end_time = time.time()
        
        computation_time = end_time - start_time
        
        print(f"  üïí Temps de calcul: {computation_time:.4f}s")
        print(f"  üìä Extensions: grounded={len(grounded)}, preferred={len(preferred)}")
        print(f"     stable={len(stable)}, complete={len(complete)}")
        
        if computation_time > 1.0:
            print("  ‚ö†Ô∏è  Calcul intensif d√©tect√©")
        else:
            print("  ‚úÖ Performance excellente")
    
    pause()

def main_demo():
    """D√©monstration principale"""
    print("üéØ D√âMONSTRATION INTERACTIVE")
    print("Agent d'Argumentation Abstraite de Dung")
    print("=" * 70)
    
    print_project_info()
    
    pause("D√©marrer la d√©monstration...")
    
    # Ex√©cuter toutes les d√©monstrations
    demos = [
        ("Utilisation de base", demo_basic_usage),
        ("Agent am√©lior√©", demo_enhanced_agent), 
        ("Exemples classiques", demo_classic_examples),
        ("G√©n√©ration al√©atoire", demo_random_generation),
        ("Import/Export", demo_import_export),
        ("Performance", demo_performance)
    ]
    
    for i, (title, demo_func) in enumerate(demos, 1):
        print(f"\nüé¨ D√©monstration {i}/{len(demos)}: {title}")
        try:
            demo_func()
        except KeyboardInterrupt:
            print("\n‚è∏Ô∏è D√©monstration interrompue par l'utilisateur")
            break
        except Exception as e:
            print(f"\n‚ùå Erreur dans la d√©monstration: {e}")
            continue
    
    # Conclusion
    demo_header("CONCLUSION")
    print("üéâ D√©monstration termin√©e!")
    print("\nVotre projet d'argumentation Dung comprend:")
    print("‚úÖ Agent principal avec toutes les s√©mantiques")
    print("‚úÖ Agent am√©lior√© avec corrections")
    print("‚úÖ G√©n√©ration automatique de frameworks")
    print("‚úÖ Import/export multi-formats")
    print("‚úÖ Interface CLI compl√®te")
    print("‚úÖ Tests exhaustifs et benchmarks")
    print("‚úÖ Visualisation graphique")
    print("‚úÖ Documentation professionnelle")
    
    print(f"\nüöÄ Le projet est maintenant pr√™t pour √©valuation!")
    print(f"üìÅ Tous les fichiers sont dans: /home/wassim/repos/mon_agent_dung")

if __name__ == "__main__":
    try:
        main_demo()
    except KeyboardInterrupt:
        print("\n\nüëã D√©monstration termin√©e par l'utilisateur")
    except Exception as e:
        print(f"\n\nüí• Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()