#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Mise √† jour des scripts de d√©monstration pour l'environnement d√©di√©.

Met √† jour les scripts existants pour qu'ils utilisent automatiquement
l'environnement d√©di√© et affichent des messages de transparence.
"""

import sys
import os
from pathlib import Path
import re

# Configuration
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

# Template pour l'en-t√™te des scripts
ENVIRONMENT_HEADER_TEMPLATE = '''#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
{description}

ENVIRONNEMENT D√âDI√â REQUIS: conda activate projet-is
Ou utilisation via: .\\setup_project_env.ps1 -CommandToRun "python {script_path}"
"""

import sys
import os
from pathlib import Path

# Configuration automatique environnement d√©di√©
PROJECT_ROOT = Path(__file__).resolve().parent.parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

# V√©rification environnement (optionnel - commentaire pour √©viter les erreurs)
try:
    from scripts.env.environment_helpers import print_environment_warning
    print_environment_warning()
except ImportError:
    print("‚ÑπÔ∏è  Pour un environnement optimal: .\\\\setup_project_env.ps1 -CommandToRun \\"python {script_path}\\"")

'''

def update_script_with_environment_check(script_path: Path):
    """Met √† jour un script Python avec la v√©rification d'environnement."""
    if not script_path.exists() or script_path.suffix != '.py':
        return False
    
    try:
        content = script_path.read_text(encoding='utf-8')
        
        # V√©rifier si d√©j√† mis √† jour
        if "ENVIRONNEMENT D√âDI√â REQUIS" in content:
            print(f"‚úÖ D√©j√† mis √† jour: {script_path.relative_to(PROJECT_ROOT)}")
            return False
        
        # Trouver la description existante
        description_match = re.search(r'"""([^"]+)"""', content)
        description = description_match.group(1).strip() if description_match else script_path.name
        
        # Cr√©er le nouvel en-t√™te
        relative_path = script_path.relative_to(PROJECT_ROOT)
        new_header = ENVIRONMENT_HEADER_TEMPLATE.format(
            description=description,
            script_path=str(relative_path).replace('\\', '\\\\')
        )
        
        # Remplacer l'en-t√™te existant
        if content.startswith('#!'):
            # Garder le shebang et remplacer le reste
            lines = content.split('\n')
            shebang = lines[0] if lines[0].startswith('#!') else ''
            
            # Trouver la fin de l'en-t√™te
            start_idx = 1 if shebang else 0
            
            # Chercher la premi√®re ligne de code r√©el (apr√®s les imports et docstrings)
            code_start = start_idx
            for i, line in enumerate(lines[start_idx:], start_idx):
                if (line.strip() and 
                    not line.startswith('#') and 
                    not line.startswith('"""') and
                    not line.startswith("'''") and
                    'import' not in line and
                    'from' not in line and
                    line.strip() != ''):
                    code_start = i
                    break
            
            # Reconstruire le fichier
            new_content = new_header + '\n' + '\n'.join(lines[code_start:])
        else:
            new_content = new_header + '\n' + content
        
        # Sauvegarder
        script_path.write_text(new_content, encoding='utf-8')
        print(f"üîß Mis √† jour: {script_path.relative_to(PROJECT_ROOT)}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur mise √† jour {script_path}: {e}")
        return False

def find_demo_scripts():
    """Trouve tous les scripts de d√©monstration."""
    demo_dirs = [
        PROJECT_ROOT / "demos",
        PROJECT_ROOT / "scripts" / "sherlock_watson",
        PROJECT_ROOT / "scripts" / "demo",
        PROJECT_ROOT / "examples"
    ]
    
    demo_scripts = []
    for demo_dir in demo_dirs:
        if demo_dir.exists():
            for script in demo_dir.rglob("*.py"):
                if not script.name.startswith('__') and 'test' not in script.name.lower():
                    demo_scripts.append(script)
    
    return demo_scripts

def update_all_demo_scripts():
    """Met √† jour tous les scripts de d√©monstration."""
    print("üîß MISE √Ä JOUR SCRIPTS D√âMONSTRATION")
    print("=" * 50)
    
    demo_scripts = find_demo_scripts()
    updated_count = 0
    
    for script in demo_scripts:
        if update_script_with_environment_check(script):
            updated_count += 1
    
    print("\n" + "=" * 50)
    print(f"üìä R√âSUM√â: {updated_count} scripts mis √† jour sur {len(demo_scripts)} trouv√©s")
    
    if updated_count > 0:
        print("\nüí° NOUVELLES RECOMMANDATIONS:")
        print("   Utilisez maintenant: .\\setup_project_env.ps1 -CommandToRun \"python <script>\"")
        print("   Au lieu de: python <script>")

def create_corrected_recommendations_doc():
    """Cr√©e un document avec les recommandations corrig√©es."""
    doc_content = """# Recommandations Corrig√©es - Environnement D√©di√©

## üéØ Nouvelles Instructions de D√©marrage

### ‚úÖ Commandes Corrig√©es

| Ancien (Incorrect) | Nouveau (Correct) |
|-------------------|------------------|
| `python demos/webapp/run_webapp.py` | `.\\setup_project_env.ps1 -CommandToRun "python demos/webapp/run_webapp.py"` |
| `python scripts/sherlock_watson/run_sherlock_watson_moriarty_robust.py` | `.\\setup_project_env.ps1 -CommandToRun "python scripts/sherlock_watson/run_sherlock_watson_moriarty_robust.py"` |
| `python -m pytest tests/` | `.\\setup_project_env.ps1 -CommandToRun "python -m pytest tests/"` |
| `pip install -r requirements.txt` | `conda env create -f environment.yml` puis `conda activate projet-is` |

### üöÄ D√©marrage Rapide Corrig√©

```powershell
# 1. Cr√©er l'environnement (premi√®re fois seulement)
conda env create -f environment.yml

# 2. Lancer des d√©monstrations
.\\setup_project_env.ps1 -CommandToRun "python demos/webapp/run_webapp.py"
.\\setup_project_env.ps1 -CommandToRun "python scripts/sherlock_watson/run_sherlock_watson_moriarty_robust.py"

# 3. Ex√©cuter des tests
.\\setup_project_env.ps1 -CommandToRun "python -m pytest tests/unit/ -v"

# 4. V√©rification environnement
.\\setup_project_env.ps1 -CommandToRun "python scripts/env/check_environment.py"
```

### ‚ö†Ô∏è Erreurs Pr√©c√©dentes Corrig√©es

1. **Installation pip vs conda**: Utiliser `environment.yml` au lieu de `requirements.txt`
2. **Python syst√®me**: Toujours utiliser l'environnement d√©di√© `projet-is`
3. **PYTHONPATH manuel**: Automatiquement configur√© par `setup_project_env.ps1`
4. **D√©pendances manquantes**: Toutes incluses dans `environment.yml`

### üîç Diagnostic et R√©solution

```powershell
# Diagnostic rapide
.\\setup_project_env.ps1 -CommandToRun "python scripts/env/check_environment.py"

# Diagnostic complet
.\\setup_project_env.ps1 -CommandToRun "python scripts/env/diagnose_environment.py --full"

# R√©installation si probl√®me
conda env remove -n projet-is
conda env create -f environment.yml
```

### üìù Pour les Nouveaux Agents

1. **TOUJOURS** utiliser `setup_project_env.ps1` pour l'ex√©cution
2. **JAMAIS** ex√©cuter directement avec `python <script>`
3. **V√âRIFIER** l'environnement avec `check_environment.py`
4. **CR√âER** l'environnement avec `conda env create -f environment.yml`

---
**Mise √† jour**: 08/06/2025 - Corrections environnement d√©di√©
"""
    
    doc_path = PROJECT_ROOT / "CORRECTED_RECOMMENDATIONS.md"
    doc_path.write_text(doc_content, encoding='utf-8')
    print(f"üìÑ Document cr√©√©: {doc_path.relative_to(PROJECT_ROOT)}")

def main():
    """Point d'entr√©e principal."""
    print("üîß CORRECTION RECOMMANDATIONS ENVIRONNEMENT")
    print("=" * 60)
    
    # 1. Mettre √† jour les scripts de d√©monstration
    update_all_demo_scripts()
    
    print()
    
    # 2. Cr√©er le document de recommandations corrig√©es
    create_corrected_recommendations_doc()
    
    print("\n" + "=" * 60)
    print("‚úÖ CORRECTIONS TERMIN√âES")
    print("\nProchaines √©tapes:")
    print("1. V√©rifier avec: .\\setup_project_env.ps1 -CommandToRun \"python scripts/env/check_environment.py\"")
    print("2. Lire: CORRECTED_RECOMMENDATIONS.md")
    print("3. Utiliser uniquement les nouvelles commandes")

if __name__ == "__main__":
    main()