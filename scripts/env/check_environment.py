#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
V√©rification rapide de l'environnement - Oracle Enhanced v2.1.0

Script de diagnostic l√©ger pour v√©rification imm√©diate de l'environnement.
"""

import sys
import os
from pathlib import Path

# Auto-configuration du projet
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

def quick_environment_check():
    """V√©rification rapide de l'environnement."""
    print("üîç V√âRIFICATION RAPIDE ENVIRONNEMENT")
    print("=" * 40)
    
    # 1. Environnement actuel
    conda_env = os.environ.get('CONDA_DEFAULT_ENV', 'N/A')
    virtual_env = os.environ.get('VIRTUAL_ENV')
    
    if conda_env == "projet-is":
        print("‚úÖ Environnement: OPTIMAL (projet-is)")
        env_status = "optimal"
    elif conda_env and conda_env != "N/A":
        print(f"‚ö†Ô∏è  Environnement: CONDA ({conda_env})")
        env_status = "acceptable"
    elif virtual_env:
        venv_name = Path(virtual_env).name
        print(f"‚ÑπÔ∏è  Environnement: VENV ({venv_name})")
        env_status = "acceptable"
    else:
        print("‚ùå Environnement: SYST√àME (non recommand√©)")
        env_status = "problematic"
    
    # 2. Python
    python_version = f"{sys.version_info.major}.{sys.version_info.minor}"
    if python_version == "3.10":
        print(f"‚úÖ Python: {python_version} (optimal)")
    else:
        print(f"‚ö†Ô∏è  Python: {python_version} (recommand√©: 3.10)")
    
    # 3. PYTHONPATH
    if str(PROJECT_ROOT) in sys.path:
        print("‚úÖ PYTHONPATH: Configur√©")
    else:
        print("‚ùå PYTHONPATH: Non configur√©")
    
    # 4. D√©pendances critiques
    critical_imports = ["numpy", "pandas", "semantic_kernel", "pytest"]
    missing = []
    
    for module in critical_imports:
        try:
            __import__(module)
        except ImportError:
            missing.append(module)
    
    if not missing:
        print("‚úÖ D√©pendances: Toutes disponibles")
    else:
        print(f"‚ùå D√©pendances: {len(missing)} manquantes ({', '.join(missing)})")
    
    # 5. R√©sum√©
    print("\n" + "=" * 40)
    
    if env_status == "optimal" and not missing:
        print("üéâ STATUT: ENVIRONNEMENT OPTIMAL")
        return 0
    elif env_status != "problematic" and len(missing) <= 2:
        print("‚ö†Ô∏è  STATUT: ENVIRONNEMENT ACCEPTABLE")
        print("üí° Am√©liorations recommand√©es disponibles")
        return 0
    else:
        print("‚ùå STATUT: ENVIRONNEMENT PROBL√âMATIQUE")
        print("\nüîß SOLUTION RECOMMAND√âE:")
        print("1. Cr√©er l'environnement: conda env create -f environment.yml")
        print("2. Activer: conda activate projet-is")
        print("3. Ou utiliser: .\\setup_project_env.ps1 -CommandToRun \"<votre-commande>\"")
        return 1

def main():
    """Point d'entr√©e principal."""
    try:
        return quick_environment_check()
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())