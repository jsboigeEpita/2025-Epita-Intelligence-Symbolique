#!/usr/bin/env pwsh
# -*- coding: utf-8 -*-

<#
.SYNOPSIS
    Script de diagnostic et correction de corruption Git avec d√©p√¥t distant

.DESCRIPTION
    Ce script effectue un diagnostic complet de l'√©tat Git local,
    d√©tecte les corruptions, fait un diff avec le d√©p√¥t distant,
    et propose des solutions de r√©paration automatiques.

.PARAMETER Force
    Force les op√©rations de r√©paration sans demander confirmation

.PARAMETER Remote
    Nom du remote √† utiliser (par d√©faut: origin)

.PARAMETER Branch
    Nom de la branche √† analyser (par d√©faut: main)

.EXAMPLE
    .\diagnostic_git_corruption.ps1
    .\diagnostic_git_corruption.ps1 -Force -Remote origin -Branch main
#>

param(
    [switch]$Force = $false,
    [string]$Remote = "origin",
    [string]$Branch = "main"
)

# Configuration
$ErrorActionPreference = "Continue"
$InformationPreference = "Continue"

# Couleurs pour l'affichage
function Write-ColorHost {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

function Write-Section {
    param([string]$Title)
    Write-Host ""
    Write-ColorHost "=== $Title ===" "Cyan"
    Write-Host ""
}

function Write-SubSection {
    param([string]$Title)
    Write-ColorHost "--- $Title ---" "Yellow"
}

function Test-GitCommand {
    param([string]$Command)
    try {
        $result = Invoke-Expression "git $Command 2>&1"
        return @{
            Success = $LASTEXITCODE -eq 0
            Output = $result
            Error = if ($LASTEXITCODE -ne 0) { $result } else { $null }
        }
    } catch {
        return @{
            Success = $false
            Output = $null
            Error = $_.Exception.Message
        }
    }
}

function Get-GitRepoInfo {
    $info = @{
        HasGitRepo = Test-Path ".git"
        GitVersion = $null
        RepoSize = 0
        Corrupted = $false
        Remotes = @()
        CurrentBranch = $null
        Status = @()
    }
    
    if ($info.HasGitRepo) {
        try {
            $info.RepoSize = (Get-ChildItem ".git" -Recurse -ErrorAction SilentlyContinue | 
                            Measure-Object -Property Length -Sum -ErrorAction SilentlyContinue).Sum
        } catch {
            $info.RepoSize = 0
        }
    }
    
    # Test version Git
    $gitVersionTest = Test-GitCommand "--version"
    if ($gitVersionTest.Success) {
        $info.GitVersion = $gitVersionTest.Output
    }
    
    # Test remotes
    $remotesTest = Test-GitCommand "remote -v"
    if ($remotesTest.Success) {
        $info.Remotes = $remotesTest.Output -split "`n" | Where-Object { $_ -ne "" }
    }
    
    # Test branche actuelle
    $branchTest = Test-GitCommand "branch --show-current"
    if ($branchTest.Success) {
        $info.CurrentBranch = $branchTest.Output.Trim()
    }
    
    # Test status
    $statusTest = Test-GitCommand "status --porcelain"
    if ($statusTest.Success) {
        $info.Status = $statusTest.Output -split "`n" | Where-Object { $_ -ne "" }
    } else {
        $info.Corrupted = $true
    }
    
    return $info
}

function Get-RemoteDiff {
    param(
        [string]$Remote,
        [string]$Branch
    )
    
    Write-SubSection "Fetch du d√©p√¥t distant"
    $fetchResult = Test-GitCommand "fetch $Remote --all"
    if (-not $fetchResult.Success) {
        Write-ColorHost "‚ùå √âchec du fetch: $($fetchResult.Error)" "Red"
        return $null
    }
    Write-ColorHost "‚úì Fetch r√©ussi" "Green"
    
    Write-SubSection "Comparaison avec $Remote/$Branch"
    
    # V√©rification existence de la branche distante
    $remoteBranchTest = Test-GitCommand "rev-parse --verify $Remote/$Branch"
    if (-not $remoteBranchTest.Success) {
        Write-ColorHost "‚ùå Branche $Remote/$Branch n'existe pas" "Red"
        return $null
    }
    
    # Diff des fichiers
    $diffFilesResult = Test-GitCommand "diff --name-only HEAD $Remote/$Branch"
    $diffStats = Test-GitCommand "diff --stat HEAD $Remote/$Branch"
    
    $diffInfo = @{
        FilesChanged = @()
        Stats = $null
        LocalCommits = @()
        RemoteCommits = @()
    }
    
    if ($diffFilesResult.Success) {
        $diffInfo.FilesChanged = $diffFilesResult.Output -split "`n" | Where-Object { $_ -ne "" }
    }
    
    if ($diffStats.Success) {
        $diffInfo.Stats = $diffStats.Output
    }
    
    # Commits locaux non pouss√©s
    $localCommitsResult = Test-GitCommand "log --oneline $Remote/$Branch..HEAD"
    if ($localCommitsResult.Success) {
        $diffInfo.LocalCommits = $localCommitsResult.Output -split "`n" | Where-Object { $_ -ne "" }
    }
    
    # Commits distants non r√©cup√©r√©s
    $remoteCommitsResult = Test-GitCommand "log --oneline HEAD..$Remote/$Branch"
    if ($remoteCommitsResult.Success) {
        $diffInfo.RemoteCommits = $remoteCommitsResult.Output -split "`n" | Where-Object { $_ -ne "" }
    }
    
    return $diffInfo
}

function Repair-GitRepo {
    param(
        [string]$Remote,
        [string]$Branch,
        [bool]$Force
    )
    
    Write-Section "TENTATIVE DE R√âPARATION DU D√âP√îT GIT"
    
    # V√©rification int√©grit√©
    Write-SubSection "V√©rification int√©grit√© du d√©p√¥t"
    $fsckResult = Test-GitCommand "fsck --full"
    if (-not $fsckResult.Success) {
        Write-ColorHost "‚ùå Corruption d√©tect√©e dans le d√©p√¥t:" "Red"
        Write-Host $fsckResult.Error
        
        if ($Force -or (Read-Host "Tenter une r√©paration automatique? (y/N)") -eq "y") {
            Write-SubSection "R√©paration automatique"
            
            # Nettoyage du cache
            Test-GitCommand "gc --aggressive --prune=now"
            
            # R√©indexation
            Test-GitCommand "reset --hard HEAD"
            
            # Test apr√®s r√©paration
            $fsckAfter = Test-GitCommand "fsck --full"
            if ($fsckAfter.Success) {
                Write-ColorHost "‚úì R√©paration r√©ussie" "Green"
            } else {
                Write-ColorHost "‚ùå R√©paration √©chou√©e" "Red"
                return $false
            }
        } else {
            return $false
        }
    } else {
        Write-ColorHost "‚úì Int√©grit√© du d√©p√¥t OK" "Green"
    }
    
    return $true
}

function Sync-WithRemote {
    param(
        [string]$Remote,
        [string]$Branch,
        [array]$FilesChanged,
        [bool]$Force
    )
    
    Write-Section "SYNCHRONISATION AVEC LE D√âP√îT DISTANT"
    
    if ($FilesChanged.Count -eq 0) {
        Write-ColorHost "‚úì Aucune diff√©rence avec le d√©p√¥t distant" "Green"
        return $true
    }
    
    Write-ColorHost "üìÅ Fichiers diff√©rents du d√©p√¥t distant:" "Orange"
    $FilesChanged | ForEach-Object { Write-Host "  $_" }
    
    if ($Force -or (Read-Host "Pousser les modifications vers le d√©p√¥t distant? (y/N)") -eq "y") {
        Write-SubSection "Ajout des fichiers modifi√©s"
        $addResult = Test-GitCommand "add -A"
        if (-not $addResult.Success) {
            Write-ColorHost "‚ùå √âchec ajout des fichiers" "Red"
            return $false
        }
        
        Write-SubSection "Commit des modifications"
        $commitMessage = "Synchronisation forc√©e - Correction corruption Git $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        $commitResult = Test-GitCommand "commit -m `"$commitMessage`""
        if (-not $commitResult.Success) {
            Write-ColorHost "‚ö†Ô∏è Aucune modification √† commiter ou √©chec commit" "Yellow"
        }
        
        Write-SubSection "Push vers $Remote/$Branch"
        $pushResult = Test-GitCommand "push $Remote $Branch --force-with-lease"
        if ($pushResult.Success) {
            Write-ColorHost "‚úì Push r√©ussi" "Green"
            return $true
        } else {
            Write-ColorHost "‚ùå √âchec push: $($pushResult.Error)" "Red"
            
            # Tentative push force
            if ($Force -or (Read-Host "Tenter un push forc√©? (y/N)") -eq "y") {
                $forcePushResult = Test-GitCommand "push $Remote $Branch --force"
                if ($forcePushResult.Success) {
                    Write-ColorHost "‚úì Push forc√© r√©ussi" "Green"
                    return $true
                } else {
                    Write-ColorHost "‚ùå √âchec push forc√©: $($forcePushResult.Error)" "Red"
                    return $false
                }
            }
            return $false
        }
    }
    
    return $true
}

function Show-Summary {
    param(
        [hashtable]$RepoInfo,
        [hashtable]$DiffInfo,
        [bool]$SyncSuccess
    )
    
    Write-Section "R√âSUM√â DU DIAGNOSTIC"
    
    # √âtat du d√©p√¥t
    Write-SubSection "√âtat du d√©p√¥t Git"
    if ($RepoInfo.HasGitRepo) {
        Write-ColorHost "‚úì D√©p√¥t Git pr√©sent" "Green"
        Write-Host "  Taille: $([math]::Round($RepoInfo.RepoSize / 1MB, 2)) MB"
        Write-Host "  Branche: $($RepoInfo.CurrentBranch)"
        Write-Host "  Status: $($RepoInfo.Corrupted ? 'CORROMPU' : 'OK')" 
    } else {
        Write-ColorHost "‚ùå Aucun d√©p√¥t Git d√©tect√©" "Red"
    }
    
    # Remotes
    Write-SubSection "Remotes configur√©s"
    if ($RepoInfo.Remotes.Count -gt 0) {
        $RepoInfo.Remotes | ForEach-Object { Write-Host "  $_" }
    } else {
        Write-ColorHost "‚ùå Aucun remote configur√©" "Red"
    }
    
    # Diff√©rences avec le distant
    if ($DiffInfo) {
        Write-SubSection "Diff√©rences avec le d√©p√¥t distant"
        Write-Host "  Fichiers modifi√©s: $($DiffInfo.FilesChanged.Count)"
        Write-Host "  Commits locaux non pouss√©s: $($DiffInfo.LocalCommits.Count)"
        Write-Host "  Commits distants non r√©cup√©r√©s: $($DiffInfo.RemoteCommits.Count)"
    }
    
    # R√©sultat synchronisation
    Write-SubSection "Synchronisation"
    if ($SyncSuccess) {
        Write-ColorHost "‚úì Synchronisation r√©ussie" "Green"
    } else {
        Write-ColorHost "‚ùå Probl√®mes de synchronisation" "Red"
    }
}

# SCRIPT PRINCIPAL
function Main {
    Write-Section "DIAGNOSTIC CORRUPTION GIT ET SYNCHRONISATION D√âP√îT DISTANT"
    
    # 1. Diagnostic initial
    Write-Section "DIAGNOSTIC INITIAL"
    $repoInfo = Get-GitRepoInfo
    
    Write-SubSection "Informations Git"
    if ($repoInfo.GitVersion) {
        Write-ColorHost "‚úì Git version: $($repoInfo.GitVersion)" "Green"
    } else {
        Write-ColorHost "‚ùå Git non accessible" "Red"
        exit 1
    }
    
    if (-not $repoInfo.HasGitRepo) {
        Write-ColorHost "‚ùå Aucun d√©p√¥t Git d√©tect√© dans le r√©pertoire courant" "Red"
        if ($Force -or (Read-Host "Initialiser un nouveau d√©p√¥t Git? (y/N)") -eq "y") {
            $initResult = Test-GitCommand "init"
            if ($initResult.Success) {
                Write-ColorHost "‚úì D√©p√¥t Git initialis√©" "Green"
                $repoInfo = Get-GitRepoInfo
            } else {
                Write-ColorHost "‚ùå √âchec initialisation Git" "Red"
                exit 1
            }
        } else {
            exit 1
        }
    }
    
    Write-SubSection "√âtat du d√©p√¥t local"
    Write-Host "Taille du d√©p√¥t: $([math]::Round($repoInfo.RepoSize / 1MB, 2)) MB"
    Write-Host "Branche actuelle: $($repoInfo.CurrentBranch ?? 'Aucune')"
    Write-Host "Fichiers modifi√©s: $($repoInfo.Status.Count)"
    
    if ($repoInfo.Corrupted) {
        Write-ColorHost "‚ö†Ô∏è Corruption d√©tect√©e dans le d√©p√¥t" "Yellow"
        $repairSuccess = Repair-GitRepo -Remote $Remote -Branch $Branch -Force $Force
        if (-not $repairSuccess) {
            Write-ColorHost "‚ùå Impossible de r√©parer le d√©p√¥t" "Red"
            exit 1
        }
    }
    
    # 2. Analyse des remotes
    Write-Section "ANALYSE DES REMOTES"
    if ($repoInfo.Remotes.Count -eq 0) {
        Write-ColorHost "‚ùå Aucun remote configur√©" "Red"
        $remoteUrl = Read-Host "URL du d√©p√¥t distant (optionnel)"
        if ($remoteUrl) {
            $addRemoteResult = Test-GitCommand "remote add $Remote $remoteUrl"
            if ($addRemoteResult.Success) {
                Write-ColorHost "‚úì Remote $Remote ajout√©" "Green"
            } else {
                Write-ColorHost "‚ùå √âchec ajout remote" "Red"
            }
        }
    } else {
        Write-ColorHost "‚úì Remotes configur√©s:" "Green"
        $repoInfo.Remotes | ForEach-Object { Write-Host "  $_" }
    }
    
    # 3. Diff avec le d√©p√¥t distant
    $diffInfo = $null
    $syncSuccess = $true
    
    if ($repoInfo.Remotes.Count -gt 0) {
        Write-Section "COMPARAISON AVEC LE D√âP√îT DISTANT"
        $diffInfo = Get-RemoteDiff -Remote $Remote -Branch $Branch
        
        if ($diffInfo) {
            Write-SubSection "R√©sultats de la comparaison"
            Write-Host "Fichiers modifi√©s localement: $($diffInfo.FilesChanged.Count)"
            Write-Host "Commits locaux non pouss√©s: $($diffInfo.LocalCommits.Count)"
            Write-Host "Commits distants non r√©cup√©r√©s: $($diffInfo.RemoteCommits.Count)"
            
            if ($diffInfo.FilesChanged.Count -gt 0) {
                Write-ColorHost "üìÅ Fichiers diff√©rents:" "Orange"
                $diffInfo.FilesChanged | Select-Object -First 10 | ForEach-Object { Write-Host "  $_" }
                if ($diffInfo.FilesChanged.Count -gt 10) {
                    Write-Host "  ... et $($diffInfo.FilesChanged.Count - 10) autres"
                }
            }
            
            if ($diffInfo.Stats) {
                Write-SubSection "Statistiques des diff√©rences"
                Write-Host $diffInfo.Stats
            }
            
            # 4. Synchronisation
            $syncSuccess = Sync-WithRemote -Remote $Remote -Branch $Branch -FilesChanged $diffInfo.FilesChanged -Force $Force
        } else {
            Write-ColorHost "‚ùå Impossible de comparer avec le d√©p√¥t distant" "Red"
            $syncSuccess = $false
        }
    } else {
        Write-ColorHost "‚ö†Ô∏è Pas de remote configur√©, synchronisation impossible" "Yellow"
        $syncSuccess = $false
    }
    
    # 5. R√©sum√© final
    Show-Summary -RepoInfo $repoInfo -DiffInfo $diffInfo -SyncSuccess $syncSuccess
    
    # 6. Recommandations
    Write-Section "RECOMMANDATIONS"
    if (-not $syncSuccess) {
        Write-ColorHost "üîß Actions recommand√©es:" "Yellow"
        Write-Host "  1. V√©rifier la connectivit√© r√©seau"
        Write-Host "  2. V√©rifier les permissions sur le d√©p√¥t distant"
        Write-Host "  3. Configurer correctement les remotes"
        Write-Host "  4. Relancer le script avec -Force pour forcer les op√©rations"
    } else {
        Write-ColorHost "‚úÖ D√©p√¥t Git synchronis√© avec succ√®s" "Green"
    }
    
    return $syncSuccess ? 0 : 1
}

# Ex√©cution du script principal
exit (Main)