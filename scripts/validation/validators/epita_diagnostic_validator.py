import argumentation_analysis.core.environment

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Validateur pour le Diagnostic complet de la d√©mo √âpita et de ses composants illustr√©s
"""

import asyncio
import os
import sys
from pathlib import Path
from typing import Dict, List, Any, Coroutine

# Ajout du r√©pertoire racine au sys.path pour permettre l'import de modules du projet
current_script_path = Path(__file__).resolve()
project_root = (
    current_script_path.parent.parent.parent
)  # scripts/validation/validators -> scripts/validation -> scripts -> project_root
sys.path.insert(0, str(project_root))

# Activation automatique de l'environnement si n√©cessaire pour les composants diagnostiqu√©s
# from scripts.core.auto_env import ensure_env # Comment√© car ensure_env est appel√© dans les fonctions de d√©mo
# ensure_env() # Potentiellement appeler ici si les fonctions internes ne le font pas.

# --- D√©but de la logique copi√©e et adapt√©e de demos/demo_epita_diagnostic.py ---


def catalogue_composants_demo_epita() -> Dict[str, Any]:
    """Catalogue complet des composants de d√©mo √âpita d√©couverts"""

    # print("=" * 80)
    # print("DIAGNOSTIC D√âMO √âPITA - COMPOSANTS ILLUSTR√âS (dans validateur)")
    # print("=" * 80)

    # Note: Les statuts et probl√®mes sont ceux observ√©s au moment de la cr√©ation de la d√©mo originale.
    # Un vrai diagnostic dynamique n√©cessiterait d'ex√©cuter r√©ellement les tests ici.
    composants = {
        "demo_unified_system.py": {
            "status": "[?] √Ä V√âRIFIER",  # Modifi√© pour refl√©ter un diagnostic
            "description": "Syst√®me de d√©monstration unifi√© - Consolidation de 8 fichiers d√©mo",
            "problemes": [
                "Potentiel: ModuleNotFoundError: No module named 'semantic_kernel.agents'",
                "Potentiel: UnicodeEncodeError dans l'affichage d'erreurs",
                "Potentiel: D√©pendances manquantes pour l'√©cosyst√®me unifi√©",
            ],
            "fonctionnalites": [
                "8 modes de d√©monstration (educational, research, showcase, etc.)",
                "Correction intelligente des erreurs modales",
                "Orchestrateur master de validation",
                "Exploration corpus chiffr√©",
                "Capture compl√®te de traces",
                "Analyse unifi√©e compl√®te",
            ],
            "integration": "Sherlock/Watson, analyse rh√©torique, TweetyErrorAnalyzer",
            "valeur_pedagogique": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Excellente - Syst√®me complet et illustratif",
            "test_realise": "NON - √Ä ex√©cuter par le validateur",
        },
        "playwright/demo_service_manager_validated.py": {
            "status": "[?] √Ä V√âRIFIER",
            "description": "D√©monstration compl√®te du ServiceManager - Validation finale",
            "problemes": [],
            "fonctionnalites": [
                "Gestion des ports automatique",
                "Enregistrement et orchestration de services",
                "Patterns migr√©s depuis PowerShell",
                "Compatibilit√© cross-platform",
                "Nettoyage gracieux des processus (48 processus Node arr√™t√©s)",
            ],
            "integration": "Infrastructure de base, remplacement scripts PowerShell",
            "valeur_pedagogique": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Excellente - Infrastructure compl√®tement fonctionnelle",
            "test_realise": "NON - √Ä ex√©cuter par le validateur",
        },
        "playwright/test_interface_demo.html": {
            "status": "[?] √Ä V√âRIFIER",
            "description": "Interface web d'analyse argumentative - Interface de test",
            "problemes": [],
            "fonctionnalites": [
                "Interface utilisateur intuitive et moderne",
                "Chargement d'exemples fonctionnel (syllogisme Socrate)",
                "Analyse simul√©e avec r√©sultats d√©taill√©s",
                "Affichage: 2 arguments, 2 sophismes, score 0.70",
                "Design responsive et accessible",
            ],
            "integration": "Interface frontend pour l'analyse argumentative",
            "valeur_pedagogique": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Excellente - Interface parfaite pour √©tudiants",
            "test_realise": "NON - √Ä ex√©cuter par le validateur",
        },
        "playwright/README.md": {
            "status": "[INFO] DOCUMENTATION",
            "description": "Documentation des 9 tests fonctionnels Playwright",
            "problemes": [],
            "fonctionnalites": [
                "9 tests fonctionnels document√©s",
                "test_argument_analyzer.py",
                "test_fallacy_detector.py",
                "test_integration_workflows.py",
                "Infrastructure de test end-to-end",
            ],
            "integration": "Framework de test complet, validation bout-en-bout",
            "valeur_pedagogique": "‚≠ê‚≠ê‚≠ê‚≠ê Tr√®s bonne - Documentation compl√®te",
        },
    }

    return composants


def diagnostiquer_problemes_dependances() -> Dict[str, Any]:
    """Diagnostic des probl√®mes de d√©pendances potentiels"""

    # print("\n" + "=" * 60)
    # print("DIAGNOSTIC D√âPENDANCES - PROBL√àMES POTENTIELS (dans validateur)")
    # print("=" * 60)

    problemes = {
        "semantic_kernel.agents": {
            "erreur": "Potentiel: ModuleNotFoundError: No module named 'semantic_kernel.agents'",
            "impact": "Emp√™che l'ex√©cution du syst√®me unifi√© principal",
            "solution_recommandee": "pip install semantic-kernel[agents] ou mise √† jour des imports",
            "composants_affectes": [
                "RealLLMOrchestrator",
                "ConversationOrchestrator",
                "cluedo_extended_orchestrator",
            ],
            "criticite": "HAUTE",
        },
        "encodage_unicode": {
            "erreur": "Potentiel: UnicodeEncodeError: 'charmap' codec can't encode characters",
            "impact": "Probl√®me d'affichage des caract√®res sp√©ciaux en console Windows",
            "solution_recommandee": "Configuration PYTHONIOENCODING=utf-8",
            "composants_affectes": [
                "Messages d'erreur avec emojis",
                "Affichage console",
            ],
            "criticite": "MOYENNE",
        },
        "composants_unifies_manquants": {
            "erreur": "Potentiel: UNIFIED_COMPONENTS_AVAILABLE = False",
            "impact": "Mode d√©grad√© pour les d√©monstrations avanc√©es",
            "solution_recommandee": "V√©rifier l'int√©grit√© des imports de l'√©cosyst√®me refactoris√©",
            "composants_affectes": [
                "UnifiedTextAnalysisPipeline",
                "UnifiedSourceManager",
                "ReportGenerator",
            ],
            "criticite": "HAUTE",
        },
    }

    return problemes


def evaluer_qualite_pedagogique() -> Dict[str, Any]:
    """√âvaluation de la qualit√© p√©dagogique pour le contexte √âpita (bas√©e sur la d√©mo originale)"""

    # print("\n" + "=" * 60)
    # print("√âVALUATION QUALIT√â P√âDAGOGIQUE - CONTEXTE √âPITA (dans validateur)")
    # print("=" * 60)

    evaluation = {
        "strengths": [
            "Potentiel: ServiceManager COMPL√àTEMENT fonctionnel (ports, services, nettoyage)",
            "Potentiel: Interface web PARFAITEMENT op√©rationnelle (design + fonctionnalit√©s)",
            "üéØ Diversit√© des modes de d√©monstration (8 modes diff√©rents)",
            "üìö Documentation compl√®te des 9 tests fonctionnels Playwright",
            "üèóÔ∏è Architecture modulaire et extensible (en cours de validation)",
            "[AMPOULE] Exemples p√©dagogiques concrets (syllogisme Socrate)",
            "[ROTATION] Int√©gration syst√®me Sherlock/Watson (√† valider √† 88-96%)",
            "üßπ Nettoyage automatique des processus (√† valider, ex: 48 processus Node g√©r√©s)",
        ],
        "weaknesses": [
            "Risque: demo_unified_system.py non fonctionnel (semantic_kernel.agents)",
            "Attention: Probl√®mes d'encodage Unicode en environnement Windows",
            "D√©pendances psutil/requests pourraient n√©cessiter installation manuelle",
            "Configuration environnement complexe pour certains composants",
        ],
        "tests_a_realiser": [  # Modifi√© de "tests_realises"
            "ServiceManager: Gestion ports, services, nettoyage",
            "Interface web: Chargement, exemple, analyse",
            "Syst√®me unifi√©: V√©rifier d√©pendances et ex√©cution",
            "Documentation: V√©rifier exhaustivit√© des 9 tests Playwright",
        ],
        "recommandations": [
            "Installer semantic-kernel[agents] si n√©cessaire",
            "Cr√©er/v√©rifier requirements.txt avec psutil, requests, semantic-kernel",
            "Script setup.py automatique pour installation √âpita (si pertinent)",
            "Guide d√©marrage rapide sp√©cifique √©tudiants",
            "Capturer d√©mos vid√©o des composants fonctionnels (apr√®s validation)",
        ],
        "score_global_estime": "85/100 (estimation bas√©e sur d√©mo originale, √† confirmer)",
    }

    return evaluation


def generer_plan_actions_validation() -> (
    Dict[str, Any]
):  # Renomm√© de generer_plan_correction
    """G√©n√®re un plan d'actions pour la validation"""

    # print("\n" + "=" * 60)
    # print("PLAN D'ACTIONS VALIDATION (dans validateur)")
    # print("=" * 60)

    plan = {
        "priorite_1_verification_critique": [
            "1. V√©rifier d√©pendance semantic_kernel.agents et sa r√©solution",
            "2. Tester affichage Unicode en console",
            "3. Valider imports et disponibilit√© de l'√©cosyst√®me unifi√©",
        ],
        "priorite_2_tests_fonctionnels": [
            "4. Ex√©cuter les tests des modes de d√©monstration individuellement",
            "5. Valider l'int√©gration Sherlock/Watson dans les d√©mos concern√©es",
            "6. V√©rifier la pr√©sence de fallbacks pour composants manquants",
        ],
        "priorite_3_documentation_et_amelioration": [
            "7. Sugg√©rer l'automatisation de l'installation des d√©pendances si probl√©matique",
            "8. √âvaluer l'exp√©rience utilisateur pour les √©tudiants √âpita",
            "9. V√©rifier la clart√© de la documentation de d√©marrage rapide",
        ],
    }

    return plan


async def perform_epita_diagnostic(
    report_errors_list: list, available_components: Dict[str, bool]
) -> Dict[str, Any]:
    """Point d'entr√©e principal du diagnostic adapt√© pour le validateur"""

    # print("[VALIDATEUR-DIAGNOSTIC] DEMO EPITA - INTELLIGENCE SYMBOLIQUE")
    # print("Date: (Dynamique)") # La date sera celle de l'ex√©cution du validateur
    # print("Objectif: Validation des composants illustr√©s dans la d√©mo √âpita")

    # Activation de l'environnement si n√©cessaire (peut √™tre fait une seule fois au d√©but du script)
    # from scripts.core.auto_env import ensure_env # D√©j√† import√© globalement ou comment√©
    # ensure_env() # Assurez-vous que cela est appel√© correctement si n√©cessaire

    # Catalogue des composants (bas√© sur la structure de la d√©mo)
    composants = catalogue_composants_demo_epita()

    # Diagnostic des probl√®mes potentiels (bas√© sur la structure de la d√©mo)
    problemes_potentiels = diagnostiquer_problemes_dependances()

    # √âvaluation p√©dagogique (bas√©e sur la structure de la d√©mo)
    evaluation_pedagogique = evaluer_qualite_pedagogique()

    # Plan d'actions pour la validation
    plan_validation = generer_plan_actions_validation()

    # Ici, on pourrait ajouter une logique pour r√©ellement ex√©cuter des tests
    # et mettre √† jour dynamiquement les statuts dans 'composants' et 'problemes_potentiels'.
    # Par exemple:
    # try:
    #     # Simuler un test
    #     # from demos import demo_unified_system # Tentative d'import
    #     # resultat_test_unifie = await demo_unified_system.run_specific_test()
    #     composants["demo_unified_system.py"]["status"] = "[OK] TEST SIMUL√â R√âUSSI"
    # except Exception as e:
    #     composants["demo_unified_system.py"]["status"] = f"[X] √âCHEC TEST SIMUL√â: {e}"
    #     report_errors_list.append(f"Erreur diagnostic demo_unified_system: {e}")

    # Pour l'instant, ce validateur retourne une analyse statique bas√©e sur le script de d√©mo.

    diagnostic_results = {
        "titre": "Rapport de Diagnostic D√©mo √âpita (via Validateur)",
        "composants_catalogues": composants,
        "problemes_dependances_potentiels": problemes_potentiels,
        "evaluation_pedagogique_estimee": evaluation_pedagogique,
        "plan_actions_validation": plan_validation,
        "status_global_diagnostic": "ANALYSE_STATIQUE_EFFECTUEE"
        # Ce statut pourrait devenir DYNAMIQUE si des tests r√©els sont impl√©ment√©s
    }

    # Ajouter des erreurs au rapport global si n√©cessaire
    if any("[X]" in comp["status"] for comp in composants.values() if "status" in comp):
        report_errors_list.append(
            "Des composants de la d√©mo √âpita ont un statut d'√©chec potentiel ou de v√©rification n√©cessaire."
        )

    return diagnostic_results


# --- Fin de la logique copi√©e et adapt√©e ---


async def validate_epita_diagnostic(
    report_errors_list: list,
    available_components: Dict[str, bool],
    # Ajoutez d'autres param√®tres si n√©cessaire, par exemple:
    # config: 'ValidationConfiguration' (du futur core.py)
) -> Dict[str, Any]:
    """
    Fonction principale du validateur pour le mode EPITA_DIAGNOSTIC.
    Ex√©cute un diagnostic complet des composants de la d√©mo √âpita.
    """

    # print(f"[VALIDATOR - epita_diagnostic_validator] D√©marrage de la validation EPITA Diagnostic.")
    # print(f"[VALIDATOR - epita_diagnostic_validator] Composants disponibles: {available_components}")

    # Appel de la logique de diagnostic principale
    # Cette fonction est d√©j√† asynchrone dans sa nouvelle forme.
    results = await perform_epita_diagnostic(report_errors_list, available_components)

    # print(f"[VALIDATOR - epita_diagnostic_validator] Validation EPITA Diagnostic termin√©e.")
    return results


async def main_test():
    """Fonction de test pour ce module validateur."""
    print("Test du validateur epita_diagnostic_validator.py")
    errors = []
    components = {"EPITA_DEMO_COMPONENT_1": True, "EPITA_DEMO_COMPONENT_2": False}

    diagnostic_report = await validate_epita_diagnostic(errors, components)

    import json

    print("\n--- RAPPORT DE DIAGNOSTIC ---")
    print(json.dumps(diagnostic_report, indent=2, ensure_ascii=False))

    if errors:
        print("\n--- ERREURS RAPPORT√âES ---")
        for err in errors:
            print(f"- {err}")


if __name__ == "__main__":
    # Pour ex√©cuter un test simple de ce module :
    # python scripts/validation/validators/epita_diagnostic_validator.py
    asyncio.run(main_test())
