#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Script de r√©solution automatique des probl√®mes d'environnement.

Ce script r√©sout automatiquement les probl√®mes identifi√©s par diagnostic_environnement.py :
1. Installation du package en mode d√©veloppement
2. Installation des d√©pendances manquantes
3. Configuration du mock JPype si n√©cessaire
4. Validation finale
"""

import sys
import os
import logging
import subprocess
import json
from pathlib import Path
from typing import Dict, List, Tuple, Optional

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger("fix_environment")

class EnvironmentFixer:
    """Classe pour r√©soudre automatiquement les probl√®mes d'environnement."""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent.parent
        self.diagnostic_report = None
        
    def load_diagnostic_report(self) -> Optional[Dict]:
        """Charge le rapport de diagnostic s'il existe."""
        report_path = self.project_root / "diagnostic_report.json"
        
        if report_path.exists():
            try:
                with open(report_path, 'r', encoding='utf-8') as f:
                    self.diagnostic_report = json.load(f)
                logger.info("‚úÖ Rapport de diagnostic charg√©")
                return self.diagnostic_report
            except Exception as e:
                logger.warning(f"Erreur lors du chargement du rapport: {e}")
        else:
            logger.info("‚ÑπÔ∏è  Aucun rapport de diagnostic trouv√©, ex√©cution du diagnostic...")
            
        return None
    
    def run_command(self, cmd: List[str], cwd: Optional[Path] = None) -> Tuple[int, str, str]:
        """Ex√©cute une commande et retourne le r√©sultat."""
        try:
            logger.info(f"Ex√©cution: {' '.join(cmd)}")
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                cwd=cwd or self.project_root
            )
            stdout, stderr = process.communicate()
            return process.returncode, stdout, stderr
        except Exception as e:
            logger.error(f"Erreur lors de l'ex√©cution de {cmd}: {e}")
            return -1, "", str(e)
    
    def fix_package_installation(self) -> bool:
        """Installe le package en mode d√©veloppement."""
        logger.info("üîß Installation du package en mode d√©veloppement...")
        
        # V√©rifier si setup.py existe
        setup_py = self.project_root / "setup.py"
        if not setup_py.exists():
            logger.error("‚ùå Fichier setup.py non trouv√©")
            return False
        
        # Installer en mode d√©veloppement
        returncode, stdout, stderr = self.run_command([
            sys.executable, "-m", "pip", "install", "-e", "."
        ])
        
        if returncode == 0:
            logger.info("‚úÖ Package install√© en mode d√©veloppement")
            return True
        else:
            logger.error(f"‚ùå Erreur lors de l'installation: {stderr}")
            return False
    
    def fix_essential_dependencies(self) -> bool:
        """Installe les d√©pendances essentielles manquantes."""
        logger.info("üîß Installation des d√©pendances essentielles...")
        
        # D√©pendances essentielles de base
        essential_deps = [
            "numpy>=1.24.0",
            "pandas>=2.0.0", 
            "matplotlib>=3.5.0",
            "cryptography>=37.0.0",
            "cffi>=1.15.0",
            "psutil>=5.9.0"
        ]
        
        # Installer les d√©pendances essentielles
        returncode, stdout, stderr = self.run_command([
            sys.executable, "-m", "pip", "install"
        ] + essential_deps)
        
        if returncode == 0:
            logger.info("‚úÖ D√©pendances essentielles install√©es")
        else:
            logger.warning(f"‚ö†Ô∏è  Probl√®me lors de l'installation des d√©pendances: {stderr}")
        
        return returncode == 0
    
    def fix_test_dependencies(self) -> bool:
        """Installe les d√©pendances de test."""
        logger.info("üîß Installation des d√©pendances de test...")
        
        test_deps = [
            "pytest>=7.0.0",
            "pytest-cov>=3.0.0",
            "pytest-asyncio>=0.18.0"
        ]
        
        returncode, stdout, stderr = self.run_command([
            sys.executable, "-m", "pip", "install"
        ] + test_deps)
        
        if returncode == 0:
            logger.info("‚úÖ D√©pendances de test install√©es")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è  Probl√®me lors de l'installation des d√©pendances de test: {stderr}")
            return False
    
    def fix_jpype_configuration(self) -> bool:
        """Configure JPype ou le mock JPype."""
        logger.info("üîß Configuration de JPype...")
        
        # V√©rifier la version de Python
        python_version = sys.version_info
        
        if python_version >= (3, 12):
            logger.info("Python 3.12+ d√©tect√©, configuration du mock JPype...")
            return self.setup_jpype_mock()
        else:
            logger.info("Python < 3.12 d√©tect√©, tentative d'installation de JPype1...")
            return self.install_jpype1()
    
    def install_jpype1(self) -> bool:
        """Tente d'installer JPype1."""
        try:
            returncode, stdout, stderr = self.run_command([
                sys.executable, "-m", "pip", "install", "jpype1>=1.4.0"
            ])
            
            if returncode == 0:
                logger.info("‚úÖ JPype1 install√© avec succ√®s")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è  √âchec de l'installation de JPype1: {stderr}")
                logger.info("Basculement vers le mock JPype...")
                return self.setup_jpype_mock()
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  Erreur lors de l'installation de JPype1: {e}")
            logger.info("Basculement vers le mock JPype...")
            return self.setup_jpype_mock()
    
    def setup_jpype_mock(self) -> bool:
        """Configure le mock JPype."""
        logger.info("üîß Configuration du mock JPype...")
        
        # Cr√©er le r√©pertoire des mocks s'il n'existe pas
        mock_dir = self.project_root / "tests" / "mocks"
        mock_dir.mkdir(parents=True, exist_ok=True)
        
        # Cr√©er le fichier __init__.py
        init_file = mock_dir / "__init__.py"
        if not init_file.exists():
            init_file.write_text("# Mock modules\n")
        
        # Cr√©er le mock JPype
        mock_content = '''"""
Mock de JPype1 pour la compatibilit√© avec Python 3.12+.

Ce mock simule les fonctionnalit√©s essentielles de JPype1 utilis√©es par le projet.
"""

import sys
import os
from unittest.mock import MagicMock

# Version du mock
__version__ = "1.4.0-mock"

# Variables globales pour simuler l'√©tat de la JVM
_jvm_started = False
_jvm_path = None

def isJVMStarted():
    """Simule jpype.isJVMStarted()."""
    return _jvm_started

def startJVM(jvmpath=None, *args, **kwargs):
    """Simule jpype.startJVM()."""
    global _jvm_started, _jvm_path
    _jvm_started = True
    _jvm_path = jvmpath or getDefaultJVMPath()
    print(f"[MOCK] JVM d√©marr√©e avec le chemin: {_jvm_path}")

def shutdownJVM():
    """Simule jpype.shutdownJVM()."""
    global _jvm_started
    _jvm_started = False
    print("[MOCK] JVM arr√™t√©e")

def getDefaultJVMPath():
    """Simule jpype.getDefaultJVMPath()."""
    # Retourner un chemin par d√©faut bas√© sur l'OS
    if sys.platform == "win32":
        return "C:\\\\Program Files\\\\Java\\\\jdk-11\\\\bin\\\\server\\\\jvm.dll"
    elif sys.platform == "darwin":
        return "/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home/lib/server/libjvm.dylib"
    else:
        return "/usr/lib/jvm/java-11-openjdk/lib/server/libjvm.so"

def JClass(name):
    """Simule jpype.JClass()."""
    mock_class = MagicMock()
    mock_class.__name__ = name
    return mock_class

def JArray(type_):
    """Simule jpype.JArray()."""
    return MagicMock()

def JString(value):
    """Simule jpype.JString()."""
    return str(value)

# Classes Java simul√©es
class JObject:
    """Simule jpype.JObject."""
    pass

class JException(Exception):
    """Simule jpype.JException."""
    pass

# Installer le mock dans sys.modules
sys.modules['jpype1'] = sys.modules[__name__]
sys.modules['jpype'] = sys.modules[__name__]

print("[MOCK] Mock JPype1 activ√© pour la compatibilit√© Python 3.12+")
'''
        
        mock_file = mock_dir / "jpype_mock.py"
        with open(mock_file, 'w', encoding='utf-8') as f:
            f.write(mock_content)
        
        logger.info("‚úÖ Mock JPype configur√©")
        
        # Cr√©er un script d'activation du mock
        activation_script = '''"""
Script d'activation du mock JPype.
√Ä importer avant toute utilisation de JPype dans les tests.
"""

# Importer le mock pour l'activer
from tests.mocks import jpype_mock

print("Mock JPype activ√©")
'''
        
        activation_file = mock_dir / "activate_jpype_mock.py"
        with open(activation_file, 'w', encoding='utf-8') as f:
            f.write(activation_script)
        
        return True
    
    def create_installation_script(self) -> Path:
        """Cr√©e un script d'installation complet pour les √©tudiants."""
        script_content = '''#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Script d'installation automatique pour les √©tudiants.
Ce script configure automatiquement l'environnement de d√©veloppement.
"""

import sys
import subprocess
import os
from pathlib import Path

def run_command(cmd):
    """Ex√©cute une commande et affiche le r√©sultat."""
    print(f"Ex√©cution: {' '.join(cmd)}")
    result = subprocess.run(cmd, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Erreur: {result.stderr}")
        return False
    return True

def main():
    """Installation automatique."""
    print("üöÄ Installation automatique de l'environnement...")
    print("=" * 50)
    
    # V√©rifier Python
    print(f"Python version: {sys.version}")
    
    # Mettre √† jour pip
    print("\\nüì¶ Mise √† jour de pip...")
    run_command([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
    
    # Installer le package en mode d√©veloppement
    print("\\nüîß Installation du package en mode d√©veloppement...")
    if not run_command([sys.executable, "-m", "pip", "install", "-e", "."]):
        print("‚ùå √âchec de l'installation du package")
        return False
    
    # Installer les d√©pendances essentielles
    print("\\nüìö Installation des d√©pendances essentielles...")
    essential_deps = [
        "numpy>=1.24.0", "pandas>=2.0.0", "matplotlib>=3.5.0",
        "cryptography>=37.0.0", "cffi>=1.15.0", "psutil>=5.9.0",
        "pytest>=7.0.0", "pytest-cov>=3.0.0"
    ]
    
    if not run_command([sys.executable, "-m", "pip", "install"] + essential_deps):
        print("‚ö†Ô∏è  Probl√®me lors de l'installation des d√©pendances")
    
    # Configurer JPype
    print("\\n‚òï Configuration de JPype...")
    python_version = sys.version_info
    if python_version >= (3, 12):
        print("Python 3.12+ d√©tect√©, utilisation du mock JPype")
        # Le mock sera configur√© automatiquement
    else:
        print("Tentative d'installation de JPype1...")
        run_command([sys.executable, "-m", "pip", "install", "jpype1>=1.4.0"])
    
    # Validation finale
    print("\\n‚úÖ Validation de l'installation...")
    validation_result = subprocess.run([
        sys.executable, "scripts/setup/validate_environment.py"
    ], capture_output=True, text=True)
    
    if validation_result.returncode == 0:
        print("üéâ Installation r√©ussie!")
        print("\\nVous pouvez maintenant:")
        print("  - Ex√©cuter les tests: pytest")
        print("  - Utiliser les notebooks: jupyter notebook")
        print("  - Consulter la documentation: docs/")
    else:
        print("‚ö†Ô∏è  Installation partiellement r√©ussie")
        print("Consultez le rapport de diagnostic pour plus de d√©tails")
    
    return validation_result.returncode == 0

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
'''
        
        script_path = self.project_root / "install_environment.py"
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(script_content)
        
        logger.info(f"‚úÖ Script d'installation cr√©√©: {script_path}")
        return script_path
    
    def run_validation(self) -> bool:
        """Ex√©cute la validation finale."""
        logger.info("üîç Validation finale de l'environnement...")
        
        validation_script = self.project_root / "scripts" / "setup" / "validate_environment.py"
        
        if validation_script.exists():
            returncode, stdout, stderr = self.run_command([
                sys.executable, str(validation_script)
            ])
            
            if returncode == 0:
                logger.info("‚úÖ Validation r√©ussie!")
                return True
            else:
                logger.warning("‚ö†Ô∏è  Validation partiellement r√©ussie")
                logger.info(stdout)
                return False
        else:
            logger.warning("Script de validation non trouv√©")
            return False
    
    def fix_all_issues(self) -> bool:
        """R√©sout tous les probl√®mes d√©tect√©s."""
        logger.info("üöÄ R√©solution automatique des probl√®mes...")
        logger.info("=" * 60)
        
        success = True
        
        # 1. Installer le package en mode d√©veloppement
        if not self.fix_package_installation():
            success = False
        
        # 2. Installer les d√©pendances essentielles
        if not self.fix_essential_dependencies():
            success = False
        
        # 3. Installer les d√©pendances de test
        if not self.fix_test_dependencies():
            success = False
        
        # 4. Configurer JPype
        if not self.fix_jpype_configuration():
            success = False
        
        # 5. Cr√©er le script d'installation pour les √©tudiants
        self.create_installation_script()
        
        # 6. Validation finale
        validation_success = self.run_validation()
        
        # R√©sum√©
        logger.info("=" * 60)
        if success and validation_success:
            logger.info("üéâ SUCC√àS: Tous les probl√®mes ont √©t√© r√©solus!")
            logger.info("L'environnement est maintenant pr√™t √† l'utilisation.")
        elif success:
            logger.info("‚ö†Ô∏è  PARTIEL: La plupart des probl√®mes ont √©t√© r√©solus.")
            logger.info("Quelques probl√®mes mineurs peuvent subsister.")
        else:
            logger.info("‚ùå √âCHEC: Certains probl√®mes n'ont pas pu √™tre r√©solus automatiquement.")
            logger.info("Consultez les logs ci-dessus pour plus de d√©tails.")
        
        logger.info("\\nüìÅ FICHIERS CR√â√âS:")
        logger.info("   - install_environment.py (installation automatique)")
        logger.info("   - tests/mocks/jpype_mock.py (mock JPype)")
        logger.info("   - scripts/setup/validate_environment.py (validation)")
        
        return success and validation_success

def main():
    """Fonction principale."""
    fixer = EnvironmentFixer()
    
    # Charger le rapport de diagnostic si disponible
    fixer.load_diagnostic_report()
    
    # R√©soudre tous les probl√®mes
    success = fixer.fix_all_issues()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()