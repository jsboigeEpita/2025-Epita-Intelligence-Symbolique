#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SCRIPT D'EX√âCUTION SIMPLIFI√â POUR LA D√âMONSTRATION SHERLOCK-WATSON (CLUEDO)
=========================================================================

Ce script sert de point d'entr√©e unique et simplifi√© pour lancer 
une d√©monstration du syst√®me d'enqu√™te Cluedo.

Il utilise CluedoExtendedOrchestrator pour g√©rer la logique de l'enqu√™te.
"""

import asyncio
import logging
import sys
from pathlib import Path

# Assurer que la racine du projet est dans sys.path pour les imports absolus
_SCRIPT_DIR = Path(__file__).resolve().parent
_PROJECT_ROOT = _SCRIPT_DIR.parent.parent
if str(_PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(_PROJECT_ROOT))

# Import de l'orchestrateur principal
from argumentation_analysis.orchestration.cluedo_extended_orchestrator import (
    CluedoExtendedOrchestrator,
)
from semantic_kernel import (
    Kernel,
)  # N√©cessaire pour l'initialisation de l'orchestrateur


# Configuration du logging simple pour la d√©mo
def setup_demo_logging():
    """Configure un logging basique pour la sortie console."""
    # S'assure de ne configurer qu'une fois
    if not logging.getLogger().handlers:
        logging.basicConfig(
            level=logging.INFO,
            format="[%(levelname)s] %(message)s",
            handlers=[logging.StreamHandler(sys.stdout)],
        )
    # Appliquer le niveau √† tous les handlers existants
    for handler in logging.getLogger().handlers:
        handler.setLevel(logging.INFO)
    return logging.getLogger("DemoCluedo")


logger = setup_demo_logging()


async def run_demo():
    """
    Lance une session de d√©monstration du jeu Cluedo.
    """
    logger.info("üé≤ Initialisation de la d√©monstration Cluedo...")

    # Initialisation minimale du Kernel Semantic Kernel (peut n√©cessiter des variables d'environnement)
    # Pour une d√©mo, on pourrait utiliser un mock ou une configuration minimale.
    # Ici, on suppose une initialisation basique.
    try:
        kernel = Kernel()
        # Potentiellement, ajouter un service LLM si l'orchestrateur en d√©pend directement
        # pour son initialisation ou son fonctionnement de base non couvert par les mocks.
        # Exemple (√† adapter selon les besoins r√©els de CluedoExtendedOrchestrator):
        # from semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion
        # api_key = os.getenv("OPENAI_API_KEY")
        # model_id = os.getenv("OPENAI_CHAT_MODEL_ID", "gpt-4o-mini")
        # if api_key and model_id:
        #     kernel.add_service(OpenAIChatCompletion(service_id="chat_completion", api_key=api_key, ai_model_id=model_id))
        # else:
        #     logger.warning("Variables d'environnement OPENAI_API_KEY ou OPENAI_CHAT_MODEL_ID non d√©finies.")
        #     logger.warning("L'orchestrateur pourrait ne pas fonctionner comme attendu sans service LLM configur√©.")

    except Exception as e:
        logger.error(
            f"‚ùå Erreur lors de l'initialisation du Kernel Semantic Kernel: {e}"
        )
        logger.error(
            "Veuillez v√©rifier votre configuration et vos variables d'environnement."
        )
        return

    try:
        # Instanciation de l'orchestrateur
        # Le constructeur de CluedoExtendedOrchestrator pourrait n√©cessiter le kernel
        # ou d'autres configurations. Adaptez selon sa d√©finition.
        orchestrator = CluedoExtendedOrchestrator(
            kernel=kernel
        )  # ou CluedoExtendedOrchestrator() si kernel n'est pas requis au init

        logger.info("üïµÔ∏è‚Äç‚ôÇÔ∏è Lancement de l'enqu√™te Cluedo...")

        # L'appel √† la m√©thode principale de l'orchestrateur.
        # Remplacez 'start_investigation' par la m√©thode r√©elle.
        # Elle pourrait prendre des param√®tres (ex: description du cas).
        # result = await orchestrator.start_investigation("Un meurtre a √©t√© commis au manoir Tudor.")

        # Lancement du workflow en deux √©tapes
        await orchestrator.setup_workflow()
        game_summary = await orchestrator.execute_workflow(
            initial_question="Sherlock, un meurtre a √©t√© commis. Veuillez commencer l'enqu√™te."
        )

        logger.info("\nüèÅ Enqu√™te Termin√©e !")
        logger.info("R√©sum√© de la partie :")

        # Affichage structur√© du r√©sultat
        if game_summary:
            solution_analysis = game_summary.get("solution_analysis", {})
            workflow_info = game_summary.get("workflow_info", {})
            oracle_stats = game_summary.get("oracle_statistics", {})

            logger.info(f"  Succ√®s: {solution_analysis.get('success', 'N/A')}")
            if solution_analysis.get("success"):
                logger.info(
                    f"  Solution: {solution_analysis.get('proposed_solution', 'N/A')}"
                )
            else:
                logger.info(
                    f"  Solution propos√©e: {solution_analysis.get('proposed_solution', 'N/A')}"
                )
                logger.info(
                    f"  Solution correcte: {solution_analysis.get('correct_solution', 'N/A')}"
                )

            total_turns = oracle_stats.get("agent_interactions", {}).get(
                "total_turns", "N/A"
            )
            logger.info(f"  Nombre de tours: {total_turns}")
            logger.info(
                f"  Temps d'ex√©cution: {workflow_info.get('execution_time_seconds', 'N/A')}s"
            )
        else:
            logger.warning(
                "Aucun r√©sum√© de partie n'a √©t√© retourn√© par l'orchestrateur."
            )

    except Exception as e:
        logger.error(
            f"‚ùå Une erreur est survenue durant l'ex√©cution de la d√©mo: {e}",
            exc_info=True,
        )


async def main():
    await run_demo()


if __name__ == "__main__":
    # Activation de l'environnement
    try:
        from argumentation_analysis.core.environment import ensure_env

        logger.info("Activation de l'environnement...")
        if not ensure_env(silent=False):  # Mettre silent=True pour moins de verbosit√©
            logger.error(
                "ERREUR: Impossible d'activer l'environnement. Le script pourrait √©chouer."
            )
            # D√©commenter pour sortir si l'environnement est critique
            # sys.exit(1)
    except ImportError:
        logger.error(
            "ERREUR: Impossible d'importer 'ensure_env' depuis 'argumentation_analysis.core.environment'."
        )
        logger.error(
            "Veuillez v√©rifier que le PYTHONPATH est correctement configur√© ou que le script est lanc√© depuis la racine du projet."
        )
        sys.exit(1)

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è Ex√©cution de la d√©mo interrompue par l'utilisateur.")
    except Exception as general_error:
        logger.critical(
            f"‚ùå Une erreur non g√©r√©e et critique est survenue: {general_error}",
            exc_info=True,
        )
        sys.exit(1)
