[tool:pytest]
# Configuration pytest optimisée pour éviter timeouts d'orchestration
minversion = 7.0
addopts = -v --tb=short --strict-markers --disable-warnings
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Markers personnalisés
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    functional: marks tests as functional tests
    jpype: marks tests that require jpype
    orchestration: marks tests for orchestration components
    extract_agent: marks tests for extract agent
    mock_required: marks tests that require mocks
    real_libs: marks tests that use real libraries

# Timeouts optimisés pour éviter échecs orchestration
timeout = 30
timeout_method = thread

# Configuration asyncio pour tests async
asyncio_mode = auto
asyncio_default_fixture_loop_scope = session

# Filtres de warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:jpype.*
    ignore::RuntimeWarning:numpy.*
    ignore::FutureWarning:pandas.*

# Options supplémentaires pour stabilité
junit_family = xunit2
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Configuration pour les tests en parallèle (si pytest-xdist installé)
# addopts = -n auto

# Configuration pour les tests d'orchestration
# Timeout plus généreux pour les composants d'orchestration
collect_ignore = [
    "setup.py",
    "conftest.py",
    "venv",
    "build",
    "dist"
]