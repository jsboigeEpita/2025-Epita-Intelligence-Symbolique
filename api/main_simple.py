#!/usr/bin/env python3
"""
API FastAPI Simplifi√©e - GPT-4o-mini Authentique
=================================================

Version simplifi√©e de l'API FastAPI qui √©vite les d√©pendances complexes
et utilise directement GPT-4o-mini via OpenAI.
"""
import logging
from .factory import create_app
from .endpoints_simple import router as api_router

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Gestion du cycle de vie ---

async def startup_event():
    """Actions au d√©marrage de l'API."""
    logger.info("üöÄ D√©marrage API FastAPI Simplifi√©e")
    logger.info("ü§ñ GPT-4o-mini activ√©")
    logger.info("‚úÖ API pr√™te pour les analyses")

async def shutdown_event():
    """Actions √† l'arr√™t de l'API."""
    logger.info("üõë Arr√™t API FastAPI Simplifi√©e")

# --- Cr√©ation de l'application via la factory ---
app = create_app(
    title="Argumentation Analysis API - Simple",
    description="API simplifi√©e d'analyse argumentative utilisant GPT-4o-mini",
    version="1.0.0",
    on_startup=[startup_event],
    on_shutdown=[shutdown_event]
)

# --- Routes ---

# Inclusion du routeur pour les endpoints d'analyse (/api/...)
app.include_router(api_router, prefix="/api")

@app.get("/", tags=["Monitoring"])
def root():
    """Point d'entr√©e racine de l'API simplifi√©e."""
    return {
        "message": "Welcome to the Simplified Argumentation Analysis API",
        "version": "1.0.0",
        "status": "Running",
        "docs": "/docs"
    }

@app.get("/health", tags=["Monitoring"])
def health_check():
    """V√©rifie l'√©tat de sant√© de l'API simplifi√©e."""
    return {
        "status": "healthy",
        "message": "Simplified API is running and ready to serve requests."
    }

# --- Point d'entr√©e pour ex√©cution directe ---

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)